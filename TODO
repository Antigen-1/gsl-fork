Main Todo Items
===============

We are looking for volunteers to do the following tasks.
Consult the TODO files in each directory first for specific
requirements.

* Volunteer(s) for first line support on the mailing lists
(e.g. checking that bugs are reproducible, and that all relevant
information is supplied)

* Eigensystems for non-symmetric matrices

* ODE algorithms from RKSUITE

* Incomplete Fermi-Dirac functions

* General Legendre functions

* Spheroidal wave functions

* Weierstrass elliptic functions

* Complex Bessel Functions

* Additional volunteers with access to a good library to get copies of
papers for other developers.

* Estimates of condition numbers for linear solvers

* Sine and Cosine Transforms from FFTPACK  (Alok Singhal <as8ca@virginia.edu>)

* Cubature, e.g as provided by Cubpack. (Gert Van den Eynde
<gvdeynde@sckcen.be> ?)

* Mathieu functions (Lowell Johnson <ldj00@sio.midco.net>)

* Fresnel Integrals ("Juergen J. Zach" <jjzach@pacific.mps.ohio-state.edu>)

* Cumulative Distribution functions for the random distributions
(Jason Hooper Stover <jason@sakla.net>)

Other tasks:

* Remove use of long double internally, e.g. as an accumulator in
loops. It introduces variation between platforms which is undesirable.
It should be replaced with a preprocessor variable ACC_DOUBLE so
that the user can compile the library with the old long double
behavior if desired.

* Use BLAS internally as much as possible, to take advantage of 
speed improvements on large-scale systems.  There may be some
instances where a simple for() loop is preferred since there's a
function-call overhead in calling BLAS routines.

* More tests. We should (at least) have a test for every error
condition.  Use GCOV to improve coverage.

* Annotate the header files with GAMS classifications.  See if they
can be included in the GAMs website.

* Make the return value EINVAL vs EDOM consistent for invalid
parameters. EDOM means a domain error (i.e. float or mathematically
undefined), EINVAL means invalid (i.e. zero length)

* Change return 0 to return GSL_SUCCESS, and return -1 to GSL_FAILURE
throughout, where appropriate. Similarly change any if(...) checks of
return values to use == GSL_SUCCESS, if they are checking for zero.
N.B. want to be careful about accidentally omitting error conditions
if using something like == GSL_FAILURE when function returns a
different error code.

* Make sure that all #defines are fully wrapped in ()'s, especially
the outermost layer which may have been missed. Everything should be
of the form #define foo(x) (....) so there is no possibility of bad
parsing.  Need a perl script to check this!

* Clean up the ordering of lines in the Makefile.am's so that they are
all consistent. At the moment the lines are in any order.

* Eliminate use of volatile where it has been used to force rounding
(integration/). It is better to write the code to avoid dependence on
rounding.

* Constant objects (like gsl_roots_fsolver_brent) ought to have
constant pointers (const gsl_roots_fsolver_type * const
gsl_roots_fsolver_brent)

