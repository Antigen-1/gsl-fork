TODO 

* make all internal functions static, and have all exported functions
& variables prefixed with gsl_ or GSL_.

Usefule command for checking this: nm -A -g -P */*.a  | perl -a -n -e 'print if $F[1] !~ /gsl_/ && $F[2] ne "U"'

* Make sure config.h is used consistently. This is especially relevant
for HAVE_INLINE use in installed headers.

* Allow the user to test which version they are using, so that a
specific version can be required.
 
* Make the return value EINVAL vs EDOM consistent for invalid
parameters. EDOM means a domain error (i.e. float or mathematically
undefined), EINVAL means invalid (i.e. zero length)

* Change return 0 to return GSL_SUCCESS, and return -1 to GSL_FAILURE
throughout, where appropriate. Similarly change any if(...) checks of
return values to use == GSL_SUCCESS, if they are checking for zero.
N.B. want to be careful about accidentally omitting error conditions
if using something like == GSL_FAILURE when function returns a
different error code.

* Constant objects (like gsl_roots_fsolver_brent) ought to have
constant pointers (const gsl_roots_fsolver_type * const
gsl_roots_fsolver_brent)??

* Upgrade to texinfo-4.0

* There is a file ieee-utils/fp-sparclinux.c which shows how to define
a gsl_ieee_set_mode function for a variant of Linux. If you would like
to make and test a corresponding file for M68K Linux (fp-m68klinux.c)
we can include the patch in GSL. (There are also corresponding
HAVE_SPARCLINUX_IEEE_INTERFACE macros in config.h.in, configure.in and
fp.c). Otherwise I will make a note to add a file like this for the
next release (and to rename the current fp-linux.c to fp-i86linux.c).

* More tests. We should (at least) have a test for every error
condition. Write a perl script to check for error conditions that
aren't tested. Actually GCOV does a better job -- use that for
coverage testing.

* Add swig.i files and swig demos so that swig can be run more easily

* Redesign the interface to iterative functions to use an init/do-while
construct

* Sine and Cosine Transforms from FFTPACK. A simple multidimensional
fft.

* Some header files for physical constants (speed of light, etc),
using data from the Particle Data Book. (e.g. gsl_physics.h, could
also have gsl_chemistry.h, gsl_astro.h, etc)



