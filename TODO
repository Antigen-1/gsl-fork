TODO  -- see also individual TODO files in each directory

* Extend histogram routines as described in recent discussion

* Add notes about gsl-config to documentation, usage.texi

* Check that there are no conflicts when linking with Lapack. CBLAS, ATLAS

* Add GPL copyright notices for each file

* Make a sorted datatype for the median and quantile functions so that
the user can be prevented from passing unsorted data, which is not
checked for.

* Add a vector layer to statistics and ffts, sometime in the future.

* Switch to library interface versioning for libtool (eventually).

* Add support for C++ headers (Use __BEGIN_DECLS __END_DECLS as
in the Libtool Manual).

* Eliminate use of volatile where it has been used to force rounding
(integration/). It is better to write the code to avoid dependence on
rounding.

* Optimization/error for dest == src as appropriate

* Clean up the ordering of lines in the Makefile.am's so that they are
all consistent. At the moment the lines are in any order. Also get rid
of make strict targets, since it's better to define a shell alias to
do that.  Files with strict target are 

    blas/Makefile.am
    dht/Makefile.am
    linalg/Makefile.am
    monte/Makefile.am
    ode-initval/Makefile.am
    specfunc/Makefile.am
    sum/Makefile.am

* Run tests where matrix tda != size2, note that tda is a physical
dimension and size2 is the number of columns in the matrix. This will
probably find a lot of bugs in the matrix logic.

* Debian Bug#52789: Write an ieee-utils/fp-m68klinux.c file to handle
floating point on M68K linux. There is a file fp-sparclinux.c which
shows how to define a gsl_ieee_set_mode function for a variant of
Linux.

* Make all internal functions static, and have all exported functions
& variables prefixed with gsl_ or GSL_. Useful command for checking this: nm -A -g -P */*.a  | perl -a -n -e 'print if $F[1] !~ /gsl_/ && $F[2] ne "U"'

* Make sure config.h is used consistently. This is especially relevant
for HAVE_INLINE use in installed headers.

* Make the return value EINVAL vs EDOM consistent for invalid
parameters. EDOM means a domain error (i.e. float or mathematically
undefined), EINVAL means invalid (i.e. zero length)

* Change return 0 to return GSL_SUCCESS, and return -1 to GSL_FAILURE
throughout, where appropriate. Similarly change any if(...) checks of
return values to use == GSL_SUCCESS, if they are checking for zero.
N.B. want to be careful about accidentally omitting error conditions
if using something like == GSL_FAILURE when function returns a
different error code.

* Constant objects (like gsl_roots_fsolver_brent) ought to have
constant pointers (const gsl_roots_fsolver_type * const
gsl_roots_fsolver_brent)??

* Upgrade to texinfo-4.0. Fix texinfo files so that sentences
consistently use a double space after the preceding period (n.b. do
this by hand, because there are names in the references which need
only a single space, e.g. D. E. Knuth).

* More tests. We should (at least) have a test for every error
condition. Write a perl script to check for error conditions that
aren't tested. Actually GCOV does a better job -- use that for
coverage testing.

* Add swig.i files and swig demos so that swig can be run more easily

* Redesign the interface to iterative functions to use an init/do-while
construct (Mostly done).

* Sine and Cosine Transforms from FFTPACK. A simple multidimensional
fft.

* Some header files for physical constants (speed of light, etc),
using data from the Particle Data Book. (e.g. gsl_physics.h, could
also have gsl_chemistry.h, gsl_astro.h, etc)



