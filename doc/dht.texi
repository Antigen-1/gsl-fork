This chapter describes functions for performing Discrete Hankel Transforms
(DHTs). The discrete Hankel transform acts on a vector of sampled data,
where the samples are assumed to have been taken at points related to
the zeroes of a Bessel function of fixed order; compare this to the
case of the discrete Fourier transform, where samples are token
at points related to the zeroes of the sine or cosine function.

Specifically, let @math{f(t)} be a function on the unit interval.
Then the finite @math{\nu}-Hankel transform of @math{f(t)} is defined
to be the set of numbers @math{g_m} given by

@tex
\beforedisplay
$$
g_m = \int_0^1 t dt\, J_\nu(j_{\nu,m}t) f(t),
$$
\afterdisplay
@end tex

@noindent
so that

@tex
\beforedisplay
$$
f(t) = \sum_{m=1}^\infty {{2 J_\nu(j_{\nu,m}x)}\over{J_{\nu+1}(j_{\nu,m})^2}} g_m.
$$
\afterdisplay
@end tex

@noindent
Suppose that @math{f} is band-limited in the sense that
@math{g_m=0} for @math{m > M}. Then we have the following
fundamental sampling theorem.

@tex
\beforedisplay
$$
g_m = {{2}\over{j_{\nu,M}^2}}
      \sum_{k=1}^{M-1} f({{j_{\nu,k}}\over{j_{\nu,M}}})
          {{J_\nu(j_{\nu,m} j_{\nu,k} / j_{\nu,M})}\over{J_{\nu+1}(j_{\nu,k})^2}}.
$$
\afterdisplay
@end tex

@noindent
It is this discrete expression which defines the discrete Hankel
transform. The kernel in the summation above defines the matrix
of the @math{\nu}-Hankel transform of size @math{M-1}.
The coefficients of this matrix, being dependent on
@math{\nu} and @math{M}, must be precomputed and stored;
the @code{gsl_dht_transform} object encapsulates this data.
The allocation function @code{gsl_dht_transform_new} returns
a properly initialized
object which can then be used to perform transforms on data
sample vectors, for fixed @math{\nu} and @math{M}, using the
@code{gsl_dht_transform_apply} function. The implementation
allows a scaling of the fundamental interval, for convenience,
so that one take assume the function is defined on
the interval @math{[0,X]}, rather than the unit interval.

Notice that by assumption @math{f(t)} vanishes at the endpoints
of the interval, consistent with the inversion formula
and the sampling formula given above. Therefore, this transform
corresponds to an orthogonal expansion in eigenfunctions
of the Dirichlet problem for the Bessel differential equation.


@deftypefun {gsl_dht_transform *} gsl_dht_transform_new (size_t @var{size}, double @var{nu}, double @var{xmax})
Allocate and initialize a transform object.
@end deftypefun

@deftypefun void gsl_dht_transform_free (gsl_dht_transform * @var{t})
Free a transform object.
@end deftypefun

@deftypefun int gsl_dht_transform_apply (const gsl_dht_transform * @var{t}, double * @var{f_in}, double * @var{f_out})
Apply a transform object to a data vector, f_in[0] ... f_in[size-1].
@end deftypefun

@deftypefun double gsl_dht_transform_x_sample (const gsl_dht_transform * @var{t}, int @var{n})
Return the value of the n'th sample point in the unit interval,
@math{{{j_{\nu,n+1}}\over{j_{\nu,M}}} X}. These are the
points where the function @math{f(t)} is assumed to be sampled.
@end deftypefun

@deftypefun double gsl_dht_transform_k_sample (const gsl_dht_transform * @var{t}, int @var{n})
Return the value of the n'th sample point in "k-space",
@math{{{j_{\nu,n+1}}\over X}}.
@end deftypefun

@deftypefun int gsl_dht_transform_recalc_impl (gsl_dht_transform * @var{t}, double @var{nu}, double @var{xmax})
@deftypefunx int gsl_dht_transform_recalc_e (gsl_dht_transform * @var{t}, double @var{nu}, double @var{xmax})
Recalculate a transform object for a different @math{\nu} and @math{X}. The
size cannot be changed, because the internal allocation is not changed.
@end deftypefun

@itemize @asis
@item
H. Fisk Johnson, Comp. Phys. Comm. 43, 181 (1987).
@cite{Johnson}
@end itemize

@itemize @asis
@item
D. Lemoine, J. Chem. Phys. 101, 3936 (1994).
@cite{Lemoine}
@end itemize
