@cindex polynomials, roots of
This chapter describes functions for solving polynomial equations. There
are routines for finding real and complex roots of quadratic and cubic
equations using analytic methods. The functions are defined in the
header file @code{gsl_poly.h}.

@menu
* Quadratic equations::         
* Cubic equations::             
@end menu

@node  Quadratic equations
@section Quadratic equations
@cindex quadratic equation, solving

@deftypefun int gsl_poly_solve_quadratic (double @var{a}, double @var{b}, double @var{c}, double *@var{x0}, double *@var{x1})
This function finds the real roots of the quadratic equation,

@tex
\beforedisplay
$$
a x^2 + b x + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
a x^2 + b x + c = 0
@end example
@end ifinfo

@noindent
The number of real roots (either zero or two) is returned, and their
locations are stored in @var{x0} and @var{x1}. If no real roots are
found then @var{x0} and @var{x1} are not modified. When two real roots
are found they are stored in @var{x0} and @var{x1} in ascending
order. The case of coincident roots is not considered special. For
example @math{(x-1)^2=0} will have two roots, which happen to have
exactly equal values.

The number of roots found depends on the sign of the discriminant
@math{b^2 - 4 a c}.  This will be subject to rounding and cancellation
errors when computed in double precision, and will also be subject to
errors if the coefficients of the polynomial are inexact. These errors
may cause a discrete change in the number of roots. However, for
polynomials with small integer coefficients the discriminant can always
be computed exactly.

@end deftypefun

@deftypefun int gsl_poly_complex_solve_quadratic (double @var{a}, double @var{b}, double @var{c}, gsl_complex *@var{z0}, gsl_complex *@var{z1})

This function finds the complex roots of the quadratic equation,

@tex
\beforedisplay
$$
a z^2 + b z + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
a z^2 + b z + c = 0
@end example
@end ifinfo

@noindent
The number of complex roots is returned (always two) and the locations
of the roots are stored in @var{z0} and @var{z1}. The roots are returned
in ascending order, sorted first by their real components and then by
their imaginary components.

@end deftypefun


@node Cubic equations
@section Cubic equations
@cindex cubic equation, solving

@deftypefun int gsl_poly_solve_cubic (double @var{a}, double @var{b}, double @var{c}, double *@var{x0}, double *@var{x1}, double *@var{x2})

This function finds the real roots of the cubic equation,

@tex
\beforedisplay
$$
x^3 + a x^2 + b x + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
x^3 + a x^2 + b x + c = 0
@end example
@end ifinfo

@noindent
with a leading coefficient of unity. The number of real roots (either
one or three) is returned, and their locations are stored in @var{x0},
@var{x1} and @var{x2}. If one real root is found then only @var{x0} is
modified. When three real roots are found they are stored in @var{x0},
@var{x1} and @var{x2} in ascending order. The case of coincident roots
is not considered special. For example, the equation @math{(x-1)^3=0}
will have three roots with exactly equal values.

@end deftypefun

@deftypefun int gsl_poly_complex_solve_cubic (double @var{a}, double @var{b}, double @var{c}, gsl_complex *@var{z0}, gsl_complex *@var{z1}, gsl_complex *@var{z2})

This function finds the complex roots of the cubic equation,

@tex
\beforedisplay
$$
z^3 + a z^2 + b z + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
z^3 + a z^2 + b z + c = 0
@end example
@end ifinfo

@noindent
The number of complex roots is returned (always three) and the locations
of the roots are stored in @var{z0}, @var{z1} and @var{z3}. The roots
are returned in ascending order, sorted first by their real components
and then by their imaginary components.

@end deftypefun
