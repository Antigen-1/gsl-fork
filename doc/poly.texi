This chapter describes functions for solving polynomial equations. There
are routines for finding real and complex roots of quadratic and cubic
equations using analytic methods. The functions are defined in the
header file @code{gsl_poly.h}.

@menu
* Quadratic equations::         
* Cubic equations::             
@end menu

@node  Quadratic equations
@section Quadratic equations

@deftypefun int gsl_poly_solve_quadratic (double @var{a}, double @var{b}, double @var{c}, double *@var{x0}, double *@var{x1})
This function finds the real roots of the quadratic equation,

@tex
\beforedisplay
$$
a x^2 + b x + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
a x^2 + b x + c = 0
@end example
@end ifinfo

@noindent
The number of distinct real roots (either zero, one or two) is returned,
and their locations are stored in @var{x0} and @var{x1}. If no real
roots are found then @var{x0} and @var{x1} are not modified. If one real
root is found then only @var{x0} is modified. When two distinct real
roots are found they are stored in @var{x0} and @var{x1} in ascending
order.

Whether or not two roots are considered distinct depends on the sign 
of the discriminant @math{b^2 - 4 a c}. 
This will be subject to rounding and cancellation errors when computed
in double precision, and will also be subject to errors if the
coefficients of the polynomial are inexact. However, for polynomials
with small integer coefficients the discriminant can always be computed
exactly.

@end deftypefun

@deftypefun int gsl_poly_complex_solve_quadratic (double @var{a}, double @var{b}, double @var{c}, gsl_complex *@var{z0}, gsl_complex *@var{z1})

This function finds the complex roots of the quadratic equation,

@tex
\beforedisplay
$$
a z^2 + b z + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
a z^2 + b z + c = 0
@end example
@end ifinfo

@noindent
The number of distinct complex roots is returned (either one or two) and
the locations of the roots are stored in @var{z0} and @var{z1}. The
roots are returned in ascending order, sorted first by their real
components and then by their imaginary components.

If only one distinct complex root is found then only @var{z0} is
modified.

@end deftypefun


@node Cubic equations
@section Cubic equations

@deftypefun int gsl_poly_solve_cubic (double @var{a}, double @var{b}, double @var{c}, double *@var{x0}, double *@var{x1}, double *@var{x2})

This function finds the real roots of the cubic equation,

@tex
\beforedisplay
$$
x^3 + a x^2 + b x + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
x^3 + a x^2 + b x + c = 0
@end example
@end ifinfo

@noindent
with a leading coefficient of unity. The number of real roots (either
one or three) is returned, and their locations are stored in @var{x0},
@var{x1} and @var{x2}. For the cubic equation only the number of roots
is counted, regardless of whether they are distinct, due to the
complexity of a larger number of roots. If one real root is found then
only @var{x0} is modified. When three real roots are found they are
stored in @var{x0}, @var{x1} and @var{x2} in ascending order.

@end deftypefun

@deftypefun int gsl_poly_complex_solve_cubic (double @var{a}, double @var{b}, double @var{c}, gsl_complex *@var{z0}, gsl_complex *@var{z1}, gsl_complex *@var{z2})

This function finds the complex roots of the cubic equation,

@tex
\beforedisplay
$$
z^3 + a z^2 + b z + c = 0
$$
\afterdisplay
@end tex
@ifinfo
@example
z^3 + a z^2 + b z + c = 0
@end example
@end ifinfo

@noindent
The number of complex roots is returned (always three) and the locations
of the roots are stored in @var{z0}, @var{z1} and @var{z3}. The roots
are returned in ascending order, sorted first by their real components
and then by their imaginary components.

@end deftypefun
