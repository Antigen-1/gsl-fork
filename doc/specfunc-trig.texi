@comment
@node Trigonometric Functions
@section Trigonometric Functions
@cindex Trigonometric functions



@subsection Trigonometric Functions

These simple trogonometric functions are important
because we want to control the error estimate, and trying
to guess the error for the standard library implementation
every time it is used would be a little goofy.

@deftypefun double gsl_sf_sin (double @var{x})
@deftypefunx int gsl_sf_sin_e (double @var{x}, gsl_sf_result * @var{result})
@comment Exceptional Return Values:
@end deftypefun

@deftypefun double gsl_sf_cos (double @var{x})
@deftypefunx int gsl_sf_cos_e (double @var{x}, gsl_sf_result * @var{result})
@comment Exceptional Return Values:
@end deftypefun


@deftypefun double gsl_sf_hypot (double @var{x}, double @var{y})
@deftypefunx int gsl_sf_hypot_e (double @var{x}, double @var{y}, gsl_sf_result * @var{result})
@comment Exceptional Return Values:
@end deftypefun


@deftypefun int gsl_sf_complex_sin_e (double @var{zr}, double @var{zi}, gsl_sf_result * @var{szr}, gsl_sf_result * @var{szi})
Sin(z) 
@comment Exceptional Return Values: GSL_EOVRFLW
@end deftypefun


@deftypefun int gsl_sf_complex_cos_e (double @var{zr}, double @var{zi}, gsl_sf_result * @var{czr}, gsl_sf_result * @var{czi})
Cos(z) 
@comment Exceptional Return Values: GSL_EOVRFLW
@end deftypefun


@deftypefun int gsl_sf_complex_logsin_e (double @var{zr}, double @var{zi}, gsl_sf_result * @var{lszr}, gsl_sf_result * @var{lszi})
Log(Sin(z)) 
@comment Exceptional Return Values: GSL_EDOM, GSL_ELOSS
@end deftypefun


@deftypefun double gsl_sf_sinc (double @var{x})
@deftypefunx int gsl_sf_sinc_e (double @var{x}, gsl_sf_result * @var{result})
Sinc(x) = sin(pi x) / (pi x) 
@comment Exceptional Return Values: none
@end deftypefun


@deftypefun double gsl_sf_lnsinh (double @var{x})
@deftypefunx int gsl_sf_lnsinh_e (double @var{x}, gsl_sf_result * @var{result})
Log(Sinh(x)) 
Domain: x > 0 
@comment Exceptional Return Values: GSL_EDOM
@end deftypefun


@deftypefun double gsl_sf_lncosh (double @var{x})
@deftypefunx int gsl_sf_lncosh_e (double @var{x}, gsl_sf_result * @var{result})
Log(Cosh(x)) 
@comment Exceptional Return Values: none
@end deftypefun



@subsection Conversion Functions


@deftypefun int gsl_sf_polar_to_rect_e (double @var{r}, double @var{theta}, gsl_sf_result * @var{x}, gsl_sf_result * @var{y}); 
Convert polar to rectlinear coordinates. 
@comment Exceptional Return Values: GSL_ELOSS
@end deftypefun

@deftypefun int gsl_sf_rect_to_polar_e (double @var{x}, double @var{y}, gsl_sf_result * @var{r}, gsl_sf_result * @var{theta})
Convert rectilinear to polar coordinates.
Return argument in range [-pi, pi]. 
@comment Exceptional Return Values: GSL_EDOM
@end deftypefun



@subsection Restriction Functions


@deftypefun double gsl_sf_angle_restrict_symm (double @var{theta})
@deftypefunx int gsl_sf_angle_restrict_symm_e (double * @var{theta})
Force an angle to lie in the range (-pi,pi].
@comment Exceptional Return Values: GSL_ELOSS
@end deftypefun


@deftypefun double gsl_sf_angle_restrict_pos (double @var{theta})
@deftypefunx int gsl_sf_angle_restrict_pos_e (double * @var{theta})
Force an angle to lie in the range [0, 2pi).
@comment Exceptional Return Values: GSL_ELOSS
@end deftypefun



@subsection Trigonometric Functions With Error Estimate


@deftypefun double gsl_sf_sin_err (double @var{x}, double @var{dx})
@deftypefunx int gsl_sf_sin_err_e (double @var{x}, double @var{dx}, gsl_sf_result * @var{result})
@end deftypefun


@deftypefun double gsl_sf_cos_err (double @var{x}, double @var{dx})
@deftypefunx int gsl_sf_cos_err_e (double @var{x}, double @var{dx}, gsl_sf_result * @var{result})
@end deftypefun

