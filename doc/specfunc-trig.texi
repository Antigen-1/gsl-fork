@comment
@node Trigonometric Functions
@section Trigonometric Functions
@cindex Trigonometric functions



@subsection Trigonometric Functions

These simple trogonometric functions are important
because we want to control the error estimate, and trying
to guess the error for the standard library implementation
every time it is used would be a little goofy.

@deftypefun  int gsl_sf_sin_impl(double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_sin_e(double x, gsl_sf_result * result);
Exceptional Return Values:
@end deftypefun

@deftypefun  int gsl_sf_cos_impl(double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_cos_e(double x, gsl_sf_result * result);
Exceptional Return Values:
@end deftypefun


@deftypefun  int gsl_sf_hypot_impl(double x, double y, gsl_sf_result * result);
@deftypefunx int gsl_sf_hypot_e(double x, double y, gsl_sf_result * result);
Exceptional Return Values:
@end deftypefun


@deftypefun  int gsl_sf_complex_sin_impl(double zr, double zi, gsl_sf_result * szr, gsl_sf_result * szi);
@deftypefunx int gsl_sf_complex_sin_e(double zr, double zi, gsl_sf_result * szr, gsl_sf_result * szi);
Sin(z) 
Exceptional Return Values: GSL_EOVRFLW
@end deftypefun


@deftypefun  int gsl_sf_complex_cos_impl(double zr, double zi, gsl_sf_result * czr, gsl_sf_result * czi);
@deftypefunx int gsl_sf_complex_cos_e(double zr, double zi, gsl_sf_result * czr, gsl_sf_result * czi);
Cos(z) 
Exceptional Return Values: GSL_EOVRFLW
@end deftypefun


@deftypefun  int gsl_sf_complex_logsin_impl(double zr, double zi, gsl_sf_result * lszr, gsl_sf_result * lszi);
@deftypefunx int gsl_sf_complex_logsin_e(double zr, double zi, gsl_sf_result * lszr, gsl_sf_result * lszi);
Log(Sin(z)) 
Exceptional Return Values: GSL_EDOM, GSL_ELOSS
@end deftypefun


@deftypefun  int gsl_sf_sinc_impl(double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_sinc_e(double x, gsl_sf_result * result);
Sinc(x) = sin(pi x) / (pi x) 
Exceptional Return Values: none
@end deftypefun


@deftypefun  int gsl_sf_lnsinh_impl(double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_lnsinh_e(double x, gsl_sf_result * result);
Log(Sinh(x)) 
Domain: x > 0 
Exceptional Return Values: GSL_EDOM
@end deftypefun


@deftypefun  int gsl_sf_lncosh_impl(double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_lncosh_e(double x, gsl_sf_result * result);
Log(Cosh(x)) 
Exceptional Return Values: none
@end deftypefun



@subsection Conversion Functions


@deftypefun  int gsl_sf_polar_to_rect_impl(double r, double theta, gsl_sf_result * x, gsl_sf_result * y);
@deftypefunx int gsl_sf_polar_to_rect_e(double r, double theta, gsl_sf_result * x, gsl_sf_result * y); 
Convert polar to rectlinear coordinates. 
Exceptional Return Values: GSL_ELOSS
@end deftypefun


@deftypefun  int gsl_sf_rect_to_polar_impl(double x, double y, gsl_sf_result * r, gsl_sf_result * theta)
@deftypefunx int gsl_sf_rect_to_polar_e(double x, double y, gsl_sf_result * r, gsl_sf_result * theta)
Convert rectilinear to polar coordinates.
Return argument in range [-pi, pi]. 
Exceptional Return Values: GSL_EDOM
@end deftypefun



@subsection Restriction Functions


@deftypefun  int gsl_sf_angle_restrict_symm_impl(double * theta);
@deftypefunx int gsl_sf_angle_restrict_symm_e(double * theta);
Force an angle to lie in the range (-pi,pi].
Exceptional Return Values: GSL_ELOSS
@end deftypefun


@deftypefun  int gsl_sf_angle_restrict_pos_impl(double * theta);
@deftypefunx int gsl_sf_angle_restrict_pos_e(double * theta);
Force an angle to lie in the range [0, 2pi).
Exceptional Return Values: GSL_ELOSS
@end deftypefun



@ Trigonometric Functions With Error Estimate


@deftypefun  int gsl_sf_sin_err_impl(double x, double dx, gsl_sf_result * result);
@deftypefunx int gsl_sf_sin_err_e(double x, double dx, gsl_sf_result * result);
@end deftypefun


@deftypefun  int gsl_sf_cos_err_impl(double x, double dx, gsl_sf_result * result);
@deftypefunx int gsl_sf_cos_err_e(double x, double dx, gsl_sf_result * result);
@end deftypefun

