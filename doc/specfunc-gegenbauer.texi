@comment
@node Gegenbauer Functions
@section Gegenbauer Functions
@cindex Gegenbauer functions


@deftypefun double gsl_sf_gegenpoly_1 (double @var{lambda}, double @var{x})
@deftypefunx double gsl_sf_gegenpoly_2 (double @var{lambda}, double @var{x})
@deftypefunx double gsl_sf_gegenpoly_3 (double @var{lambda}, double @var{x})
@deftypefunx int gsl_sf_gegenpoly_1_e (double @var{lambda}, double @var{x}, gsl_sf_result * @var{result})
@deftypefunx int gsl_sf_gegenpoly_2_e (double @var{lambda}, double @var{x}, gsl_sf_result * @var{result})
@deftypefunx int gsl_sf_gegenpoly_3_e (double @var{lambda}, double @var{x}, gsl_sf_result * @var{result})
Evaluate Gegenbauer polynomials using explicit representations.
@comment Exceptional Return Values: none
@end deftypefun


@deftypefun double gsl_sf_gegenpoly_n (int @var{n}, double @var{lambda}, double @var{x})
@deftypefunx int gsl_sf_gegenpoly_n_e (int @var{n}, double @var{lambda}, double @var{x}, gsl_sf_result * @var{result})
Evaluate Gegenbauer polynomials.
Domain: lambda > -1/2, n >= 0
@comment Exceptional Return Values: GSL_EDOM
@end deftypefun


@deftypefun int gsl_sf_gegenpoly_array (int @var{nmax}, double @var{lambda}, double @var{x}, double * @var{result_array})
Calculate array of Gegenbauer polynomials.
Conditions: n = 0, 1, 2, ... nmax
Domain: lambda > -1/2, nmax >= 0
@comment Exceptional Return Values: GSL_EDOM
@end deftypefun
