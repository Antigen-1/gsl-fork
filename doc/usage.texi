This chapter describes how to compile programs that use GSL. The library
is written in ANSI-C and is intended to conform to the standard. The
library does not make use of any extensions in the interface it exports
to the user, except where they can be implemented in a way compatible
with pure ANSI C. Thus programs you write using GSL should be portable
to any system with a working ANSI C compiler and system library, and
simultaneously be able to take advantage of compiler extensions on those
platforms which support them. When an ANSI C feature is known to be
broken on a particular system the library will exclude any related
functions so that it is impossible to link a program that would use them
and give incorrect results.

@menu
* Inline functions::            
* Long double::                 
@end menu

@node Inline functions
@section Inline functions

The @code{inline} keyword is not part of ANSI C, only C++. Since the
library header files conform to the ANSI standard this prevents the use
@code{inline}. The library does not export any inline function
definitions by default. However, for many frequently used functions
there are equivalent inline definitions which can be turned on by
defining the macro @code{HAVE_INLINE} when compiling an application. If
you use @code{autoconf} this can be done automatically using the
following test,

@example
AC_C_INLINE

if test "$ac_cv_c_inline" != no ; then
  AC_DEFINE(HAVE_INLINE,1)
  AC_SUBST(HAVE_INLINE)
fi
@end example
@noindent
and then including @file{config.h} before including any library headers.
If you do not define the macro @code{HAVE_INLINE} then the slower
non-inlined versions of the functions are used instead.

@node Long double
@section Long double
The extended numerical type @code{long double} is part of the ANSI C
standard and should be available in every modern compiler. However, the
@code{stdio.h} formatted input/output functions @code{printf} and
@code{scanf} are not always implemented correctly for @code{long double}
in some system libraries, perhaps because the @code{long double} type is
not widely used outside numerical programming. In order to avoid
undefined or incorrect results these functions are tested during the
@code{configure} stage of library compilation and certain GSL functions
which depend on them are eliminated if necessary,

@example
checking whether printf/scanf works with long double... no
@end example
@noindent
Consequently if @code{long double} formatted input/output does not work
on a given system then it will not be possible to link a program which
uses GSL functions relying on @code{long double} formatted i/o.

If it is necessary to work on a system which does not support formatted
@code{long double} i/o then the options are to use binary i/o or to
convert @code{long double} results into @code{double} for reading and
writing.
