@cindex elementary functions
@cindex mathematical functions, elementary

This chapter describes basic mathematical functions.  Some of these
functions are present in system libraries, but the alternative versions
in the library can be used as a substitute when the system functions are
not available.

The functions and macros are defined in the header file @file{gsl_math.h}.

@menu
* Mathematical Constants::      
* Elementary Functions::        
* Testing the Sign of Numbers::  
* Testing for Odd and Even Numbers::  
* Maximum and Minimum functions::  
@end menu

@node Mathematical Constants
@section Mathematical Constants
@cindex mathematical constants, defined as macros
@cindex numerical constants, defined as macros
@cindex constants, mathematical --- defined as macros
@cindex macros for mathematical constants
The library ensures that the standard @sc{bsd} mathematical constants
are defined. For reference here is a list of the constants.

@table @code
@item M_E
@cindex e, defined as a macro
The base of exponentials, @math{e}

@item M_LOG2E
The base-2 logarithm of @math{e}, @math{\log_2 (e)}

@item M_LOG10E
The base-10 logarithm of @math{e}, @c{$\log_{10}(e)$}
@math{\log_10 (e)}

@item M_SQRT2
The square root of two, @math{\sqrt 2}

@item M_SQRT1_2
The square root of one-half, @c{$\sqrt{1/2}$}
@math{\sqrt@{1/2@}}

@item M_SQRT3
The square root of three, @math{\sqrt 3}

@item M_PI
@cindex pi, defined as a macro
The constant pi, @math{\pi}

@item M_PI_2
pi divided by two, @math{\pi/2}

@item M_PI_4
pi divided by four, @math{\pi/4}

@item M_SQRTPI
The square root of pi, @math{\sqrt\pi}

@item M_2_SQRTPI
Two divided by the square root of pi, @math{2/\sqrt\pi}

@item M_1_PI
The reciprocal of pi, @math{1/\pi}

@item M_2_PI
Twice the reciprocal of pi, @math{2/\pi}

@item M_LN10
The natural logarithm of ten, @math{\ln(10)}

@item M_LN2
The natural logarith of two, @math{\ln(2)}

@item M_LNPI
The natural logarithm of pi, @math{\ln(\pi)}

@item M_EULER
@cindex Euler's constant, defined as a macro
Euler's constant, @math{\gamma}

@end table


@node Elementary Functions
@section Elementary Functions

@deftypefun double gsl_log1p (const double @var{x})
@cindex log1p
@cindex logarithm, computed accurately
This function computes the value of @math{\log(1+x)} in a way that is
accurate for small @var{x}. It provides an alternative to the system
function @code{log1p(x)}.
@end deftypefun

@deftypefun double gsl_hypot (const double @var{x}, const double @var{y})
@cindex hypot
@cindex euclidean distance function, hypot
@cindex length, computed accurately using hypot
This function computes the value of
@c{$\sqrt{x^2 + y^2}$}
@math{\sqrt@{x^2 + y^2@}} in a way that avoid overflow. It provides an
alternative to the system function @code{hypot(x,y)}.
@end deftypefun

@node Testing the Sign of Numbers
@section Testing the Sign of Numbers

@defmac GSL_SIGN (x)
This macro returns the sign of @var{x}. It is defined as @code{((x) >= 0
? 1 : -1)}. Note that with this definition the sign of zero is positive
(regardless of its @sc{ieee} sign bit).
@end defmac

@node Testing for Odd and Even Numbers
@section Testing for Odd and Even Numbers

@defmac GSL_IS_ODD (n)
This macro evaluates to 1 if @var{n} is odd and 0 if @var{n} is
even. The argument @var{n} must be of integer type.
@end defmac

@defmac GSL_IS_EVEN (n)
This macro is the opposite of @code{GSL_IS_ODD(n)}. It evaluates to 1 if
@var{n} is even and 0 if @var{n} is odd. The argument @var{n} must be of
integer type.
@end defmac



@node Maximum and Minimum functions
@section Maximum and Minimum functions

@defmac GSL_MAX (a, b)
@cindex maximum of two numbers
This macro returns the maximum of @var{a} and @var{b}. It is defined as 
@code{((a) > (b) ? (a):(b))}.
@end defmac

@defmac GSL_MIN (a, b)
@cindex minimum of two numbers
This macro returns the minimum of @var{a} and @var{b}. It is defined as 
@code{((a) < (b) ? (a):(b))}.
@end defmac

@deftypefun {extern inline double} GSL_MAX_DBL (double @var{a}, double @var{b})
This function returns the maximum of the double precision numbers
@var{a} and @var{b} using an inline function. The use of a function
allows for type checking of the arguments as an extra safety feature. On
platforms where inline functions are not available the macro
@code{GSL_MAX} will be automatically substituted.
@end deftypefun

@deftypefun {extern inline double} GSL_MIN_DBL (double @var{a}, double @var{b})
This function returns the minimum of the double precision numbers
@var{a} and @var{b} using an inline function. The use of a function
allows for type checking of the arguments as an extra safety feature. On
platforms where inline functions are not available the macro
@code{GSL_MIN} will be automatically substituted.
@end deftypefun

@deftypefun {extern inline int} GSL_MAX_INT (int @var{a}, int @var{b})
@deftypefunx {extern inline int} GSL_MIN_INT (int @var{a}, int @var{b})
These functions return the maximum or minimum of the integers @var{a}
and @var{b} using an inline function.  On platforms where inline
functions are not available the macros @code{GSL_MAX} or @code{GSL_MIN}
will be automatically substituted.
@end deftypefun

@deftypefun {extern inline long double} GSL_MAX_LDBL (long double @var{a}, long double @var{b})
@deftypefunx {extern inline long double} GSL_MIN_LDBL (long double @var{a}, long double @var{b})
These functions return the maximum or minimum of the long doubles @var{a}
and @var{b} using an inline function.  On platforms where inline
functions are not available the macros @code{GSL_MAX} or @code{GSL_MIN}
will be automatically substituted.
@end deftypefun
