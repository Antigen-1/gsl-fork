@cindex random number generators

The @value{GSL} provides a large collection of random number generators
which can be accessed through a uniform interface. Environment variables
allow you to select different generators and seeds at runtime, so that
you can easily switch between generators without needing to recompile
your program. Each instance of a generator keeps track of its own state,
allowing the generators to be used in multi-threaded programs.
Additional functions are available for transforming uniform random
numbers into samples from continuous or discrete probability
distributions such as the gaussian, log-normal or poisson distributions.

@menu
* General comments on random numbers::  
* Random number generator initialization::  
* Sampling from a random number generator::  
* Auxiliary random number generator functions::  
* Random number environment variables::  
* Saving and restoring random number generator state::  
* Available random number generator algorithms::  
* Random Number Distributions::  
* Random Number References and Further Reading::  
* Random Number Acknowledgements::  
@end menu

@node General comments on random numbers
@section General comments on random numbers

In 1988, Park and Miller wrote a paper entitled ``Random number
generators: good ones are hard to find.'' [Commun. ACM, 31, 1192--1201].
Fortunately, some excellent random number generators are available,
though poor ones are still in common use.  You may be happy with the
system-supplied random number generator on your computer, but you should
be aware that as computers get faster, requirements on random number
generators increase.  Nowadays, a simulation that calls a random number
generator millions of times can often finish before you can make it down
the hall to the coffee machine and back.

A very nice review of random number generators was written by Pierre
L'Ecuyer, as Chapter 4 of the book: Handbook on Simulation, Jerry Banks,
ed. (Wiley, 1997). The chapter is available in postscript from from
L'Ecuyer's ftp site (see references). Knuth's volume on Seminumerical
Algorithms (originally published in 1968) devotes 170 pages to random
number generators, and has recently been updated in its 3rd edition
(1997).
@c is only now starting to show its age.
@c Nonetheless, 
It is brilliant, a classic. If you don't own it, you should stop reading
right now, run to the nearest bookstore, and buy it.

A good random number generator will satisfy both theoretical and
statistical properties.  Theoretical properties are often hard to obtain
(they require real math!), but one prefers a random number generator
with a long period, low serial correlation, and a tendency @emph{not} to
``fall mainly on the planes.''  Statistical tests are performed with
numerical simulations.  Generally, a random number generator is used to
estimate some quantity for which the theory of probability provides an
exact answer.  Comparison to this exact answer provides a measure of
``randomness''.

@node Random number generator initialization
@section Random number generator initialization

It is important to remember that a random number generator is not a
``real'' function like sine or cosine.  Unlike real functions, successive
calls to a random number generator yield different return values.  Of
course that is just what you want for a random number generator, but to
achieve this effect, the generator must keep track of some kind of
``state'' variable.  Sometimes this state is just an integer (sometimes
just the value of the previously generated random number), but often it
is more complicated than that and may involve a whole array of numbers,
possibly with some indices thrown in.  To use the random number
generators, you do not need to know the details of what comprises the
state, and besides that varies from algorithm to algorithm.

The random number generator library uses two special structs,
@code{gsl_rng_type} which holds static information about each type of
generator and @code{gsl_rng} which describes an instance of a generator
created from the specifications in a given @code{gsl_rng_type}.

The random number functions described in this section are declared in
the header file @file{gsl_rng.h}.

@deftypefn Random {gsl_rng *} gsl_rng_alloc (gsl_rng_type * @var{T})
This function returns a pointer to a newly-created
instance of a random number generator of type @var{T}.
For example, the following code creates an instance of the Tausworthe
generator,

@example
gsl_rng * r = gsl_rng_alloc (gsl_rng_taus);
@end example

If there is insufficient memory to create the generator then the
function returns a null pointer and the error handler is invoked with an
error code of @code{GSL_ENOMEM}.

The generator is automatically initialized with the default seed,
@code{gsl_rng_default_seed}. This is zero by default but can be changed
directly or through the environment variable @code{GSL_RNG_SEED},
@pxref{Random number environment variables}.

The defined generator types are,

@example
gsl_rng_cmrg, gsl_rng_minstd, gsl_rng_mrg, gsl_rng_mt19937,
gsl_rng_r250, gsl_rng_ran0, gsl_rng_ran1, gsl_rng_ran2,
gsl_rng_ran3, gsl_rng_rand, gsl_rng_rand48,
gsl_rng_random_bsd, gsl_rng_random_glibc2,
gsl_rng_random_libc5, gsl_rng_randu, gsl_rng_ranf,
gsl_rng_ranlux, gsl_rng_ranlux389, gsl_rng_ranmar,
gsl_rng_slatec, gsl_rng_taus, gsl_rng_tds, gsl_rng_tt800,
gsl_rng_uni, gsl_rng_uni32, gsl_rng_vax, gsl_rng_zuf
@end example
@end deftypefn

@deftypefn Random void gsl_rng_set (const gsl_rng * @var{r}, unsigned long int @var{s})
This function initializes (or `seeds') the random number
generator. If the random number generator is seeded with the
same value of @var{s} on two different runs, the same stream
of random numbers will be generated (by successive calls to
the routines below). If different values of @var{s} are
supplied, then the generated streams of random numbers
should be completely different. If the seed @var{s} is zero
then the standard seed from the original implementation is
used instead. For example, the Fortran source code for the
original @code{ranlux} generator used a seed of 314159265,
and so choosing @var{s} equal to zero reproduces this.
@end deftypefn

@deftypefn Random void gsl_rng_free (gsl_rng * @var{r})
This function frees all the memory associated with the generator
@var{r}.
@end deftypefn

@node  Sampling from a random number generator
@section Sampling from a random number generator

The following functions return uniformly distributed random numbers,
either as integers or double precision floating point numbers. To obtain
non-uniform distributions @pxref{Random Number Distributions}.

@deftypefn Random {unsigned long int} gsl_rng_get (const gsl_rng * @var{r})
This function returns a random integer from the generator @var{r}.  All
integers in the range [@var{min},@var{max}] are equally likely.  The
maximum and minimum values, @var{max} and @var{min}, depend on the
algorithm used. They can determined using the auxilliary functions
@code{gsl_rng_max (r)} and @code{gsl_rng_min (r)}.
@end deftypefn

@deftypefn Random double gsl_rng_uniform (const gsl_rng * @var{r})
This function returns a double precision floating point
number uniformly distributed in the range [0,1). The range
excludes 1.0 and includes 0.0. The value is typically
obtained by dividing the result of @code{gsl_rng_get(r)} by
@code{gsl_rng_max(r) + 1.0} in double precision. Some
generators compute this ratio internally so that they can
provide floating point numbers with more than 32 bits of
randomness (the maximum number of bits that can be portably
represented in a single @code{unsigned long int}).
@end deftypefn

@deftypefn Random double gsl_rng_uniform_pos (const gsl_rng * @var{r})
This function returns a positive double precision floating
point number uniformly distributed in the range (0,1),
excluding both 0.0 and 1.0. The number is obtained by
sampling the generator using the algorithm of
@code{gsl_rng_uniform} until a non-zero value is obtained.
You can use this function if you need to avoid a singularity
at 0.0.
@end deftypefn

@deftypefn Random {unsigned long int} gsl_rng_uniform_int (const gsl_rng * @var{r}, unsigned long int @var{n})
This function returns a random integer from 0 to @var{n-1} inclusive.
All integers in the range [0,@var{n-1}] are equally likely, regardless
of the generator used. An offset correction is applied so that this
function returns zero with the correct probability whatever the
minimum value of the underlying generator.

If @var{n} is larger than the range of the generator then the function
calls the error handler with an error code of @code{GSL_EINVAL} and
returns zero.
@end deftypefn

@node Auxiliary random number generator functions
@section Auxiliary random number generator functions
The following functions provide information about an existing
generator. You should use them in preference to hard-coding the generator
parameters into your own code.

@deftypefn Random {const char *} gsl_rng_name (const gsl_rng * @var{r})
This function returns a pointer to the name of the generator.
For example,
@example
printf("r is a '%s' generator\n", gsl_rng_name (r)) ;
@end example
@noindent
would print something like @code{r is a 'taus' generator}
@end deftypefn

@deftypefn Random {unsigned long int} gsl_rng_max (const gsl_rng * @var{r})
@code{gsl_rng_max} returns the largest value that @code{gsl_rng_get}
can return.
@end deftypefn

@deftypefn Random {unsigned long int} gsl_rng_min (const gsl_rng * @var{r})
@code{gsl_rng_max} returns the smallest value that @code{gsl_rng_get}
can return. Usually this value is zero. There are some generators with
algorithms that cannot return zero, and for these generators the minimum
value is 1.
@end deftypefn

@deftypefn Random {void *} gsl_rng_state (const gsl_rng * @var{r})
@end deftypefn

@deftypefn Random size_t gsl_rng_size (const gsl_rng * @var{r})
@end deftypefn


@node Random number environment variables
@section Random number environment variables

The library allows you to choose a default generator and seed from the
environment variables @code{GSL_RNG_TYPE} and @code{GSL_RNG_SEED} and
the function @code{gsl_rng_env_setup}. This makes it easy try out
different generators and seeds without having to recompile your program.

@deftypefun {const gsl_rng_type *} gsl_rng_env_setup (void)
This function reads the environment variables @code{GSL_RNG_TYPE} and
@code{GSL_RNG_SEED} and uses their values to set the corresponding
library variables @code{gsl_rng_default} and
@code{gsl_rng_default_seed} which are defined as follows,

@example
extern const gsl_rng_type *gsl_rng_default
extern unsigned long int gsl_rng_default_seed
@end example

The environment variable @code{GSL_RNG_TYPE} should be the name of a
generator, such as @code{taus} or @code{mt19937}. The environment
variable @code{GSL_RNG_SEED} should contain the desired seed value. It
is converted to an @code{unsigned long int} using the C library function
@code{strtoul}.

If you don't specify a generator for @code{GSL_RNG_TYPE} then
@code{gsl_rng_mt19937} is used as the default. The initial value of
@code{gsl_rng_default_seed} is zero.

@end deftypefun
@noindent
Here is a short program which shows how to create a global
generator using the environment variables @code{GSL_RNG_TYPE} and
@code{GSL_RNG_SEED},

@example
#include <stdio.h>
#include <gsl_rng.h>

gsl_rng * r ;  /* global generator */

int 
main ()
@{
  gsl_rng_env_setup() ;

  r = gsl_rng_alloc (gsl_rng_default);
  
  printf("generator type: %s\n", gsl_rng_name (r));
  printf("seed = %u\n", gsl_rng_default_seed);
  printf("first value = %u\n", gsl_rng_get (r)) ;
@}
@end example
@noindent
Running the program without any environment variables uses the initial
defaults, an @code{mt19937} generator with a seed of 0,
@example
bjg|zeke> ./a.out 
generator type: mt19937
seed = 0
first value = 3510405877
@end example
@noindent
By setting the two variables on the command line we can
change the default generator and the seed,
@example
bjg|zeke> GSL_RNG_TYPE="taus" GSL_RNG_SEED=123 ./a.out 
GSL_RNG_TYPE=taus
GSL_RNG_SEED=123
generator type: taus
seed = 123
first value = 2720986350
@end example

@node Saving and restoring random number generator state
@section Saving and restoring random number generator state

The above methods ignore the random number `state' which changes from
call to call.  It is often useful to be able to save and restore the
state.  To permit these practices, a few somewhat more advanced
functions are supplied.  These include:

@deftypefn Random {gsl_rng *} gsl_rng_cpy (gsl_rng * @var{dest}, const gsl_rng * @var{src})
This function copies the random number generator @var{src} into the
pre-exisiting generator @var{dest}, making @var{dest} into an exact copy
of @var{src}. It returns @var{dest} if successful and a null pointer if
sufficient memory could not be allocated.
@end deftypefn

@deftypefn Random {gsl_rng *} gsl_rng_clone (const gsl_rng * @var{r})
This function returns a pointer to a newly created generator which is an
exact copy of the generator @var{r}.
@end deftypefn

@deftypefn Random void gsl_rng_print_state (const gsl_rng * @var{r})
This function prints a hex-dump of the state of the generator @var{r} to
stdout. At the moment its only use is for debugging.
@end deftypefn

@node Available random number generator algorithms
@section Available random number generator algorithms

The above functions make no reference to the actual algorithm used.
This is deliberate so that you can switch algorithms without having to
change any of your application source code. The library provides a
large number of generators of different types, including simulation
quality generators, generators provided for compatibility with other
libraries and historical generators from the past.

@subsection Simulation quality generators

The following generators are recommended for use in simulation. They
have extremely long periods and pass most statistical tests.

@deffn {Generator} gsl_rng_mt19937
@cindex MT19937 random number generator
The MT19937 generator of Makoto Matsumoto and Takuji Nishimura is a
variant of the twisted generalized feedback shift-register algorithm,
and is known as the "Mersenne Twister" generator. It has a Mersenne
prime period of @math{2^@{19937@} - 1} (about @math{10^@{6000@}}) and is
equi-distributed in 623 dimensions. It has passed the @sc{diehard}
statistical tests. It uses 624 words of state per generator and is
comparable in speed to the other generators. The original generator used
a default seed of 4357 and choosing @var{s} equal to zero in
@code{gsl_rng_set} reproduces this.

For more information see,
@itemize @asis
@item
Makoto Matsumoto and Takuji Nishimura, "Mersenne Twister: A
623-dimensionally equidistributerd uniform pseudorandom number
generator". @cite{ACM Transactions on Modeling and Computer
Simulation}, Vol. 8, No. 1 (Jan. 1998), Pages 3-30
@end itemize
@end deffn

@deffn {Generator} gsl_rng_ranlux
@deffnx {Generator} gsl_rng_ranlux389
@cindex RANLUX random number generator
The @code{ranlux} generator uses the lagged-fibonacci-with-skipping
algorithm of Luscher to produce "luxury random numbers". It is a
24-bit generator, originally designed for single-precision IEEE
floating point numbers. The period of the generator is about
@math{10^@{171@}}. The generator is slow, but the algorithm has been
mathematically proven to provide truly decorrelated numbers at a known
level. The generator @code{gsl_rng_ranlux} provides the default level
of decorrelation recommended by Luscher while @code{gsl_rng_ranlux389}
gives the highest level of randomness, with all 24 bits decorrelated.
Both types of generator use 24 words of state per generator.

For more information see,
@itemize @asis
@item
M. Luscher, "A portable high-quality random number generator for
lattice field theory calculations", @cite{Computer Physics
Communications}, 79 (1994) 100-110.
@item
F. James, "RANLUX: A Fortran implementation of the high-quality
pseudo-random number generator of Luscher", @cite{Computer Physics
Communications}, 79 (1994) 111-114
@end itemize
@end deffn

@deffn {Generator} gsl_rng_cmrg
@cindex CMRG, combined multiple recursive random number generator
This is a combined multiple recursive generator by L'Ecuyer. 
Its sequence is,
@c
@c THIS IS HORRIBLE!
@macro mod 
\hbox@{ mod @}
@end macro
@c
@macro and
\&
@end macro
@c
@equation
z_n = (x_n - y_n) @mod m_1
@end equation
@noindent
where the two underlying generators @math{x_n} and @math{y_n} are,
@c
@equation
x_n = (a_1 x_@{n-1@} + a_2 x_@{n-2@} + a_3 x_@{n-3@}) @mod m_1
@end equation
and
@equation
y_n = (b_1 y_@{n-1@} + b_2 y_@{n-2@} + b_3 y_@{n-3@}) @mod m_2
@end equation
@noindent
with coefficients @math{a_1 = 0}, @math{a_2 = 63308}, @math{a_3 =
-183326}, @math{b_1 = 86098}, @math{b_2 = 0}, @math{b_3 = -539608},
and moduli @math{m_1 = 2^@{31@} - 1 = 2147483647} and @math{m_2 =
2145483479}.

The period of this generator is @math{2^@{205@}} (about
@math{10^@{61@}}). It uses 6 words of state per generator. For more
information see,

@itemize @asis
@item
P. L'Ecuyer, "Combined Multiple Recursive Random Number
Generators," @cite{Operations Research}, 44, 5 (1996), 816--822.
@end itemize
@end deffn

@deffn {Generator} gsl_rng_mrg
@cindex MRG, multiple recursive random number generator
This is a fifth-order multiple recursive generator by L'Ecuyer, Blouin
and Coutre.  Its sequence is,
@c
@equation
   x_n = (a_1 x_@{n-1@} + a_5 x_@{n-5@}) @mod m
@end equation
@noindent
with @math{a_1 = 107374182}, @math{a_2 = a_3 = a_4 = 0}, @math{a_5 = 104480}
and @math{m = 2^@{31@}-1}.

The period of this generator is about @math{10^@{46@}}. It uses 5 words
of state per generator. More information can be found in the following
paper,
@itemize @asis
@item
P. L'Ecuyer, F. Blouin, and R. Coutre, "A search for good multiple
recursive random number generators", @cite{ACM Transactions on Modeling and
Computer Simulation} 3, 87-98 (1993).
@end itemize
@end deffn

@deffn {Generator} gsl_rng_taus
@cindex Tausworthe random number generator
This is a maximally equidistributed combined Tausworthe generator by
L'Ecuyer. The sequence is,
@c
@equation
x_n = (s^1_n \oplus s^2_n \oplus s^3_n) 
@end equation
@noindent
where,
@c
@equation
s^1_@{n+1@} = (((s^1_n @and 4294967294) <<12) \oplus (((s^1_n <<13) \oplus s^1_n) >>19))
@end equation
@equation
s^2_@{n+1@} = (((s^2_n @and 4294967288) << 4) \oplus (((s^2_n << 2) \oplus s^2_n) >>25))
@end equation
@equation
s^3_@{n+1@} = (((s^3_n @and 4294967280) <<17) \oplus (((s^3_n << 3) \oplus s^3_n) >>11))
@end equation
@noindent
computed modulo @math{2^@{32@}}. In the formulas above @math{\oplus}
denotes ``exclusive-or''. Note that the algorithm relies on the properties
of 32-bit unsigned integers and has been implemented using a bitmask
of @code{0xFFFFFFFF} to make it work on 64 bit machines.

The period of this generator is @math{2^@{88@}} (about
@math{10^@{26@}}). It uses 3 words of state per generator. For more
information see,

@itemize @asis
@item
P. L'Ecuyer, "Maximally Equidistributed Combined Tausworthe
Generators", @cite{Mathematics of Computation}, 65, 213 (1996), 203--213.
@end itemize
@end deffn

@deffn {Generator} gsl_rng_tt800
@cindex TT800 random number generator
This is an earlier version of the twisted generalized feedback
shift-register generator, and has been superseded by the development of
MT19937. However, it is still an acceptable generator in its own
right. It has a period of @math{2^@{800@}} and uses 33 words of storage
per generator.

For more information see,
@itemize @asis
@item
From: Makoto Matsumoto and Yoshiharu Kurita, "Twisted GFSR Generators
II", @cite{ACM Transactions on Modelling and Computer Simulation},
Vol. 4, No. 3, 1994, pages 254-266.
@end itemize
@end deffn

@subsection Generators provided for compatibility
The generators in this section are provided for compatibility with
existing libraries. If you are converting an existing program to use GSL
then you can select these generators to check your new implementation
against the original one, using the same random number generator. After
verifying that your new program reproduces the original results you can
then switch to a higher-quality generator.

Note that most of the generators in this section are based on single
linear congruence relations, which are the least sophisticated type of
generator. In particular, linear congruences have poor properties when
used with a non-prime modulus, as several of these routines do (e.g.
with a power of two modulus, @math{2^@{31@}} or @math{2^@{32@}}). This
leads to periodicity in the least significant bits of each number,
with only the higher bits having any randomness. Thus if you want to
produce a random bitstream it is best to avoid using the least
significant bits.

The standard Unix random number generators @code{rand}, @code{random}
and @code{rand48} are provided as part of GSL. Although these
generators are widely available individually often they aren't all
available on the same platform. This makes it difficult to write
portable code using them and so we have included the complete set of
Unix generators in GSL for convenience. Note that these generators
don't produce high-quality randomness and aren't suitable for work
requiring accurate statistics. However, if you won't be measuring
statistical quantities and just want to introduce some variation into
your program then these generators are quite acceptable.

@cindex BSD random number generator, rand
@cindex Unix random number generators, rand
@cindex Unix random number generators, rand48

@deffn {Generator} gsl_rng_rand
@cindex BSD random number generator
This is the BSD @code{rand()} generator. Its sequence is
@c
@equation
x_@{n+1@} = (a x_n + c) @mod m
@end equation
@noindent
with @math{a = 1103515245}, @math{c = 12345} and @math{m = 2^@{31@}}.
The seed specifies the initial value, @math{x_1}. The period of this
generator is @math{2^@{31@}}, and it uses 1 word of storage per
generator.
@end deffn

@deffn {Generator} gsl_rng_random_bsd
@deffnx {Generator} gsl_rng_random_libc5
@deffnx {Generator} gsl_rng_random_glibc2
These generators implement the @code{random()} family of functions, a
set of linear feedback shift register generators originally used in BSD
Unix. There are several versions of @code{random()} in use today: the
original BSD version (e.g. on SunOS4), a libc5 version (common on
existing GNU/Linux systems) and a glibc2 version. Each version uses a
different seeding procedure, and thus produces different sequences.

The original BSD routines accepted a variable length buffer for the
generator state, with longer buffers providing higher-quality
randomness. The @code{random()} function implemented algorithms for
buffer lengths of 8, 32, 64, 128 and 256 bytes, and the algorithm with
the largest length that would fit into the user-supplied buffer was
used. To support these algorithms additional generators are available
with the following names,
@c
@example
gsl_rng_random8_bsd
gsl_rng_random32_bsd
gsl_rng_random64_bsd
gsl_rng_random128_bsd
gsl_rng_random256_bsd
@end example
@noindent
where the numeric suffix indicates the buffer length. The original BSD
@code{random} function used a 128-byte default buffer and so
@code{gsl_rng_random_bsd} has been made equivalent to
@code{gsl_rng_random128_bsd}. Corresponding versions of the @code{libc5}
and @code{glibc2} generators are also avaliable, with the names
@code{gsl_rng_random8_libc5}, @code{gsl_rng_random8_glibc2}, etc.
@end deffn

@deffn {Generator} gsl_rng_rand48
@cindex rand48 random number generator
This is the Unix @code{rand48} generator. Its sequence is
@c
@equation
x_@{n+1@} = (a x_n + c) @mod m
@end equation
@noindent
defined on 48-bit unsigned integers with @math{a =25214903917}, @math{c
= 11} and @math{m = 2^@{48@}}. The seed specifies the upper 32 bits of
the initial value, @math{x_1}, with the lower 16 bits set to
@code{0x330E}. The function @code{gsl_rng_get} returns the upper 32 bits
from each term of the sequence. This does not have a direct parallel in
the original @code{rand48} functions, but forcing the result to type
@code{long int} reproduces the output of @code{mrand48}. The function
@code{gsl_rng_uniform} uses the full 48 bits of internal state to return
the double precision number @math{x_n/m}, which is equivalent to the
function @code{drand48}.
@end deffn

@cindex Random number generators, Numerical recipes
@cindex Numerical recipes, random number generators
The following generators are provided for compatibility with
@cite{Numerical Recipes}. Note that the original Numerical Recipes
functions used single precision while we use double precision. This will
lead to minor discrepancies, but only at the level of single-precision
rounding error. If necessary you can force the returned values to single
precision by storing them in a @code{volatile float}, which prevents the
value being held in a register with double or extended precision. Apart
from this difference the underlying algorithms for the integer part of
the generators are the same.

@deffn {Generator} gsl_rng_ran0 
Numerical recipes @code{ran0} implements Park and Miller's @sc{minstd}
algorithm with a modified seeding procedure.
@end deffn

@deffn {Generator} gsl_rng_ran1 
Numerical recipes @code{ran1} implements Park and Miller's @sc{minstd}
algorithm with a 32-element Bayes-Durham shuffle box.
@end deffn

@deffn {Generator} gsl_rng_ran2 
Numerical recipes @code{ran2} implements a L'Ecuyer combined recursive
generator with a 32-element Bayes-Durham shuffle-box.
@end deffn

@deffn {Generator} gsl_rng_ran3 
Numerical recipes @code{ran3} implements Knuth's portable
subtractive generator.
@end deffn

The following generator is provided for compatibility with the CRAY
MATHLIB routine RANF. It produces double precision floating point
numbers which should be identical to those from the original RANF.

@deffn {Generator} gsl_rng_ranf
@cindex RANF random number generator
@cindex CRAY random number generator, RANF
This is the CRAY random number generator @code{RANF}. Its
sequence is
@c
@equation
x_@{n+1@} = (a x_n) @mod m
@end equation
@noindent
defined on 48-bit unsigned integers with @math{a = 44485709377909} and
@math{m = 2^@{48@}}.  The seed specifies the lower 32 bits of the
initial value, @math{x_1}, with the lowest bit set to prevent the seed
taking an even value.  The upper 16 bits of @math{x_1} are set to 0. A
consequence of this procedure is that the pairs of seeds 2 and 3, 4 and
5, etc produce the same sequences.

There is a subtlety in the implementation of the seeding. The initial
state is reversed through one step, by multiplying by the modular
inverse of @math{a} mod @math{m}. This is done for compatibility with
the original CRAY implementation.

Note that you can only seed the generator with integers up to
@math{2^@{32@}}, while the original CRAY implementation uses
non-portable wide integers which can cover all @math{2^@{48@}} states of
the generator.

The function @code{gsl_rng_get} returns the upper 32 bits from each term
of the sequence.  The function @code{gsl_rng_uniform} uses the full 48
bits to return the double precision number @math{x_n/m}.

The period of this generator is @math{2^@{46@}}.
@end deffn

@deffn {Generator} gsl_rng_ranmar
@cindex RANMAR random number generator
This is the RANMAR lagged-fibonacci generator of Marsaglia, Zaman and
Tsang.  It is a 24-bit generator, originally designed for
single-precision IEEE floating point numbers. It was included in the
CERNLIB high-energy physics library.
@end deffn

@deffn {Generator} gsl_rng_r250
@cindex shift-register random number generator
@cindex R250 shift-register random number generator
This is the shift-register generator of Kirkpatrick and Stoll. The
sequence is
@c
@equation
x_n = x_@{n-103@} \oplus x_@{n-250@}
@end equation
@noindent
where @math{\oplus} denote ``exclusive-or'', defined on 32-bit
words. The period of this generator is about @math{2^@{250@}} and it
uses 250 words of state per generator.

For more information see,
@itemize @asis
@item
S. Kirkpatrick and E. Stoll, "A very fast shift-register sequence random
number generator", @cite{Journal of Computational Physics}, 40, 517-526
(1981)
@end itemize
@end deffn


@c The following generators are included only for historical reasons, so
@c that you can reproduce results from old programs which might have used
@c them. These generators should not be used for real simulations since
@c they have poor statistical properties by modern standards.

@deffn {Generator} gsl_rng_vax
@cindex VAX random number generator
This is the VAX generator @code{MTH$RANDOM}. Its sequence is,
@c
@equation
x_@{n+1@} = (a x_n + c) @mod m
@end equation
@noindent
with @math{a = 69069}, @math{c = 1} and @math{m = 2^@{32@}}. The seed
specifies the initial value, @math{x_1}. The period of this generator is
@math{2^@{32@}} and it uses 1 word of storage per generator.
@end deffn

@deffn {Generator} gsl_rng_transputer
This is the random number generator from the INMOS Transputer
Development system.  Its sequence is,
@c
@equation
x_@{n+1@} = (a x_n) @mod m
@end equation
@noindent
with @math{a = 1664525} and @math{m = 2^@{32@}}. The seed specifies the initial
value, @math{x_1}.
@end deffn

@deffn {Generator} gsl_rng_randu
@cindex RANDU random number generator
This is the IBM @code{RANDU} generator. Its sequence is
@c
@equation
x_@{n+1@} = (a x_n) @mod m
@end equation
@noindent
with @math{a = 65539} and @math{m = 2^@{31@}}. The seed specifies the
initial value, @math{x_1}. The period of this generator was only
@math{2^@{29@}}. It has become a textbook example of a poor generator.
@end deffn

@deffn {Generator} gsl_rng_minstd
@cindex RANMAR random number generator
This is Park and Miller's "minimal standard" generator, a simple linear
congruence which takes care to avoid the major pitfalls of such
algorithms. Its sequence is,
@c
@equation
x_@{n+1@} = (a x_n) @mod m
@end equation
@noindent
with @math{a = 16807} and @math{m = 2^@{31@} - 1 = 2147483647}. The seed
specifies the initial value, @math{x_1}. The period of this generator is
about @math{2^@{31@}}.

This generator is used in the IMSL Library (subroutine RNUN) and in
MATLAB (the RAND function). It is also sometimes known by the acronym
"GGL" (I'm not sure what that stands for).

For more information see,
@itemize @asis
@item
Park and Miller, "Random Number Generators: Good ones are hard to find",
@cite{Communications of the ACM}, October 1988, Volume 31, No 10, pages
1192-1201.
@end itemize
@end deffn

@deffn {Generator} gsl_rng_uni
@deffnx {Generator} gsl_rng_uni32
This is a reimplementation of the 16-bit SLATEC random number generator
RUNIF. A generalisation of the generator to 32 bits is provided by
@code{gsl_rng_uni32}. The original source code is available from NETLIB.
@end deffn

@deffn {Generator} gsl_rng_slatec
This is the SLATEC random number generator RAND. It is ancient. The
original source code is available from NETLIB.
@end deffn


@deffn {Generator} gsl_rng_zuf
This is the ZUFALL lagged Fibonacci series generator of Peterson.  Its
sequence is,
@c
@equation
t    = u_@{n-273@} + u_@{n-607@}
@end equation
@equation
u_n  = t - floor(t)
@end equation
The original source code is available from NETLIB.  For more information
see,
@itemize @asis
@item
W. Petersen, "Lagged Fibonacci Random Number Generators for the NEC
SX-3", @cite{International Journal of High Speed Computing} (1994).
@end itemize
@end deffn

@section Performance

@smallexample
    randu ------------------------------------------------
  bsdrand ---------------------------------------------
      vax ------------------------------------------
     r250 ---------------------------------------
     taus ----------------------------------
      uni ----------------------------------
    uni32 ---------------------------------
    tt800 -------------------------------
     rand ---------------------------
      zuf ---------------------------
  mt19937 -----------------------
   minstd ----------------------
      mrg ---------------
     cmrg --------
   ranlux -----
ranlux389 ---

          |------------------|--------------------|--------
          0                  1                    2        

          Millions of random numbers per second
@end smallexample

@node Random Number Distributions
@section Random Number Distributions
@cindex random number distributions

Distributions of random numbers can be obtained from any of the
generators using the following transformation functions. In the simplest
cases a non-uniform distribution can be obtained analytically from the
uniform distribution. This uses one call to the random number
generator. More complicated distributions are created by the
@dfn{acceptance-rejection} method which often requires multiple samples
from the generator.

@subsection Continuous distributions
@page
@unnumberedsubsec The Gaussian Distribution
@deftypefn Random double gsl_ran_gaussian (const gsl_rng * @var{r})
@cindex Gaussian random numbers
This function returns a gaussian random number, with mean zero and
variance one. The probability distribution for gaussian random numbers
is,
@c
@equation
p(x) dx = @{1 \over \sqrt@{2 \pi@}@} \exp (-x^2 / 2) dx
@end equation
@noindent
for @math{x} in the range @math{-\infty} to @math{+\infty}. Use the
transformation @math{z = \mu + \sigma x} on the numbers returned by
@code{gsl_ran_gaussian} to obtain the general normal distribution,
@c
@equation
p(z) dz = @{1 \over \sqrt@{2 \pi \sigma^2@}@} \exp (-(z-\mu)^2 / 2\sigma^2) dz
@end equation
@noindent
@end deftypefn
@tex
\centerline{\input rand-gaussian.tex}
@end tex

@unnumberedsubsubsec Properties
@itemize @asis
@item
Mean = @math{\mu}, Variance = @math{\sigma^2}, Skewness = 0, Excess = 0

@item
Cumulants, @math{\kappa_1=\mu}, @math{\kappa_2=\sigma^2},
@math{\kappa_n=0} for @math{n>2}

@item
Characteristic function, @math{\phi(t) = \exp(-i\mu t - \sigma^2 t^2/2)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_@{-\infty@}^x p(x') dx' = @{1 \over 2 @}(1 - \hbox@{erf@}((x-m)/\sqrt@{2\sigma^2@}))}
@item
Confidence limits:

@math{p(|x-\mu| < \sigma) = 0.683},
@math{p(|x-\mu| < 2\sigma) = 0.954},
@math{p(|x-\mu| < 3\sigma) = 0.9973}

@item
Useful integral:
@equation
\int_@{-\infty@}^@{+\infty@} x^@{2n@} p(x) dx 
= 2^n \sigma^@{2n@} \Gamma(n+ @{1 \over 2@}) / \sqrt\pi
@end equation

@end itemize

@page
@subsection The Cauchy Distribution
@deftypefn Random double gsl_ran_cauchy (const gsl_rng * @var{r}, double @var{mu})
@cindex Cauchy random numbers
This function returns a random number from the Cauchy distribution with
scale parameter @var{mu}. The probability distribution for Cauchy
random numbers is,
@c
@equation
p(x) dx = @{1 \over \mu\pi (1 + (x/\mu)^2) @} dx
@end equation
@noindent
for @math{x} in the range @math{-\infty} to @math{+\infty}.  The Cauchy
distribution is also known as the Lorentz distribution.
@end deftypefn
@tex
\centerline{\input rand-cauchy.tex}
@end tex

@unnumberedsubsubsec Properties
@itemize @asis
@item
The Cauchy distribution has an infinite variance so the mean, variance,
skewness, excess and cumulants are all undefined.

@item
Characteristic function, @math{\phi(t) = \exp(-i\alpha t - \beta |t|)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_@{-\infty@}^x p(x') dx' = @{1 \over 2 @} + @{\arctan(x/\mu)\over \pi@}}

@item
Confidence limits:

@math{p(|x| < \mu) = 0.5},
@math{p(|x| < 2\mu) = 0.705},
@math{p(|x| < 3\mu) = 0.795}

@end itemize

@page
@deftypefn Random double gsl_ran_exponential (const gsl_rng * @var{r}, double @var{mu})
@cindex Exponential random numbers
This function returns a random number from the exponential distribution
with mean @var{mu}.
@c
@equation
p(x) dx = @{1 \over \mu@} \exp(-x/\mu) dx
@end equation
@noindent
for @math{x \ge 0}. 
@end deftypefn
@tex
\centerline{\input rand-exponential.tex}
@end tex

@unnumberedsubsubsec Properties
@itemize @asis
@item
Mean = @math{\mu}, Variance = @math{\mu^2}, Skewness = 2, Excess = 6

@item
Cumulants, @math{\kappa_1=\mu}, @math{\kappa_n=\mu^n \Gamma(n)},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = 1/(1-i\mu t)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = 1 - \exp(-x/\mu)}
@item
Confidence limits:

@math{p(x < \mu) = 0.632},
@math{p(x < 2\mu) = 0.865},
@math{p(x < 3\mu) = 0.950}

@item
Useful integral:
@equation
\int_0^\infty x^n p(x) dx 
= n! \mu^(n+1)
@end equation

@end itemize


@page
@deftypefn Random double gsl_ran_chisq (const gsl_rng * @var{r}, double @var{nu})
@cindex Chi-squared random numbers
This function returns a random number from the chi-squared distribution
with @var{nu} degrees of freedom.
@c
@equation
p(x) dx = @{1 \over \Gamma(\nu/2) @} x^@{\nu/2 - 1@} \exp(-x) dx
@end equation
@noindent
for @math{x \ge 0}. 
@end deftypefn
@tex
\centerline{\input rand-chisq.tex}
@end tex

@page
@deftypefn Random double gsl_ran_erlang (const gsl_rng * @var{r}, double @var{a}, double @var{n})
@cindex Erlang random numbers
This function returns a random number from the Erlang distribution.
@c
@equation
p(x) dx = @{x^@{n-1@} \over (n-1)! a^n @} \exp (-x/a)  dx
@end equation
@noindent
for @math{x \ge 0}. 
@end deftypefn
@tex
\centerline{\input rand-erlang.tex}
@end tex

@page
@deftypefn Random double gsl_ran_fdist (const gsl_rng * @var{r}, double @var{nu1}, double @var{nu2})
@cindex F-distribution random numbers
This function returns a random number from the F-distribution with degrees of freedom @var{nu1} and @var{nu2}.
@c
@equation
p(x) dx = 
   @{ \Gamma((\nu_1 + \nu_2)/2)
        \over \Gamma(\nu_1/2) \Gamma(\nu_2/2) @} 
   \nu_1^@{\nu_1/2@} \nu_2^@{\nu_2/2@} 
   x^@{\nu_1/2 - 1@} (\nu_2 + \nu_1 x)^@{-\nu_1/2 -\nu_2/2@}
@end equation
@noindent
for @math{x \ge 0}. 
@end deftypefn
@tex
\centerline{\input rand-fdist.tex}
@end tex

@page
@deftypefn Random double gsl_ran_flat (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@cindex flat distribution random numbers
This function returns a random number from the flat (uniform)
distribution from @var{a} to @var{b}.
@c
@equation
p(x) dx = @{1 \over (b-a)@} dx
@end equation
@noindent
if @math{a \le x < b} and 0 otherwise.
@end deftypefn
@tex
\centerline{\input rand-flat.tex}
@end tex

@page
@deftypefn Random double gsl_ran_gamma (const gsl_rng * @var{r}, double @var{a})
@cindex Gamma distribution random numbers
This function returns a random number from the gamma
distribution.  The distribution function is
@c
@equation
p(x) dx = @{1 \over \Gamma(a)@} x^@{a-1@} e^@{-x@} dx
@end equation
If @math{X} and @math{Y} are independent gamma-distributed random
variables of order @math{a} and @math{b}, then @math{X+Y} has a gamma
distribution of order @math{a+b}.
@end deftypefn
@tex
\centerline{\input rand-gamma.tex}
@end tex

@page
@deftypefn Random double gsl_ran_beta (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@cindex Beta distribution random numbers
This function returns a random number from the beta
distribution.  The distribution function is
@c
@equation
p(x) dx = @{\Gamma(a+b) \over \Gamma(a) \Gamma(b)@} x^@{a-1@} (1-x)^@{b-1@} dx
@end equation
@end deftypefn
@tex
\centerline{\input rand-beta.tex}
@end tex

@page
@deftypefn Random double gsl_ran_logistic (const gsl_rng * @var{r})
@cindex Logistic random numbers
This function returns a random number from the logistic
distribution.  The distribution function is
@c
@equation
p(x) dx = @{ \exp(-x) \over (1 + \exp(-x))^2 @} dx
@end equation
for @math{x > 0}
@end deftypefn
@tex
\centerline{\input rand-logistic.tex}
@end tex

@page
@deftypefn Random double gsl_ran_lognormal (const gsl_rng * @var{r})
@cindex Lognormal random numbers
This function returns a random number from the lognormal
distribution.  The distribution function is
@c
@equation
p(x) dx = @{1 \over x \sqrt@{2 \pi@} @} \exp(-\ln(x)^2/2) dx
@end equation
for @math{x > 0}
@end deftypefn
@tex
\centerline{\input rand-lognormal.tex}
@end tex

@page
@deftypefn Random double gsl_ran_pareto (const gsl_rng * @var{r}, double @var{a})
@cindex Lognormal random numbers
This function returns a random number from the pareto
distribution of order @var{a}.  The distribution function is
@c
@equation
p(x) dx = a / x^@{a+1@} dx
@end equation
for @math{x \ge 1}
@end deftypefn
@tex
\centerline{\input rand-pareto.tex}
@end tex

@deftypefn Random double gsl_ran_dir_2d (const gsl_rng * @var{r}, double *@var{x}, double *@var{y})
@cindex 2D random direction vector
@cindex direction vector, random 2D
@cindex spherical random numbers, 2D
This function returns a random direction vector @math{v} =
(@var{x},@var{y}) in two dimenions. The vector is normalized
such that @math{|v|^2 = x^2 + y^2 = 1}.
@end deftypefn

@deftypefn Random double gsl_ran_dir_3d (const gsl_rng * @var{r}, double *@var{x}, double *@var{y}, double * @var{z})
@cindex 3D random direction vector
@cindex direction vector, random 3D
@cindex spherical random numbers, 3D
This function returns a random direction vector @math{v} =
(@var{x},@var{y},@var{z}) in three dimenions. The vector is
normalized such that @math{|v|^2 = x^2 + y^2 + z^2 = 1}.
@end deftypefn

@page
@deftypefn Random double gsl_ran_tdist (const gsl_rng * @var{r}, double @var{nu})
@cindex t-distribution random numbers
This function returns a random number from the t-distribution. The
distribution is,
@equation
p(x) dx = @{\Gamma((\nu + 1)/2) \over \sqrt@{\pi \nu@} \Gamma(\nu/2)@}
   (1 + x^2/\nu)^@{-(\nu + 1)/2@} dx
@end equation
@noindent
@end deftypefn
@tex
\centerline{\input rand-tdist.tex}
@end tex

@page
@deftypefn Random double gsl_ran_two_sided_exponential (const gsl_rng * @var{r}, double @var{mu})
@cindex two-sided exponential random numbers
@cindex Laplace distribution random numbers
This function returns a random number from the two-sided exponential
distribution with width @var{mu}, also known as the Laplace
distribution. The distribution is,
@equation
p(x) dx = @{1 \over 2 \mu@}  \exp(-|x/\mu|) dx
@end equation
@noindent
for @math{-\infty < x < \infty}.
@end deftypefn
@tex
\centerline{\input rand-laplace.tex}
@end tex

@page
@deftypefn Random double gsl_ran_weibull (const gsl_rng * @var{r}, double @var{a})
@cindex Weibull distribution random numbers
This function returns a random number from the Weibull
distribution. The distribution is,
@equation
p(x) dx = a x^@{a-1@} \exp(-x^a) dx
@end equation
@noindent
for @math{-\infty < x < \infty}.
@end deftypefn
@tex
\centerline{\input rand-weibull.tex}
@end tex

@page
@subsection Discrete distributions

@deftypefn Random {unsigned int} gsl_ran_poisson (const gsl_rng * @var{r}, double @var{mu})
@cindex Poisson random numbers
This function returns a random integer from the poisson distribution
with mean @var{mu}. The probability distribution for poisson random
numbers is,
@c
@equation
p(n) = @{\mu^n \over n!@} \exp(-\mu)
@end equation
@noindent
for @math{n \ge 0}.
@end deftypefn
@tex
\centerline{\input rand-poisson.tex}
@end tex

@page
@deftypefn Random {unsigned int} gsl_ran_binomial (const gsl_rng * @var{r}, double @var{p}, unsigned int @var{t})
@cindex Binomial random numbers
This function returns a random integer from the binomial distribution,
the number of successes in @var{t} independent trials with probability
@var{p}. The probability distribution for binomial random numbers is,
@c
@equation
p(n) = @{t! \over n! (t-n)! @} p^n (1-p)^@{t-n@}
@end equation
@noindent
for @math{0 \le n \le t}.
@end deftypefn
@tex
\centerline{\input rand-binomial.tex}
@end tex

@page
@deftypefn Random {unsigned int} gsl_ran_geometric (const gsl_rng * @var{r}, double @var{p})
@cindex Geometric random numbers
This function returns a random integer from the geometric distribution,
the number of independent trials with probability @var{p} until the
first success. The probability distribution for geometric random numbers
is,
@c
@equation
p(n) =  p (1-p)^n
@end equation
@noindent
for @math{n \ge 1}.
@end deftypefn
@tex
\centerline{\input rand-geometric.tex}
@end tex

@deftypefn Random void gsl_ran_poisson_array (const gsl_rng * @var{r}, double @var{mu}, int @var{N}, int *@var{p})
@code{gsl_ran_poisson_array} places an array of @var{N}
poisson--distributed random numbers with mean @var{mu} into the array
@var{p}.
@end deftypefn


@deftypefn Random {int *} gsl_ran_shuffle (int N, int *x)
@code{gsl_ran_shuffle} takes an array of N integers x[0..N-1] and 
randomly shuffles their order.  @code{x} is altered and is returned.
if @code{x} is supplied as NULL, then memory is allocated for
@code{x[]}, and it is filled with a random permutation of the 
numbers 0,...,N-1.  
@end deftypefn

@deftypefn Random {int *} gsl_ran_choose (int K, int N, int *x)
@code{gsl_ran_choose} fills the array @code{x[K]} with @code{K}
integers taken randomly from 0,...,N-1.  It is required that 
@code{K} be less than or equal to @code{N}. The numbers will be
in numerical order.  You will need to call @code{gsl_ran_shuffle(K,x)}
if you want them in random order.
@end deftypefn

@node Random Number References and Further Reading
@section Random Number References and Further Reading
@noindent

@url{ftp://ftp.iro.umontreal.ca/pub/simulation/lecuyer/papers/handsim.ps}.

@itemize @asis
@item
Donald E. Knuth, @cite{The Art of Computer Programming: Seminumerical
Algorithms} (Vol 2, 3rd Ed, 1997), Addison-Wesley, ISBN 0201896842.
@end itemize
@noindent


See the pLab home page (http://random.mat.sbg.ac.at/) for a lot of information
on the state-of-the-art in random number generation, and for numerous links
to various "random" WWW sites.  

For physicists the Particle Data Group provides a useful short review of
techniques for generating distributions of random numbers in the
"Monte Carlo" section of its Annual Review of Particle Physics.

@itemize @asis
@item
@cite{Review of Particle Properties}
R.M. Barnett et al., Physical Review D54, 1 (1996)
@end itemize
@noindent
The Review of Particle Physics is available online in postscript and pdf
format at @url{http://pdg.lbl.gov/}.


@node Random Number Acknowledgements
@section Random Number Acknowledgements
@noindent
Thanks to Makoto Matsumoto and Takuji Nishimura for making the source
code to the MT19937 generator available under the GNU General Public
License, and to Makoto Matsumoto and Yoshiharu Kurita for making the
source code to the TT800 generator available under the GNU GPL as well.

@c lcg
@c [ LCG(n) := n * 69069 mod (2^32) ]
@c First 6: [69069, 475559465, 2801775573, 1790562961, 3104832285, 4238970681]
@c %2^31-1   69069, 475559465, 654291926, 1790562961, 957348638, 2091487034
@c mrg
@c [q([x1, x2, x3, x4, x5]) := [107374182 mod 2147483647 * x1 + 104480 mod 2147483647 * x5, x1, x2, x3, x4]]
@c
@c cmrg
@c [q1([x1,x2,x3]) := [63308 mod 2147483647 * x2 -183326 mod 2147483647 * x3, x1, x2],
@c  q2([x1,x2,x3]) := [86098 mod 2145483479 * x1 -539608 mod 2145483479 * x3, x1, x2] ]
@c  intial for q1 is [69069, 475559465, 654291926]
@c  intial for q2 is  [1790562961, 959348806, 2093487202]

@c tausworthe
@c    [ b1(x) := rsh(xor(lsh(x, 13), x), 19),
@c      q1(x) := xor(lsh(and(x, 4294967294), 12), b1(x)),
@c      b2(x) := rsh(xor(lsh(x, 2), x), 25),
@c      q2(x) := xor(lsh(and(x, 4294967288), 4), b2(x)),
@c      b3(x) := rsh(xor(lsh(x, 3), x), 11),
@c      q3(x) := xor(lsh(and(x, 4294967280), 17), b3(x)) ]
@c      [s1, s2, s3] = [600098857, 1131373026, 1223067536] 
@c [2948905028, 441213979, 394017882]
