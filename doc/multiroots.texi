This chapter describes functions for solving multidimensional nonlinear
equations (with @math{n} equations in @math{n} unknowns). The library
provides low level components for a variety of iterative solvers and
convergence tests. These can be combined by the user to achieve the
desired solution, with full access to the intermediate steps of the
iteration. Each class of methods uses the same framework, so that you
can switch between solvers at runtime without needing to recompile your
program. Each instance of a solver keeps track of its own state,
allowing the solvers to be used in multi-threaded programs.

The header file @file{gsl_multiroots.h} contains prototypes for the
multidimensional root finding functions and related declarations.

@menu
* Multidimensional Root Finding Overview::  
* Multidimensional Root Finding - Initializing the Solver::  
* Multidimensional Root Finding - Providing the function to solve::  
* Multidimensional Root Finding - Iteration::  
* Multidimensional Root Finding - Search Stopping Parameters::  
* Root Finding Algorithms without derivatives::  
* Multidimensional Root Finding Algorithms using Derivatives::  
* Multidimensional Root Finding References and Further Reading::  
@end menu

@node Multidimensional Root Finding Overview
@section Overview
@cindex multidimensional root finding, overview

The problem of multidimensional root finding requires the simultaneous
solution of @math{n} equations, @math{F_i}, in @math{n} variables,
@math{x_i},

@tex
\beforedisplay
$$
F_i (x_1, \dots, x_n) = 0 \qquad\hbox{for}~i = 1 \dots n.
$$
\afterdisplay
@end tex
@ifinfo
@example
F_i (x_1, ..., x_n) = 0    for i = 1 ... n.
@end example
@end ifinfo
@noindent
In general there are no bracketing methods available for @math{n}
dimensional systems, and no way of knowing whether any solutions
exist. All algorithms proceed from an initial guess using a variant of
the Newton iteration,

@tex
\beforedisplay
$$
x \to x - J^{-1} F(x)
$$
\afterdisplay
@end tex
@ifinfo
@example
x -> x - J^@{-1@} F(x)
@end example
@end ifinfo
@noindent
where @math{x}, @math{F} are vector quantities and @math{J} is the
Hessian matrix @c{$J_{ij} = \partial F_i / \partial x_j$} 
@math{J_@{ij@} = d F_i / d x_j}.
Additional strategies are also used to enlarge the region of
convergence. These include requiring a decrease in the norm @math{|F|} on
each iteration proposed by Newton's method, or taking downwards steps in
the direction of the negative gradient of @math{|F|}.

The evaluation of the Hessian matrix can be problematic, either because
programming the derivatives is intractable or because computation of the
@math{n^2} terms of the matrix becomes too expensive. For these reasons
the algorithms provided by the library fall into two classes according
to whether the derivatives are available or not.

The state for solvers with an analytic Hessian matrix is held in a
@code{gsl_multiroot_fdfsolver} struct. The updating procedure requires
both the function and its derivatives to be supplied by the user.

The state for solvers which do not use an analytic Hessian matrix is
held in a @code{gsl_multiroot_fsolver} struct. The updating procedure
uses only function evaluations (not derivatives).  The algorithms
estimate the matrix @math{J} or @c{$J^{-1}$} 
@math{J^@{-1@}} by approximate methods.

@node Multidimensional Root Finding - Initializing the Solver
@section Initializing the Solver

@deftypefun {gsl_multiroot_fsolver *} gsl_multiroot_fsolver_alloc (const gsl_multiroot_fsolver_type * @var{T}, gsl_multiroot_function * @var{f}, gsl_vector * @var{x})
This function returns a pointer to a a newly allocated instance of a
solver of type @var{T} for the function @var{f}, with an initial bracket
on the root of @var{x}. For example, the following code creates an
instance of a Brent solver,

@example
gsl_multiroot_fsolver * s = 
    gsl_multiroot_fsolver_alloc (gsl_multiroot_fsolver_brent, f, x);
@end example

If there is insufficient memory to create the solver then the function
returns a null pointer and the error handler is invoked with an error
code of @code{GSL_ENOMEM}.
@end deftypefun

@deftypefun {gsl_multiroot_fdfsolver *} gsl_multiroot_fdfsolver_alloc (const gsl_multiroot_fdfsolver_type * @var{T}, gsl_multiroot_function_fdf * @var{fdf}, gsl_vector * @var{x})
This function returns a pointer to a a newly allocated instance of a
solver of type @var{T} for the function @var{f}, with an initial guess
for the root of @var{x}. For example, the following code creates an
instance of a Newton-Raphson solver,

@example
gsl_multiroot_fdfsolver * s = 
    gsl_multiroot_fdfsolver_alloc (gsl_multiroot_fdfsolver_newton, fdf, x);
@end example

If there is insufficient memory to create the solver then the function
returns a null pointer and the error handler is invoked with an error
code of @code{GSL_ENOMEM}.
@end deftypefun

@deftypefun int gsl_multiroot_fsolver_set (gsl_multiroot_fsolver * @var{s}, gsl_multiroot_function * @var{f}, gsl_vector * @var{x})
This function reinitializes an existing solver @var{s} to use the
function @var{f} and the initial guess @var{x}.
@end deftypefun

@deftypefun int gsl_multiroot_fdfsolver_set (gsl_multiroot_fdfsolver * @var{s}, gsl_function_fdf * @var{fdf}, gsl_vector * @var{x})
This function reinitializes an existing solver @var{s} to use the
function and derivative @var{fdf} and the initial guess @var{x}.
@end deftypefun

@deftypefun void gsl_multiroot_fsolver_free (gsl_multiroot_fsolver * @var{s})
@deftypefunx void gsl_multiroot_fdfsolver_free (gsl_multiroot_fdfsolver * @var{s})
These functions free all the memory associated with the solver @var{s}.
@end deftypefun

@deftypefun {const char *} gsl_multiroot_fsolver_name (const gsl_multiroot_fsolver * @var{s})
@deftypefunx {const char *} gsl_multiroot_fdfsolver_name (const gsl_multiroot_fdfsolver * @var{s})
These functions return a pointer to the name of the solver. For example,

@example
printf("s is a '%s' solver\n", gsl_multiroot_fdfsolver_name (s)) ;
@end example

@noindent
would print something like @code{s is a 'newton' solver}
@end deftypefun

@node Multidimensional Root Finding - Providing the function to solve
@section Providing the function to solve
@cindex multidimensional root finding, providing a function to solve

You must provide @math{n} functions of @math{n} variables for the root
finders to operate on. In order to allow for general parameters the
functions are defined by the following data types:

@deftp {Data Type} gsl_multiroot_function 
This data type defines a general system of functions with parameters.

@table @code
@item int (* f) (const gsl_vector * @var{x}, void * @var{params}, gsl_vector * @var{f})
this function should store the vector result
@c{$f(x,\hbox{\it params})$}
@math{f(x,params)} in @var{f} for argument @var{x} and parameters @var{params},
returning an appropriate error code if the function cannot be computed.

@item size_t @var{n}
the dimension of the system, i.e. the number of components of the
vectors @var{x} and @var{f}

@item void * @var{params}
a pointer to the parameters of the function
@end table
@end deftp

@noindent
Here is an example using Powell's test function,

@tex
\beforedisplay
$$
f_1(x) = A x_0 x_1 - 1,
f_2(x) = \exp(-x_0) + \exp(-x_1) - (1 + 1/A)
$$
\afterdisplay
@end tex
@ifinfo
@example
f_1(x) = A x_0 x_1 - 1,
f_2(x) = exp(-x_0) + exp(-x_1) - (1 + 1/A)
@end example
@end ifinfo

@noindent
with @math{A = 10^4}. The following code defines a
@code{gsl_multiroot_function} system @code{F} which you could pass to a
solver:

@example
struct powell_params @{ double A ; @} ;

int
powell (gsl_vector * x, void * p, gsl_vector * f) @{
   struct powell_params * params = *(struct powell_params *)p ;
   double A = (params->A) ;
   double x0 = gsl_vector_get(x,0);
   double x1 = gsl_vector_get(x,1);
   gsl_vector_set (f, 0, A * x0 * x1 - 1)
   gsl_vector_set (f, 1, exp(-x0) + exp(-x1) - (1 + 1/A))
   return GSL_SUCCESS
@}

gsl_multiroot_function F ;
struct powell_params params = @{ 10000.0 @};

F.function = &powell ;
F.n = 2 ;
F.params = &params ;
@end example

@deftp {Data Type} gsl_multiroot_function_fdf
This data type defines a general system of functions with parameters and
the corresponding Hessian matrix of derivatives,

@table @code
@item int (* f) (const gsl_vector * @var{x}, void * @var{params}, gsl_vector * @var{f})
this function should store the vector result
@c{$f(x,\hbox{\it params})$}
@math{f(x,params)} in @var{f} for argument @var{x} and parameters @var{params},
returning an appropriate error code if the function cannot be computed.

@item int (* df) (const gsl_vector * @var{x}, void * @var{params}, gsl_matrix * @var{J})
this function should store the @var{n}-by-@var{n} matrix result
@c{$J_{ij} = \partial f_i(x,\hbox{\it params}) / \partial x_j$}
@math{J_ij = d f_i(x,params) / d x_j} in @var{J} for argument @var{x} 
and parameters @var{params},returning an appropriate error code if the
function cannot be computed.

@item int (* fdf) (const gsl_vector * @var{x}, void * @var{params}, gsl_vector * @var{f}, gsl_matrix * @var{J})
This function should set the values of the @var{f} and @var{J} as above,
for arguments @var{x} and parameters @var{params}. This function provides
an optimization of the separate functions for @math{f(x)} and @math{J(x)} -- 
it is always faster to compute the function and its derivative at the
same time. 

@item size_t @var{n}
the dimension of the system, i.e. the number of components of the
vectors @var{x} and @var{f}

@item void * @var{params}
a pointer to the parameters of the function
@end table
@end deftp

@noindent
The example of Powell's test function defined above can be extended to
include analytic derivatives using the following code,

@example
int
powell_df (gsl_vector * x, void * p, gsl_matrix * J) @{
   struct powell_params * params = *(struct powell_params *)p ;
   double A = (params->A) ;
   double x0 = gsl_vector_get(x,0);
   double x1 = gsl_vector_get(x,1);
   gsl_vector_set (df, 0, 0, A * x1)
   gsl_vector_set (df, 0, 1, A * x0)
   gsl_vector_set (df, 1, 0, -exp(-x0))
   gsl_vector_set (df, 1, 1, -exp(-x1))
   return GSL_SUCCESS
@}

int
powell_fdf (gsl_vector * x, void * p, gsl_matrix * f, gsl_matrix * J) @{
   struct powell_params * params = *(struct powell_params *)p ;
   double A = (params->A) ;
   double x0 = gsl_vector_get(x,0);
   double x1 = gsl_vector_get(x,1);

   double u0 = exp(-x0);
   double u1 = exp(-x1);

   gsl_vector_set (f, 0, A * x0 * x1 - 1)
   gsl_vector_set (f, 1, u0 + u1 - (1 + 1/A))

   gsl_vector_set (J, 0, 0, A * x1)
   gsl_vector_set (J, 0, 1, A * x0)
   gsl_vector_set (J, 1, 0, -u0)
   gsl_vector_set (J, 1, 1, -u1)
   return GSL_SUCCESS
@}

gsl_multiroot_function_fdf FDF ;

FDF.f = &powell_f ;
FDF.df = &powell_df ;
FDF.fdf = &powell_fdf ;
FDF.n = 2;
FDF.params = 0 ;
@end example

@node Multidimensional Root Finding - Iteration
@section Iteration

The following functions drive the iteration of each algorithm. Each
function performs one iteration to update the state of any solver of the
corresponding type. The same functions work for all solvers so that
different methods can be substituted at runtime without modifications to
the code.

@deftypefun int gsl_multiroot_fsolver_iterate (gsl_multiroot_fsolver * @var{s})
@deftypefunx int gsl_multiroot_fdfsolver_iterate (gsl_multiroot_fdfsolver * @var{s})
These functions perform a single iteration of the solver @var{s}. If the
iteration encounters an unexpected problem then an error code will be
returned,

@table @code
@item GSL_EBADFUNC
the iteration encountered a singular point where the function or its
derivative evaluated to @code{Inf} or @code{NaN}.

@item GSL_EZERODIV
the derivative of the function vanished at the iteration point,
preventing the algorithm from continuing without a division by zero.
@end table
@end deftypefun

The solver maintains a current best estimate of the root at all
times. The bracketing solvers also keep track of the current best
interval bounding the root. This information can be accessed with the
following auxiliary functions,

@deftypefun gsl_vector * gsl_multiroot_fsolver_root (const gsl_multiroot_fsolver * @var{s})
@deftypefunx gsl_vector * gsl_multiroot_fdfsolver_root (const gsl_multiroot_fdfsolver * @var{s})
These functions return the current estimate of the root for the solver @var{s}.
@end deftypefun

@node Multidimensional Root Finding - Search Stopping Parameters
@section Search Stopping Parameters
@cindex root finding, stopping parameters

A root finding procedure should stop when one of the following conditions is
true:

@itemize @bullet
@item
A multidimensial root has been found to within the user-specified precision.

@item
A user-specified maximum number of iterations has executed.

@item
An error has occurred.
@end itemize

@noindent
In the multidimensional root finding framework of GSL the handling of
these conditions is under user control.  The functions below allow the
user to test the precision of the current result in several standard
ways.

@deftypefun int gsl_multiroot_test_delta (const gsl_vector * @var{dx}, const gsl_vector * @var{x}, double @var{epsabs}, double @var{epsrel})

This function tests for the convergence of the sequence by comparing the
last step @var{dx} with the absolute error @var{epsabs} and relative
error @var{epsrel} to the current position @var{x}.  The test returns
@code{GSL_SUCCESS} if the following condition is achieved,

@tex
\beforedisplay
$$
|dx_i| < \hbox{\it epsabs} + \hbox{\it epsrel\/}\, |x_i|
$$
\afterdisplay
@end tex
@ifinfo
@example
|dx_i| < epsabs + epsrel |x_i|
@end example
@end ifinfo
@noindent
for each component of @var{x} and returns @code{GSL_CONTINUE} otherwise.
@end deftypefun

@deftypefun int gsl_multiroot_test_residual (const gsl_vector * @var{f}, double @var{epsabs})
This function tests the residual value @var{f} against the absolute
error bound @var{epsabs}. The test returns @code{GSL_SUCCESS} if the
following condition is achieved,

@tex
\beforedisplay
$$
\sum_i |f_i| < \hbox{\it epsabs}
$$
\afterdisplay
@end tex
@ifinfo
@example
\sum_i |f_i| < epsabs
@end example
@end ifinfo

@noindent
and returns @code{GSL_CONTINUE} otherwise. This criterion is suitable
for situations where the the precise location of the root, @math{x}, is
unimportant provided a value can be found where the residual is small
enough.
@end deftypefun

@comment ============================================================

@node Root Finding Algorithms without derivatives
@section Root Finding Algorithms without derivatives

The algorithms described in this section do not require any derivative
information to be supplied by the user. Any information needed about the
derivatives is approximated from function values.

@deffn {Solver} gsl_multiroot_fsolver_dnewton

@cindex Discrete newton algorithm for multidimension roots
@cindex Newton algorithm, discrete
@cindex multidimensional root finding, Discrete Newton algorithm

The @dfn{discrete Newton algorithm} is the simplest method of solving a
multidimensional system. It uses the Newton iteration

@tex
\beforedisplay
$$
x \to x - J^{-1} F(x)
$$
\afterdisplay
@end tex
@ifinfo
@example
x -> x - J^@{-1@} F(x)
@end example
@end ifinfo
@noindent
where the Hessian matrix @math{J} is approximated by taking finite
differences of the function @var{F}. The approximation scheme used by
this implementation is,

@tex
\beforedisplay
$$
J_{ij} = (F_i(x + \delta_j) - F_i(x)) /  \delta_j
$$
\afterdisplay
@end tex
@ifinfo
@example
J_@{ij@} = (F_i(x + \delta_j) - F_i(x)) /  \delta_j
@end example
@end ifinfo
@noindent
where @math{\delta_j} is a step of size @math{(\sqrt\epsilon)x_j} with
@math{\epsilon} being the machine precision 
(@c{$\epsilon \approx 2.22 \times 10^{-16}$}
@math{\epsilon \approx 2.22 \times 10^-16}).
The order of convergence of Newton's algorithm is quadratic, but the
finite differences require @math{n^2} function evaluations on each
iteration. The algorithm may become unstable if the finite differences
are not a good approximation to the true derivatives.
@end deffn

@comment ============================================================

@deffn {Solver} gsl_multiroot_fsolver_broyden
@cindex Broyden algorithm for multidimensional roots
@cindex multidimensional root finding, Broyden algorithm

The @dfn{Broyden algorithm} is a version of the discrete Newton
algorithm which attempts to avoids the expensive update of the Hessian
matrix on each iteration. The changes to the Hessian are also
approximated, using a rank-1 update,

@tex
\beforedisplay
$$
J^{-1} \to J^{-1} - (J^{-1} df - dx) dx^T J^{-1} / dx^T J^{-1} df
$$
\afterdisplay
@end tex
@ifinfo
@example
J^@{-1@} \to J^@{-1@} - (J^@{-1@} df - dx) dx^T J^@{-1@} / dx^T J^@{-1@} df
@end example
@end ifinfo
@noindent
where the vectors @math{dx} and @math{df} are the changes in @math{x}
and @math{f}.  On the first iteration the inverse Hessian is estimated
using finite differences, as for the discrete Newton algorithm.
 
This approximation gives a fast update but is unreliable if the changes
are not small, and the estimate of the inverse Hessian becomes worse as
time passes.  The algorithm has a tendency to become unstable unless it
starts close to the root.  The Hessian is refreshed if this instability
is detected (consult the source for details).

This algorithm is not recommended for real work and is included only for
pedagogical purposes.
@end deffn

@comment ============================================================

@deffn {Solver} gsl_multiroot_fsolver_brent
@cindex brent's method for finding roots
@cindex root finding, brent's method

@end deffn

@comment ============================================================

@node Multidimensional Root Finding Algorithms using Derivatives
@section Multidimensional Root Finding Algorithms using Derivatives

The root polishing algorithms described in this section require an
initial guess for the location of the root. There is no absolute
guarantee of convergence -- the function must be suitable for this
technique and the initial guess must be sufficiently close to the root
for it to work.  When the conditions are satisfied then convergence is
quadratic.

These algorithms make use of both the function and its derivative. 

@deffn {Derivative Solver} gsl_multiroot_fdfsolver_newton
@cindex Newton's Method algorithm for finding roots
@cindex root finding, Newton's Method algorithm

Newton's Method is the standard root-polishing algorithm.  The algorithm
begins with an initial guess for the location of the root. On each
iteration a linear approximation to the function @math{F} is used to
estimate the step which will zero all the components of the
residual. The iteration is defined by the following sequence,

@tex
\beforedisplay
$$
x \to x - J^{-1} F(x)
$$
\afterdisplay
@end tex
@ifinfo
@example
x -> x - J^@{-1@} F(x)
@end example
@end ifinfo
@noindent
where the Hessian matrix @math{J} is computed from the derivate
functions provided by @var{F}. The step @math{dx} is obtained numerically
by solving the linear system,

@tex
\beforedisplay
$$
J \,dx = - F(x)
$$
\afterdisplay
@end tex
@ifinfo
@example
J dx = - F(x)
@end example
@end ifinfo
@noindent
for @math{dx} using LU decomposition.
@end deffn

@comment ============================================================

@deffn {Derivative Solver} gsl_multiroot_fdfsolver_gnewton
@cindex Newton's Method algorithm for finding roots
@cindex root finding, Newton's Method algorithm

This is a modified version of Newtons method which attempts to improve
global convergence by requiring every step to reduce the Euclidean norm
of the residual @math{F^2(x)}. If the Newton step leads to an increase
in the norm then a reduced step of relative size

@tex
\beforedisplay
$$
t = (\sqrt{1 + 6 r} - 1) / (3 r)
$$
\afterdisplay
@end tex
@ifinfo
@example
t = (\sqrt(1 + 6 r) - 1) / (3 r)
@end example
@end ifinfo
@noindent
is proposed, with @math{r} being the ratio of norms
@math{F^2(x')/F^2(x)}. This procedure is repeated until a suitable step
size is found. 
@end deffn

@comment ============================================================

@deffn {Derivative Solver} gsl_multiroot_fdfsolver_brent
@cindex Steffenson's Method for finding roots
@cindex root finding, Steffenson's Method


@end deffn

@node Multidimensional Root Finding References and Further Reading
@section References and Further Reading

@itemize @asis
@item
J.J. Mor@'e, M.Y. Cosnard, "Numerical Solution of Nonlinear Equations",
@cite{ACM Transactions on Mathematical Software}, Vol 5, No 1, (1979), p 64-85

@item
C.G. Broyden, "A Class of Methods for Solving Nonlinear
Simultaneous Equations", @cite{Mathematics of Computation}, Vol 19 (1965),
p 577-593

@item 
J.J. Mor@'e, B.S. Garbow, K.E. Hillstrom, "Testing Unconstrained
Optimization Software", ACM Transactions on Mathematical Software, Vol
7, No 1 (1981), p 17-41
@end itemize

