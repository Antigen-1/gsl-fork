@comment
@node Exponential Function
@section Exponential Function
@cindex exponential function
@cindex exp


@subsection Exponential Function

/* Provide an exp() function with GSL semantics,
 * i.e. with proper error checking, etc.
 *
@deftypefun  int gsl_sf_exp_impl (double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_exp_e (double x, gsl_sf_result * result);
Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun


/* Exp(x)
 *
@deftypefun  int gsl_sf_exp_e10_impl (double x, gsl_sf_result_e10 * result);
@deftypefunx int gsl_sf_exp_e10_e (double x, gsl_sf_result_e10 * result);
Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun

/* Exponentiate and multiply by a given factor:  y * Exp(x)
 *
@deftypefun  int gsl_sf_exp_mult_impl (double x, double y, gsl_sf_result * result);
@deftypefunx int gsl_sf_exp_mult_e (double x, double y, gsl_sf_result * result);
Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun

/* Exponentiate and multiply by a given factor:  y * Exp(x)
 *
@deftypefun  int gsl_sf_exp_mult_e10_impl (const double x, const double y, gsl_sf_result_e10 * result);
@deftypefunx int gsl_sf_exp_mult_e10_e (const double x, const double y, gsl_sf_result_e10 * result);
Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun



@subsection Relative Exponential Functions

/* exp(x)-1
 *
@deftypefun  int gsl_sf_expm1_impl (double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_expm1_e (double x, gsl_sf_result * result);
Exceptional Return Values:  GSL_EOVRFLW
@end deftypefun

/* (exp(x)-1)/x = 1 + x/2 + x^2/(2*3) + x^3/(2*3*4) + ...
 *
@deftypefun  int gsl_sf_exprel_impl (double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_exprel_e (double x, gsl_sf_result * result);
Exceptional Return Values:  GSL_EOVRFLW
@end deftypefun


/* 2(exp(x)-1-x)/x^2 = 1 + x/3 + x^2/(3*4) + x^3/(3*4*5) + ...
 *
@deftypefun  int gsl_sf_exprel_2_impl (double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_exprel_2_e (double x, gsl_sf_result * result);
Exceptional Return Values:  GSL_EOVRFLW
@end deftypefun


/* Similarly for the N-th generalization of
 * the above.  The so-called N-relative exponential
 *
 * exprel_N(x) = N!/x^N (exp(x) - Sum[x^k/k!, (k,0,N-1)])
 *             = 1 + x/(N+1) + x^2/((N+1)(N+2)) + ...
 *             = 1F1(1,1+N,x)
 */
@deftypefun  int gsl_sf_exprel_n_impl (int n, double x, gsl_sf_result * result);
@deftypefunx int gsl_sf_exprel_n_e (int n, double x, gsl_sf_result * result);
Exceptional Return Values: 
@end deftypefun



@subsection Exponentiation With Error Estimate


/* Exponentiate a quantity with an associated error.
 */
@deftypefun  int gsl_sf_exp_err_impl (double x, double dx, gsl_sf_result * result);
@deftypefunx int gsl_sf_exp_err_e (double x, double dx, gsl_sf_result * result);
Exceptional Return Values: 
@end deftypefun


/* Exponentiate a quantity with an associated error.
 */
@deftypefun  int gsl_sf_exp_err_e10_impl (double x, double dx, gsl_sf_result_e10 * result);
@deftypefunx int gsl_sf_exp_err_e10_e (double x, double dx, gsl_sf_result_e10 * result);
Exceptional Return Values: 
@end deftypefun


/* Exponentiate and multiply by a given factor:  y * Exp(x),
 * for quantities with associated errors.
 *
@deftypefun  int gsl_sf_exp_mult_err_impl (double x, double dx, double y, double dy, gsl_sf_result * result);
@deftypefunx int gsl_sf_exp_mult_err_e (double x, double dx, double y, double dy, gsl_sf_result * result);
Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun


/* Exponentiate and multiply by a given factor:  y * Exp(x),
 * for quantities with associated errors.
 *
@deftypefun  int gsl_sf_exp_mult_err_e10_impl (double x, double dx, double y, double dy, gsl_sf_result_e10 * result);
@deftypefunx int gsl_sf_exp_mult_err_e10_e (double x, double dx, double y, double dy, gsl_sf_result_e10 * result);
Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun

