@comment
@node Exponential Function
@section Exponential Function
@cindex exponential function
@cindex exp


@subsection Exponential Function

@deftypefun double gsl_sf_exp (double @var{x})
@deftypefunx int gsl_sf_exp_e (double @var{x}, gsl_sf_result * @var{result})
Provide an exp() function with GSL semantics, i.e. with proper error
checking, etc.
@comment Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun

@deftypefun int gsl_sf_exp_e10_e (double @var{x}, gsl_sf_result_e10 * @var{result})
Exp(x)
@comment Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun

@deftypefun double gsl_sf_exp_mult (double @var{x}, double @var{y})
@deftypefunx int gsl_sf_exp_mult_e (double @var{x}, double @var{y}, gsl_sf_result * @var{result})
Exponentiate and multiply by a given factor:  y * Exp(x)
@comment Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun

@deftypefun int gsl_sf_exp_mult_e10_e (const double @var{x}, const double @var{y}, gsl_sf_result_e10 * @var{result})
Exponentiate and multiply by a given factor:  y * Exp(x)
@comment Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun



@subsection Relative Exponential Functions

@deftypefun double gsl_sf_expm1 (double @var{x})
@deftypefunx int gsl_sf_expm1_e (double @var{x}, gsl_sf_result * @var{result})
exp(x)-1
@comment Exceptional Return Values:  GSL_EOVRFLW
@end deftypefun

@deftypefun double gsl_sf_exprel (double @var{x})
@deftypefunx int gsl_sf_exprel_e (double @var{x}, gsl_sf_result * @var{result})
(exp(x)-1)/x = 1 + x/2 + x^2/(2*3) + x^3/(2*3*4) + ...
@comment Exceptional Return Values:  GSL_EOVRFLW
@end deftypefun

@deftypefun double gsl_sf_exprel_2 (double @var{x})
@deftypefunx int gsl_sf_exprel_2_e (double @var{x}, gsl_sf_result * @var{result})
2(exp(x)-1-x)/x^2 = 1 + x/3 + x^2/(3*4) + x^3/(3*4*5) + ...
@comment Exceptional Return Values:  GSL_EOVRFLW
@end deftypefun


Similarly for the N-th generalization of the above.  The so-called
N-relative exponential

exprel_N(x) = N!/x^N (exp(x) - Sum[x^k/k!, (k,0,N-1)])
            = 1 + x/(N+1) + x^2/((N+1)(N+2)) + ...
            = 1F1(1,1+N,x)

@deftypefun double gsl_sf_exprel_n (int @var{n}, double @var{x})
@deftypefunx int gsl_sf_exprel_n_e (int @var{n}, double @var{x}, gsl_sf_result * @var{result})
@comment Exceptional Return Values: 
@end deftypefun



@subsection Exponentiation With Error Estimate


@deftypefun int gsl_sf_exp_err_e (double @var{x}, double @var{dx}, gsl_sf_result * @var{result})
Exponentiate a quantity with an associated error.
@comment Exceptional Return Values: 
@end deftypefun

@deftypefun int gsl_sf_exp_err_e10_e (double @var{x}, double @var{dx}, gsl_sf_result_e10 * @var{result})
Exponentiate a quantity with an associated error.
@comment Exceptional Return Values: 
@end deftypefun

@deftypefun int gsl_sf_exp_mult_err_e (double @var{x}, double @var{dx}, double @var{y}, double @var{dy}, gsl_sf_result * @var{result})
Exponentiate and multiply by a given factor:  y * Exp(x),
for quantities with associated errors.
@comment Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun



@deftypefun int gsl_sf_exp_mult_err_e10_e (double @var{x}, double @var{dx}, double @var{y}, double @var{dy}, gsl_sf_result_e10 * @var{result})
Exponentiate and multiply by a given factor:  y * Exp(x),
for quantities with associated errors.
@comment Exceptional Return Values: GSL_EOVRFLW, GSL_EUNDRFLW
@end deftypefun

