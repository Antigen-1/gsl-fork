@comment
@node Power Function
@section Power Function
@cindex power function
@cindex integer powers

A common complaint about the standard C library is its lack of a
function for calculating (small) integer powers. GSL provides a simple
function to fill this gap.  For reasons of efficiency, these functions
do not check for overflow or underflow conditions. The functions are
declared in the header file @file{gsl_sf_pow_int.h}.

@deftypefun double gsl_sf_pow_int (double @var{x}, int @var{n})
@deftypefunx int gsl_sf_pow_int_e (double @var{x}, int @var{n}, gsl_sf_result * @var{result}) 
These routines compute the power @math{x^n} for integer @var{n}.  The
power is computed using the minimum number of multiplications. For
example, @math{x^8} is computed as @math{((x^2)^2)^2}, requiring only 3
multiplications.
@end deftypefun

@deftypefun double gsl_sf_pow_2 (const double @var{x})
@deftypefunx double gsl_sf_pow_3 (const double @var{x})
@deftypefunx double gsl_sf_pow_4 (const double @var{x})
@deftypefunx double gsl_sf_pow_5 (const double @var{x})
@deftypefunx double gsl_sf_pow_6 (const double @var{x})
@deftypefunx double gsl_sf_pow_7 (const double @var{x})
@deftypefunx double gsl_sf_pow_8 (const double @var{x})
@deftypefunx double gsl_sf_pow_9 (const double @var{x})
These functions can be used to compute small integer powers @math{x^2},
@math{x^3}, etc. efficiently. The functions will be inlined when
possible so that use of these functions should be as efficient as
explicitly writing the corresponding product expression.
@end deftypefun

@example
#include <gsl/gsl_sf_pow_int.h>
double y = gsl_sf_pow_int(3.0, 12)  /* compute 3.0**12 */
@end example
