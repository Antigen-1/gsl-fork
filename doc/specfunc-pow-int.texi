@comment
@node Power Function
@section Power Function
@cindex power function
@cindex integer powers

A common complaint about the standard C library is its lack of
a function for calculating (small) integer powers. GSL provides
a simple function to fill this gap.  For reasons of efficiency,
these functions do not check for overflow or underflow conditions.



@deftypefun double gsl_sf_pow_int (double @var{x}, int @var{n})
@deftypefunx int gsl_sf_pow_int_e (double @var{x}, int @var{n}, gsl_sf_result * @var{result}) 
@end deftypefun

@deftypefun double gsl_sf_pow_2 (const double @var{x})
@deftypefunx double gsl_sf_pow_3 (const double @var{x})
@deftypefunx double gsl_sf_pow_4 (const double @var{x})
@deftypefunx double gsl_sf_pow_5 (const double @var{x})
@deftypefunx double gsl_sf_pow_6 (const double @var{x})
@deftypefunx double gsl_sf_pow_7 (const double @var{x})
@deftypefunx double gsl_sf_pow_8 (const double @var{x})
@deftypefunx double gsl_sf_pow_9 (const double @var{x})
@end deftypefun

@example
#include <gsl/gsl_sf_pow_int.h>
double y = gsl_sf_pow_int(3.0, 12)
@end example
