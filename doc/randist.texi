@cindex random number distributions

Distributions of random numbers can be obtained from any of the
generators using the functions described in this section. In the
simplest cases a non-uniform distribution can be obtained analytically
from the uniform distribution with an appropriate transformation. This
method uses one call to the random number generator.


More complicated distributions are created by the
@dfn{acceptance-rejection} method, which compares the desired
distribution against a distribution which is similar and known
analytically. This usually requires several samples from the generator.

The functions described in this section are declared in
@file{gsl_randist.h}.

@c ----------------------------------------------------------------------
@menu
* The Gaussian Distribution::   
* The Bivariate Gaussian Distribution::  
* The Exponential Distribution::  
* The Laplace Distribution::    
* The Exponential Power Distribution::  
* The Cauchy Distribution::     
* The Rayleigh Distribution::   
* The Rayleigh Tail Distribution::  
* The Symmetric Levy Distribution::  
* The Gamma Distribution::      
* The Flat (Uniform) Distribution::  
* The Lognormal Distribution::  
* The Chi-squared Distribution::  
* The F-distribution::          
* The t-distribution::          
* The Beta Distribution::       
* The Logistic Distribution::   
* The Pareto Distribution::     
* The Spherical Distribution (2D & 3D)::  
* The Weibull Distribution::    
* The Gumbel Distribution::     
* General Discrete Distributions::  
* The Poisson Distribution::    
* The Bernoulli Distribution::  
* The Binomial Distribution::   
* The Negative Binomial Distribution::  
* The Geometric Distribution::  
* The Hypergeometric Distribution::  
* The Logarithmic Distribution::  
* Shuffling and Sampling::      
@end menu

@page
@node The Gaussian Distribution
@section The Gaussian Distribution
@deftypefn Random double gsl_ran_gaussian (const gsl_rng * @var{r}, double @var{sigma})
@cindex Gaussian random numbers
This function returns a gaussian random number, with mean zero and
standard deviation @var{sigma}. The probability
distribution for gaussian random numbers is,
@c
@equation
p(z) dz = @{1 \over \sqrt@{2 \pi \sigma^2@}@} 
            \exp (-(z-\mu)^2 / 2\sigma^2) dz
@end equation
@noindent
for @math{x} in the range @math{-\infty} to @math{+\infty}. Use the
transformation @math{z = \mu + x} on the numbers returned by
@code{gsl_ran_gaussian} to obtain a gaussian distribution with mean
@math{\mu}.
@end deftypefn

@deftypefun double gsl_ran_gaussian_pdf (double @var{x}, double @var{sigma})
This function computes the probability density @math{p(x)} at @var{x}
for a gaussian distribution with standard deviation @var{sigma}, using
the formula given above.
@end deftypefun

@deftypefun double gsl_ran_ugaussian_tail (const gsl_rng * @var{r}, double @var{tail})
This function provides random numbers distributed as a unit-variance gaussian,
but only provides values larger than @var{tail}.  For large values of @var{tail},
it would be inefficient to use @code{gsl_ran_gaussian} and then reject all
values less than @var{tail}.  The algorithm used is based on Marsaglia's
famous rectangle-wedge-tail algorithm (Ann Math Stat 32, 894-899 (1961)),
with this aspect explained in Knuth, v2, 3rd ed, p139,586 (exercise 11).

@end deftypefun

@tex
\centerline{\input rand-gaussian.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{\mu},
Variance = @math{\sigma^2},
Skewness = 0,
Excess = 0

@item
Cumulants, @math{\kappa_1=\mu}, @math{\kappa_2=\sigma^2},
@math{\kappa_n=0} for @math{n>2}

@item
Characteristic function, @math{\phi(t) = \exp(-i\mu t - \sigma^2 t^2/2)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_@{-\infty@}^x p(x') dx' = @{1 \over 2 @}(1 - \hbox@{erf@}((x-m)/\sqrt@{2\sigma^2@}))}
@item
Confidence limits:

@math{p(|x-\mu| < \sigma) = 0.683},
@math{p(|x-\mu| < 2\sigma) = 0.954},
@math{p(|x-\mu| < 3\sigma) = 0.9973}

@item
Useful integral:
@equation
\int_@{-\infty@}^@{+\infty@} x^@{2n@} p(x) dx 
= 2^n \sigma^@{2n+1@} \Gamma(n+ @{1 \over 2@}) / \sqrt\pi
@end equation

@end itemize

@page
@node The Bivariate Gaussian Distribution
@section The Bivariate Gaussian Distribution
@c
@deftypefn Random void gsl_ran_bivariate_gaussian (const gsl_rng * @var{r}, double @var{sigma_x}, double @var{sigma_y}, double @var{rho}, double * @var{x}, double * @var{y})
@cindex Gaussian random numbers
This function generates a pair of correlated gaussian variates, with
mean zero, correlation coefficient @var{rho} and standard deviations
@var{sigma_x} and @var{sigma_y} in the @math{x} and @math{y} directions.
The probability distribution for bivariate gaussian random numbers is,
@c
@equation
p(x,y) dx dy = @{1 \over 2 \pi \sigma_x \sigma_y \sqrt@{1-\rho^2@}@} 
\exp (-(x^2 + y^2 - 2 \rho x y)/2\sigma_x^2\sigma_y^2 (1-\rho^2)) dz
@end equation
@noindent
for @math{x,y} in the range @math{-\infty} to @math{+\infty}.
The correlation coefficient @var{rho} should lie between @math{1} and
@math{-1}.
@end deftypefn

@deftypefun double gsl_ran_bivariate_gaussian_pdf (double @var{x}, double @var{y}, double @var{sigma_x}, double @var{sigma_y}, double @var{rho})
This function computes the probability density @math{p(x,y)} at
(@var{x},@var{y}) for a bivariate gaussian distribution with standard
deviations @var{sigma_x}, @var{sigma_y} and correlation coefficient
@var{rho}, using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-bivariate-gaussian.tex}
@end tex

@c ----------------------------------------------------------------------
@page
@node The Exponential Distribution
@section The Exponential Distribution
@deftypefn Random double gsl_ran_exponential (const gsl_rng * @var{r}, double @var{mu})
@cindex Exponential random numbers
This function returns a random number from the exponential distribution
with mean @var{mu}.
@c
@equation
p(x) dx = @{1 \over \mu@} \exp(-x/\mu) dx
@end equation
@noindent
for @math{x \ge 0}. 
@end deftypefn

@deftypefun double gsl_ran_exponential_pdf (double @var{x}, double @var{mu})
This function computes the probability density @math{p(x)} at @var{x}
for an exponential distribution with mean @var{mu}, using the formula
given above.
@end deftypefun

@tex
\centerline{\input rand-exponential.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{\mu}, Variance = @math{\mu^2}, Skewness = 2, Excess = 6

@item
Cumulants, @math{\kappa_1=\mu}, @math{\kappa_n=\mu^n \Gamma(n)},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = 1/(1-i\mu t)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = 1 - \exp(-x/\mu)}
@item
Confidence limits:

@math{p(x < \mu) = 0.632},
@math{p(x < 2\mu) = 0.865},
@math{p(x < 3\mu) = 0.950}

@item
Useful integral:
@equation
\int_0^\infty x^n p(x) dx 
= n! \mu^@{n+1@}
@end equation

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Laplace Distribution
@section The Laplace Distribution
@deftypefn Random double gsl_ran_laplace (const gsl_rng * @var{r}, double @var{mu})
@cindex two-sided exponential random numbers
@cindex Laplace distribution random numbers
This function returns a random number from the the Laplace distribution
with width @var{mu}. The distribution is,
@equation
p(x) dx = @{1 \over 2 \mu@}  \exp(-|x/\mu|) dx
@end equation
@noindent
for @math{-\infty < x < \infty}.
@end deftypefn

@deftypefun double gsl_ran_laplace_pdf (double @var{x}, double @var{mu})
This function computes the probability density @math{p(x)} at @var{x}
for a Laplace distribution with mean @var{mu}, using the formula
given above.
@end deftypefun

@tex
\centerline{\input rand-laplace.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{0}, Variance = @math{2\mu^2}, Skewness = @math{0}, Excess =
@math{6}

@item
Cumulants, @math{\kappa_1=0}, @math{\kappa_2=2 \mu^2},
@math{\kappa_@{2n+1@}=0}, @math{\kappa_@{2n@}=(2n)!\mu^@{2n@}/n}

@item
Characteristic function, @math{\phi(t) = 1/(1+\mu^2 t^2}

@item
Cumulative distribution function, @math{CDF(x) = \int_0^x p(x') dx' =
@{1 \over 2@} \exp(-|x|)} for @math{x<0} and @math{1 - @{1 \over 2@}
\exp(-|x|)} for @math{x>0}.
@item
Confidence limits:

@item
Useful integral:

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Exponential Power Distribution
@section The Exponential Power Distribution
@deftypefn Random double gsl_ran_exppow (const gsl_rng * @var{r}, double @var{mu}, double @var{a})
@cindex Exponential power distribution, random numbers
This function returns a random number from the exponential power distribution
with scale parameter @var{mu} and exponent @var{a}.
@c
@equation
p(x) dx = @{1 \over 2 \mu \Gamma(1+1/a)@} \exp(-|x/\mu|^a) dx
@end equation
@noindent
for @math{x \ge 0}. For @math{a = 1} this reduces to the laplace
distribution. For @math{a = 2} it has the same form as a gaussian
distribution, but with @math{\mu = \sqrt@{2@} \sigma}.
@end deftypefn

@deftypefun double gsl_ran_exppow_pdf (double @var{x}, double @var{mu}, double @var{a})
This function computes the probability density @math{p(x)} at @var{x}
for an exponential power distribution with scale parameter @var{mu}
and exponent @var{a}, using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-exppow.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{0}, Variance = @math{\mu^2 \Gamma(3/a)/\Gamma(1/a)},
Skewness = @math{0}, Excess = @math{\Gamma(5/a)\Gamma(1/a)/\Gamma(3/a)^2}

@item
Cumulants, @math{\kappa_1=FIXME}, @math{\kappa_n=FIXME},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = FIXME}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = FIXME}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Cauchy Distribution
@section The Cauchy Distribution
@deftypefn Random double gsl_ran_cauchy (const gsl_rng * @var{r}, double @var{mu})
@cindex Cauchy random numbers
This function returns a random number from the Cauchy distribution with
scale parameter @var{mu}. The probability distribution for Cauchy
random numbers is,
@c
@equation
p(x) dx = @{1 \over \mu\pi (1 + (x/\mu)^2) @} dx
@end equation
@noindent
for @math{x} in the range @math{-\infty} to @math{+\infty}.  The Cauchy
distribution is also known as the Lorentz distribution.
@end deftypefn

@deftypefun double gsl_ran_cauchy_pdf (double @var{x}, double @var{mu})
This function computes the probability density @math{p(x)} at @var{x}
for an Cauchy distribution with scale parameter @var{mu}, using the formula
given above.
@end deftypefun

@tex
\centerline{\input rand-cauchy.tex}
@end tex

@subheading Properties
@itemize @asis
@item
The Cauchy distribution decreases as @math{1/|x|^2} for large
@math{x}. This makes the variance infinite. Other higher moments are
either infinite or undefined.

@item
Characteristic function, @math{\phi(t) = \exp(-i\alpha t - \beta |t|)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_@{-\infty@}^x p(x') dx' = @{1 \over 2 @} + @{1\over \pi@} \arctan(x/\mu)}

@item
Confidence limits:

@math{p(|x| < \mu) = 0.5},
@math{p(|x| < 2\mu) = 0.705},
@math{p(|x| < 3\mu) = 0.795}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Rayleigh Distribution
@section The Rayleigh Distribution
@deftypefn Random double gsl_ran_rayleigh (const gsl_rng * @var{r}, double @var{sigma})
@cindex Rayleigh random numbers
This function returns a random number from the Rayleigh distribution with
scale parameter @var{sigma}. The probability distribution for Rayleigh
random numbers is,
@c
@equation
p(x) dx = @{x \over \sigma^2@} \exp(- x^2/(2 \sigma^2)) dx
@end equation
@noindent
for @math{x>0}.
@end deftypefn

@deftypefun double gsl_ran_rayleigh_pdf (double @var{x}, double @var{sigma})
This function computes the probability density @math{p(x)} at @var{x}
for an Rayleigh distribution with scale parameter @var{sigma}, using the
formula given above.
@end deftypefun

@tex
\centerline{\input rand-rayleigh.tex}
@end tex

@subheading Properties
@itemize @asis
@item

@c @item
@c Characteristic function, @math{\phi(t) = \exp(-i\alpha t - \beta |t|)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_@{-\infty@}^x p(x') dx' = 1 - \exp(-x^2/(2 \sigma^2))}

@c @item
@c Confidence limits:

@c @math{p(|x| < \mu) = 0.5},
@c @math{p(|x| < 2\mu) = 0.705},
@c @math{p(|x| < 3\mu) = 0.795}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Rayleigh Tail Distribution
@section The Rayleigh Tail Distribution
@deftypefn Random double gsl_ran_rayleigh_tail (const gsl_rng * @var{r}, double @var{a} double @var{sigma})
@cindex Rayleigh Tail random numbers
This function returns a random number from the tail of the Rayleigh
distribution with scale parameter @var{sigma} and a lower limit of
@var{a}. The probability distribution for Rayleigh tail random numbers
is,
@c
@equation
p(x) dx = @{x \over \sigma^2@} \exp ((a^2 - x^2) /(2 \sigma^2)) dx
@end equation
@noindent
for @math{x>a}.
@end deftypefn

@deftypefun double gsl_ran_rayleigh_tail_pdf (double @var{x}, double @var{a}, double @var{sigma})
This function computes the probability density @math{p(x)} at @var{x}
for an Rayleigh tail distribution with scale parameter @var{sigma} and
lower limit @var{a}, using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-rayleigh-tail.tex}
@end tex

@subheading Properties
@itemize @asis
@item

@c @item
@c Characteristic function, @math{\phi(t) = \exp(-i\alpha t - \beta |t|)}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_@{-\infty@}^x p(x') dx' = 1 - \exp((a^2-x^2)/(2 \sigma^2))}

@c @item
@c Confidence limits:

@c @math{p(|x| < \mu) = 0.5},
@c @math{p(|x| < 2\mu) = 0.705},
@c @math{p(|x| < 3\mu) = 0.795}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Symmetric Levy Distribution
@section The Symmetric Levy Distribution
@deftypefn Random double gsl_ran_levy (const gsl_rng * @var{r}, double @var{mu}, double @var{a})
@cindex Levy distribution, random numbers
This function returns a random number from the symmetric Levy
distribution with scale @var{mu} and exponent @var{a}. The symmetric
Levy probability distribution is defined by a fourier transform,
@c
@equation
p(x) = @{1 \over 2 \pi@} \int_@{-\infty@}^@{+\infty@} dt \exp(it(\mu-x)- |t|^a) 
@end equation
@noindent
There is no explicit solution for the form of @math{p(x)}. For @math{a =
1} the distribution reduces to the Cauchy distribution. For @math{a = 2}
it is a Gaussian distribution with @math{\sigma = \sqrt@{2@} \mu}. For
@math{a < 1} the tails of the distribution become extremely wide.

The algorithm only works for @math{0 < a \le 2}.
@end deftypefn

@deftypefun double gsl_ran_levy_pdf (double @var{x}, double @var{mu})
This function computes the probability density @math{p(x)} at @var{x}
for a symmetric Levy distribution with scale parameter @var{mu} and
exponent @var{a}, using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-levy.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{0}, Variance = @math{FIXME}, Skewness = @math{0}, Excess = FIXME

@item
Cumulants, @math{\kappa_1=FIXME}, @math{\kappa_n=FIXME},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = FIXME}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = FIXME}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Gamma Distribution
@section The Gamma Distribution
@deftypefn Random double gsl_ran_gamma (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@cindex Gamma distribution random numbers
This function returns a random number from the gamma
distribution.  The distribution function is
@c
@equation
p(x) dx = @{1 \over \Gamma(a) b^a@} x^@{a-1@} e^@{-x/b@} dx
@end equation
@c If @math{X} and @math{Y} are independent gamma-distributed random
@c variables of order @math{a} and @math{b}, then @math{X+Y} has a gamma
@c distribution of order @math{a+b}.
@end deftypefn

@deftypefun double gsl_ran_gamma_pdf (double @var{x}, double @var{a}, double @var{b})
This function computes the probability density @math{p(x)} at @var{x}
for a gamma distribution with parameters @var{a} and @var{b}, using the
formula given above.
@end deftypefun

@tex
\centerline{\input rand-gamma.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{ab}, Variance = @math{ab^2}, Skewness =
@math{2/\sqrt@{a@}}, Excess = @math{6/a}

@item
Cumulants, @math{\kappa_1=ab}, @math{\kappa_n=a\Gamma(n) b^n},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = 1 - i bt }

@end itemize

@c @c ----------------------------------------------------------------------
@c @page
@c @node The Erlang distribution
@c @section The Erlang distribution
@c The Erlang distribution is the sum of @math{n} exponential variates,
@c each with mean @math{a}. 

@c @deftypefn Random double gsl_ran_erlang (const gsl_rng * @var{r}, double @var{a}, double @var{n})
@c @cindex Erlang random numbers
@c This function returns a random number from the Erlang distribution.
@c @c
@c @equation
@c p(x) dx = @{x^@{n-1@} \over (n-1)! a^n @} \exp (-x/a)  dx
@c @end equation
@c @noindent
@c for @math{x \ge 0}. 
@c @end deftypefn
@c @tex
@c \centerline{\input rand-erlang.tex}
@c @end tex

@c ----------------------------------------------------------------------
@page
@node The Flat (Uniform) Distribution
@section The Flat (Uniform) Distribution
@deftypefn Random double gsl_ran_flat (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@cindex flat distribution random numbers
This function returns a random number from the flat (uniform)
distribution from @var{a} to @var{b}.
@c
@equation
p(x) dx = @{1 \over (b-a)@} dx
@end equation
@noindent
if @math{a \le x < b} and 0 otherwise.
@end deftypefn

@deftypefun double gsl_ran_flat_pdf (double @var{x}, double @var{a}, double @var{b})
This function computes the probability density @math{p(x)} at @var{x}
for a uniform distribution from @var{a} to @var{b}, using the formula
given above.
@end deftypefun

@tex
\centerline{\input rand-flat.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{(a+b)/2}, Variance = @math{(b-a)^2/12}, Skewness =
@math{0}, Excess = @math{-6/5} 

@item
Cumulants, @math{\kappa_1=(a+b)/2}, @math{\kappa_@{2n+1@}=0},
@math{\kappa_@{2n@}=(b-a)^@{2n@} B_@{2n@} / (2n)},

@item
Characteristic function, @math{\phi(t) = (2 \sin(ht/2)/(ht)) \exp(i t (b+a)/2)}
where @math{h = (b - a)}.

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Lognormal Distribution
@section The Lognormal Distribution
@deftypefn Random double gsl_ran_lognormal (const gsl_rng * @var{r}, double @var{zeta}, double @var{sigma})
@cindex Lognormal random numbers
This function returns a random number from the lognormal
distribution.  The distribution function is
@c
@equation
p(x) dx = @{1 \over x \sqrt@{2 \pi \sigma^2@} @} \exp(-(\ln(x) - \zeta)^2/2 \sigma^2) dx
@end equation
for @math{x > 0}
@end deftypefn

@deftypefun double gsl_ran_lognormal_pdf (double @var{x}, double @var{zeta}, double @var{sigma})
This function computes the probability density @math{p(x)} at @var{x}
for a lognormal distribution with parameters @var{zeta} and @var{sigma},
using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-lognormal.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{st}, 
Variance = @math{s(s-1)t^2}, 
Skewness = @math{(s+2)\sqrt@{s-1@}}, 
Excess = @math{(s-1)(s^3+3s^2+6s+6)}

where @math{s = \exp(\sigma^2)} and @math{t = \exp(\zeta)}.

The mode (maximum) occurs at @math{x = \exp(\zeta - \sigma^2)}.

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = @{1 \over 2@} erfc((\zeta-\ln(x))/ (\sqrt@{2@} \sigma))}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Chi-squared Distribution
@section The Chi-squared Distribution
The chi-squared distribution arises in statistics If @math{Y_i} are
@math{n} independent gaussian random numbers with unit variance then the
sum-of-squares,
@equation
X_i = \sum_i Y_i^2
@end equation
has a chi-squared distribution with @math{n} degrees of freedom.

@deftypefn Random double gsl_ran_chisq (const gsl_rng * @var{r}, double @var{nu})
@cindex Chi-squared random numbers
This function returns a random number from the chi-squared distribution
with @var{nu} degrees of freedom.
@c
@equation
p(x) dx = @{1 \over \Gamma(\nu/2) @} (x/2)^@{\nu/2 - 1@} \exp(-x/2) dx
@end equation
@noindent
for @math{x \ge 0}. 
@end deftypefn

@deftypefun double gsl_ran_chisq_pdf (double @var{x}, double @var{nu})
This function computes the probability density @math{p(x)} at @var{x}
for a chi-squared distribution with @var{nu} degrees of freedom, using
the formula given above.
@end deftypefun

@tex
\centerline{\input rand-chisq.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{\nu}, 
Variance = @math{2\nu}, 
Skewness = @math{2\sqrt@{2/\nu@}}, 
Excess = @math{12/\nu}

@item
Cumulants, @math{\kappa_1=FIXME}, @math{\kappa_n=FIXME},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = FIXME}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = FIXME}
@item
Confidence limits:

@item
Useful integral:

@end itemize

@c ----------------------------------------------------------------------
@page
@node The F-distribution
@section The F-distribution
The F-distribution arises in statistics. If @math{Y_1} and @math{Y_2} are
chi-squared deviates with @math{\nu_1} and @math{\nu_2} degrees of freedom
then the ratio,
@c
@equation
X = @{ (Y_1 / \nu_1) \over (Y_2 / \nu_2) @}
@end equation
@noindent
has an F-distribution @math{F(x;\nu_1,\nu_2)}.

@deftypefn Random double gsl_ran_fdist (const gsl_rng * @var{r}, double @var{nu1}, double @var{nu2})
@cindex F-distribution random numbers
This function returns a random number from the F-distribution with degrees of freedom @var{nu1} and @var{nu2}.
@c
@equation
p(x) dx = 
   @{ \Gamma((\nu_1 + \nu_2)/2)
        \over \Gamma(\nu_1/2) \Gamma(\nu_2/2) @} 
   \nu_1^@{\nu_1/2@} \nu_2^@{\nu_2/2@} 
   x^@{\nu_1/2 - 1@} (\nu_2 + \nu_1 x)^@{-\nu_1/2 -\nu_2/2@}
@end equation
@noindent
for @math{x \ge 0}. 
@end deftypefn

@deftypefun double gsl_ran_fdist_pdf (double @var{x}, double @var{nu1}, double @var{nu2})
This function computes the probability density @math{p(x)} at @var{x}
for an F-distribution with @var{nu1} and @var{nu2} degrees of freedom,
using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-fdist.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{\nu_2/(\nu_2 - 2)} (for @math{\nu_2 > 2}), Variance =
@math{2\nu_2^2 (\nu_1 + \nu_2 - 2)/(\nu_1 (\nu_2 - 2)^2 (\nu_2 - 4))}
(for @math{\nu_2 > 4})

@end itemize

@c ----------------------------------------------------------------------
@page
@node The t-distribution
@section The t-distribution
The t-distribution arises in statistics. If @math{Y_1} has a normal
distribution and @math{Y_2} has a  chi-squared distribution with @math{\nu}
degrees of freedom then the ratio

@equation
X = @{ Y_1 \over \sqrt@{Y_2 / \nu@} @}
@end equation
@noindent
has a t-distribution @math{t(x;\nu)} with @math{\nu} degrees of freedom.

@deftypefn Random double gsl_ran_tdist (const gsl_rng * @var{r}, double @var{nu})
@cindex t-distribution random numbers
This function returns a random number from the t-distribution. The
distribution is,
@equation
p(x) dx = @{\Gamma((\nu + 1)/2) \over \sqrt@{\pi \nu@} \Gamma(\nu/2)@}
   (1 + x^2/\nu)^@{-(\nu + 1)/2@} dx
@end equation
@noindent
@end deftypefn

@deftypefun double gsl_ran_tdist_pdf (double @var{x}, double @var{nu})
This function computes the probability density @math{p(x)} at @var{x}
for a t-distribution with @var{nu} degrees of freedom, using the formula
given above.
@end deftypefun

@tex
\centerline{\input rand-tdist.tex}
@end tex

@c ----------------------------------------------------------------------
@page
@node The Beta Distribution
@section The Beta Distribution
@deftypefn Random double gsl_ran_beta (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@cindex Beta distribution random numbers
This function returns a random number from the beta
distribution.  The distribution function is
@c
@equation
p(x) dx = @{\Gamma(a+b) \over \Gamma(a) \Gamma(b)@} x^@{a-1@} (1-x)^@{b-1@} dx
@end equation
@end deftypefn

@deftypefun double gsl_ran_beta_pdf (double @var{x}, double @var{a}, double @var{b})
This function computes the probability density @math{p(x)} at @var{x}
for a beta distribution with parameters @var{a} and @var{b}, using the
formula given above.
@end deftypefun

@tex
\centerline{\input rand-beta.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{a/(a+b)}, Variance = @math{ab/((a+b)^2 (a+b+1))}, Skewness =
@math{2(a-b)/(a+b+2)}, Excess = @math{\sqrt@{(a+b+1) \over ab@}
\left( @{3(a+b+1)(2(a+b)^2 + ab(a+b-6)) \over ab(a+b+2)(a+b+3)@} - 3 \right)}

In the symmetric case @math{a=b} these results simplify to,

Mean = @math{1/2}, Variance = @math{1/(4(2a+1))}, Skewness = @math{0},
Excess = @math{-6 \sqrt@{2a + 1@}/(a(2a+3))}
@end itemize

@c ----------------------------------------------------------------------
@page
@node The Logistic Distribution
@section The Logistic Distribution

@deftypefn Random double gsl_ran_logistic (const gsl_rng * @var{r}, double @var{mu})
@cindex Logistic random numbers
This function returns a random number from the logistic
distribution.  The distribution function is
@c
@equation
p(x) dx = @{ \exp(-x/\mu) \over \mu (1 + \exp(-x/\mu))^2 @} dx
@end equation
for @math{x > 0}
@end deftypefn

@deftypefun double gsl_ran_logistic_pdf (double @var{x}, double @var{mu})
This function computes the probability density @math{p(x)} at @var{x}
for a logistic distribution with scale parameter @var{mu}, using the
formula given above.
@end deftypefun

@tex
\centerline{\input rand-logistic.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{0}, Variance = @math{\pi^2 \mu^2 / 3}, Skewness =
@math{0}, Excess = @math{6/5}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_@{-\infty@}^x p(x') dx' = 1/(1+\exp(-x/\mu))}
@item
Confidence limits:

@item
Useful integral:

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Pareto Distribution
@section The Pareto Distribution
@deftypefn Random double gsl_ran_pareto (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@cindex Lognormal random numbers
This function returns a random number from the Pareto distribution of
order @var{a}.  The distribution function is,
@c
@equation
p(x) dx = a b^a / x^@{a+1@} dx
@end equation
for @math{x \ge b}
@end deftypefn

@deftypefun double gsl_ran_pareto_pdf (double @var{x}, double @var{a}, double @var{b})
This function computes the probability density @math{p(x)} at @var{x}
for a Pareto distribution with exponent @var{a} and scale @var{b}, using
the formula given above.
@end deftypefun

@tex
\centerline{\input rand-pareto.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{ab/(a-1)} (for @math{a>1}), 
Variance = @math{a b^2/((a-2)(a-1)^2)} (for @math{a>2},
Skewness = @math{2(a+1)\sqrt@{(a-2)/a@}/(a-3)} (for @math{a>3}),
Excess = @math{6(a(a^2+a-6)-2)/(a(a-3)(a-4))} (for @math{a>4}),  
Mode = @math{b}

@item
Cumulants, @math{\kappa_1=FIXME}, @math{\kappa_n=FIXME},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = FIXME}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = 1 - (b / x)^a}
@item
Confidence limits:

@item
Useful integral:

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Spherical Distribution (2D & 3D)
@section The Spherical Distribution (2D & 3D)

The spherical distributions generate random vectors, located on a
spherical surface. They can be used as random directions, for example in
the steps of a random walk.

@deftypefn Random void gsl_ran_dir_2d (const gsl_rng * @var{r}, double *@var{x}, double *@var{y})
@cindex 2D random direction vector
@cindex direction vector, random 2D
@cindex spherical random numbers, 2D
This function returns a random direction vector @math{v} =
(@var{x},@var{y}) in two dimenions. The vector is normalized
such that @math{|v|^2 = x^2 + y^2 = 1}.
The obvious way to do this is to take a uniform random number between 
0 and @math{2\pi} and let @var{x} and @var{y} be the sine and cosine
respectively.  Two trig functions would have been expensive in the old
days, but with modern hardware implementations, this is sometimes the
fastest way to go.  This is the case for my home Pentium (but not the
case for my Sun Sparcstation 20 at work).  Once can 
avoid the trig evaluations by choosing @var{x} and @var{y} in the
interior of a unit circle (choose them at random from the interior
of the enclosing square, and then reject those that are outside the
unit circle), and then dividing by @math{\sqrt@{x^2 + y^2@}}.
A much
cleverer approach,  attributed to von Neumann (See Knuth, v2, 3rd ed, p140, 
exercise 23), requires neither trig nor a square root.  In this approach,
@var{u} and @var{v} are chosen at random from the interior of a unit
circle, and then @math{x=(u^2-v^2)/(u^2+v^2)} and @math{y=uv/(u^2+v^2)}.
@end deftypefn

@deftypefn Random void gsl_ran_dir_3d (const gsl_rng * @var{r}, double *@var{x}, double *@var{y}, double * @var{z})
@cindex 3D random direction vector
@cindex direction vector, random 3D
@cindex spherical random numbers, 3D
This function returns a random direction vector @math{v} =
(@var{x},@var{y},@var{z}) in three dimenions. The vector is
normalized such that @math{|v|^2 = x^2 + y^2 + z^2 = 1}.
The method employed is due to Robert E. Knop (CACM 13, 326 (1970)),
and explained in Knuth, v2, 3rd ed, p136.  It uses the 
surprising fact that the distribution projected along any axis is 
actually uniform (this is only true for 3d).
@end deftypefn

@deftypefn Random void gsl_ran_dir_nd (const gsl_rng * @var{r}, int @var{n}, double *@var{x})
@cindex N-dimensional random direction vector
@cindex direction vector, random N-dimensional
@cindex spherical random numbers, N-dimensional
This function returns a random direction vector @math{v} =
@math{x_1,x_2,\ldots,x_n} in @var{n} dimenions. The vector is
normalized such that @math{|v|^2 = x_1^2 + x_2^2 + \cdots + x_n^2 = 1}.
The method uses the fact that a multivariate gaussian distribution
is spherically symmetric.  Each component is generated to have a gaussian
distribution, and then the components are normalized.  The method
is described by Knuth, v2, 3rd ed, p135-136, and attributed to
G. W. Brown, Modern Mathematics for the Engineer (1956).
@end deftypefn

@noindent
The follwing program generates a random walk in two dimensions.

@example
#include <stdio.h>
#include <gsl_rng.h>
#include <gsl_randist.h>

main ()
@{
  gsl_rng * r = gsl_rng_alloc (gsl_rng_env_setup()) ;
  int i ;
  double x = 0, y = 0, dx, dy;

  printf("%g %g\n", x, y) ;

  for (i = 0; i < 10; i++)
    @{
      gsl_ran_dir_2d (r, &dx, &dy) ;
      x += dx ; y += dy; 
      printf("%g %g\n", x, y) ;
    @}
@}
@end example
@noindent
Example output from the program, three 10-step random walks from the origin.

@tex
\centerline{\input random-walk.tex}      
@end tex


@c ----------------------------------------------------------------------
@page
@node The Weibull Distribution
@section The Weibull Distribution
@deftypefn Random double gsl_ran_weibull (const gsl_rng * @var{r}, double @var{mu}, double @var{a})
@cindex Weibull distribution random numbers
This function returns a random number from the Weibull distribution. The
distribution is,
@equation
p(x) dx = @{a \over \mu^a@} x^@{a-1@}  \exp(-(x/\mu)^a) dx
@end equation
@noindent
for @math{-\infty < x < \infty}.
@end deftypefn

@deftypefun double gsl_ran_weibull_pdf (double @var{x}, double @var{mu}, double @var{a})
This function computes the probability density @math{p(x)} at @var{x}
for a Weibull distribution with scale @var{mu} and exponent @var{a},
using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-weibull.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{\Gamma(1+1/a) \mu}, 
Variance = @math{(\Gamma(1+2/a)-\Gamma(1+1/a))\mu^2}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = 1 - \exp(-(x/\mu)^a)}
@end itemize

@c ----------------------------------------------------------------------
@page
@node The Gumbel Distribution
@section The Gumbel Distribution
@deftypefn Random double gsl_ran_gumbel1 (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@deftypefnx Random double gsl_ran_gumbel2 (const gsl_rng * @var{r}, double @var{a}, double @var{b})
@cindex Gumbel distribution, random numbers
These functions return random numbers from the Type-1 and Type-2 Gumbel
distributions. The Type-1 Gumbel distribution is,
@equation
p(x) dx = a b \exp(-(b \exp(-ax) + ax)) dx
@end equation
@noindent
for @math{-\infty < x < \infty}. The Type-2 Gumbel distribution is,
@equation
p(x) dx = a b x^@{-a-1@} \exp(-b x^@{-a@}) dx
@end equation
@noindent
for @math{0 < x < \infty}.
@end deftypefn

@deftypefun double gsl_ran_gumbel1_pdf (double @var{x}, double @var{a}, double @var{b})
@deftypefunx double gsl_ran_gumbel2_pdf (double @var{x}, double @var{a}, double @var{b})
These function computes the probability density @math{p(x)} at @var{x}
for a Type-1 or Type-2 Gumbel distribution with parameters @var{a} and
@var{b}, using the formulas given above.
@end deftypefun

@tex
\centerline{\input rand-gumbel.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{\Gamma(1+1/a) \mu}, 
Variance = @math{(\Gamma(1+2/a)-\Gamma(1+1/a))\mu^2}

@item
Cumulative distribution function, 
@math{CDF(x) = \int_0^x p(x') dx' = 1 - \exp(-(x/\mu)^a)}
@end itemize

@c ----------------------------------------------------------------------
@page
@section Discrete distributions

@c ----------------------------------------------------------------------
@node General Discrete Distributions
@section General Discrete Distributions

Given @var{K} discrete events with different probabilities @var{P[k]},
produce a random value @var{k} consistent with its probability.

The obvious way to do this is to preprocess the probability list by
generating a cumulative probability array with @math{K+1} elements:
@code{C[0] = 0; C[k+1] = C[k]+P[k]}.  Note that this construction
produces @math{C[K]=1}.  Now choose a uniform deviate @var{u} between 0
and 1, and find the value of @var{k} such that @math{C[k]\le u <
C[k+1]}.  Although this in principle requires of order @math{\log K}
steps per random number generation, they are fast steps, and if you use
something like @math{\lfloor uK\rfloor} as a starting point, you can
often do pretty well.

But faster methods have been devised.  Again, the idea is to preprocess
the probability list, and save the result in some form of lookup table;
then the individual calls for a random discrete event can go rapidly.
An approach invented by G. Marsaglia (Generating discrete random numbers
in a computer, Comm ACM 6, 37-38 (1963)) is very clever, and readers
interested in examples of good algorithm design are directed to this
short and well-written paper.  Unfortuantely, for large @var{K},
Marsaglia's lookup table can be quite large.  A much better approach is
due to Alastair J. Walker (An efficient method for generating discrete
random variables with general distributions, ACM Trans on Mathematical
Software 3, 253-256 (1977); see also Knuth, v2, 3rd ed, p120-121,139).
This requires two lookup tables, one floating point and one integer, but
both only of size @var{K}.  After preprocessing, the random numbers are
generated in O(1) time, even for large @var{K}.  The preprocessing
suggested by Walker requires @math{O(K^2)} effort, but that is not
actually necessary, and the implementation provided here only takes
@math{O(K)} effort.  In general, more preprocessing leads to faster
generation of the individual random numbers, but a diminishing return
is reached pretty early.  Knuth points out that the optimal preprocessing
is combinatorially difficult for large @var{K}.

This method can be used to speed up some of the discrete random number
generators below, such as the binomial distribution.  To use if for
something like the Poisson Distribution, a modification would have to
be made, since it only takes a finite set of @var{K} outcomes.

@deftypefn Random {gsl_ran_discrete_t *} gsl_ran_discrete_preproc (int @var{K}, const 
double * @var{P})
@cindex Discrete random numbers
@cindex Discrete random numbers, preprocessing
This function returns a pointer to a structure that contains the lookup
table for the discrete random number generator.  The array @code{P[]} contains
the probabilities of the discrete events; these array elements must all be 
positive, but they needn't add up to one (so you can think of them more
generally as "weights") -- the preprocessor will normalize appropriately.
This return value is used
as an argument for the @code{gsl_ran_discrete} function below.
@end deftypefn

@deftypefn Random {int} gsl_ran_discrete (const gsl_rng * @var{r}, const gsl_ran_discrete_t * @var{g})
@cindex Discrete random numbers
After the preprocessor, above, has been called, you use this function to
get the discrete random numbers.
@end deftypefn

@deftypefn Random {double} gsl_ran_discrete_pdf (int @var{k}, const gsl_ran_discrete_t * @var{g})
@cindex Discrete random numbers
Returns the probability @var{P[k]} of observing the variable @var{k}.
Since @var{P[k]} is not stored as part of the lookup table, it must be
recomputed; this computation takes @var{O(K)}, so if @var{K} is large
and you care about the original array @var{P[k]} used to create the
lookup table, then you should just
keep this original array @var{P[k]} around.
@end deftypefn

@deftypefn Random {void} gsl_ran_discrete_free (gsl_ran_discrete_t * @var{g})
@cindex Discrete random numbers
De-allocates the lookup table pointed to by @var{g}.
@end deftypefn

@c ----------------------------------------------------------------------
@node The Poisson Distribution
@section The Poisson Distribution
@deftypefn Random {unsigned int} gsl_ran_poisson (const gsl_rng * @var{r}, double @var{mu})
@cindex Poisson random numbers
This function returns a random integer from the Poisson distribution
with mean @var{mu}. The probability distribution for Poisson random
numbers is,
@c
@equation
p(k) = @{\mu^k \over k!@} \exp(-\mu)
@end equation
@noindent
for @math{k \ge 0}.
@end deftypefn

@deftypefun double gsl_ran_poisson_pdf (unsigned int @var{k}, double @var{mu})
This function computes the probability @math{p(k)} of obtaining  @var{k}
from a Poisson distribution with mean @var{mu}, using the formula
given above.
@end deftypefun

@tex
\centerline{\input rand-poisson.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{\mu}, Variance = @math{\mu^2}, Skewness =
@math{1/\sqrt\mu}, Excess = @math{1/\mu}

@item
Cumulants, @math{\kappa_n=m} for all @math{n}

@item
Characteristic function, @math{\phi(t) = \exp(m(e^@{it@}-1))}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Bernoulli Distribution
@section The Bernoulli Distribution
@deftypefn Random {unsigned int} gsl_ran_bernoulli (const gsl_rng * @var{r}, double @var{p})
@cindex Bernoulli trial, random numbers
This function returns the result either 0 or 1, the result of a
Bernoulli trial with probability @var{p}. The probability distribution
for a Bernoulli trial is,
@c
@equation
p(0) = 1 - p
@end equation
@equation
p(1) = p
@end equation
@end deftypefn

@deftypefun double gsl_ran_bernoulli_pdf (unsigned int @var{k}, double @var{p})
This function computes the probability @math{p(k)} of obtaining
@var{k} from a Bernoulli distribution with probability parameter
@var{p}, using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-bernoulli.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{p}, Variance = @math{p(1-p)}, Skewness =
@math{(1-2p)/\sqrt@{p(1-p)@}}, Excess = @math{1-6p(1-p))/(p(1-p))}

@item
Cumulants, @math{\kappa_n=FIXME} for all @math{n}

@item
Characteristic function, @math{\phi(t) = FIXME}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Binomial Distribution
@section The Binomial Distribution
@deftypefn Random {unsigned int} gsl_ran_binomial (const gsl_rng * @var{r}, double @var{p}, unsigned int @var{n})
@cindex Binomial random numbers
This function returns a random integer from the binomial distribution,
the number of successes in @var{n} independent trials with probability
@var{p}. The probability distribution for binomial random numbers is,
@c
@equation
p(k) = @{n! \over k! (n-k)! @} p^k (1-p)^@{n-k@}
@end equation
@noindent
for @math{0 \le k \le n}.
@end deftypefn

@deftypefun double gsl_ran_binomial_pdf (unsigned int @var{k}, double @var{p}, unsigned int @var{n})
This function computes the probability @math{p(k)} of obtaining @var{k}
from a binomial distribution with parameters @var{p} and @var{n}, using
the formula given above.
@end deftypefun

@tex
\centerline{\input rand-binomial.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{np}, Variance = @math{np(1-p)}, Skewness =
@math{(1-2p)/\sqrt@{np(1-p@}}, Excess = @math{(1-6p(1-p))/(np(1-p))}

@item
Cumulants, @math{\kappa_1=np}, @math{\kappa_@{r+1@}=p(1-p)(d\kappa_r/dp)},
for @math{n>1}

@item
Characteristic function, @math{\phi(t) = (1-p + p\exp(it))^n}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Negative Binomial Distribution
@section The Negative Binomial Distribution
@deftypefn Random {unsigned int} gsl_ran_negative_binomial (const gsl_rng * @var{r}, double @var{p}, double @var{n})
@cindex Negative Binomial distribution, random numbers
This function returns a random integer from the negative binomial
distribution, the number of failures occurring before @var{n} successes
in independent trials with probability @var{p} of success. The
probability distribution for negative binomial random numbers is,
@c
@equation
p(k) = @{\Gamma(n + k) \over \Gamma(k+1) \Gamma(n) @} p^n (1-p)^k
@end equation
@noindent
Note that @math{k} is not required to be an integer.
@end deftypefn

@deftypefun double gsl_ran_nbinomial_pdf (unsigned int @var{k}, double @var{p}, double  @var{n})
This function computes the probability @math{p(k)} of obtaining @var{k}
from a negative binomial distribution with parameters @var{p} and
@var{n}, using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-nbinomial.tex}
@end tex

@deftypefn Random {unsigned int} gsl_ran_pascal (const gsl_rng * @var{r}, double @var{p}, unsigned int @var{k})
This function returns a random integer from the Pascal distribution. The
Pascal distribution is simply a negative binomial distribution with an
integer value of @math{n}.
@equation
p(k) = @{(n + k - 1)! \over k! (n -1)! @} p^n (1-p)^k
@end equation
@end deftypefn

@deftypefun double gsl_ran_pascal_pdf (unsigned int @var{k}, double @var{p}, unsigned int @var{n})
This function computes the probability @math{p(k)} of obtaining @var{k}
from a Pascal distribution with parameters @var{p} and
@var{n}, using the formula given above.
@end deftypefun

@subheading Properties
@itemize @asis
@item
Mean = @math{n(1-p)/p}, Variance = @math{n(1-p)/p^2}, Skewness =
@math{(2-p)/\sqrt@{n(1-p)@}}, Excess = @math{(1/n)(6+@{p^2 \over 1 -
p@})}
@end itemize

@c ----------------------------------------------------------------------
@page
@node The Geometric Distribution
@section The Geometric Distribution
@deftypefn Random {unsigned int} gsl_ran_geometric (const gsl_rng * @var{r}, double @var{p})
@cindex Geometric random numbers
This function returns a random integer from the geometric distribution,
the number of independent trials with probability @var{p} until the
first success. The probability distribution for geometric random numbers
is,
@c
@equation
p(k) =  p (1-p)^k
@end equation
@noindent
for @math{k \ge 1}.
@end deftypefn

@deftypefun double gsl_ran_geometric_pdf (unsigned int @var{k}, double @var{p})
This function computes the probability @math{p(k)} of obtaining @var{k}
from a geometric distribution with probability parameter @var{p}, using
the formula given above.
@end deftypefun

@tex
\centerline{\input rand-geometric.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{(1-p)/p}, Variance = @math{(1-p)/p^2}, Skewness =
@math{(2-p)/\sqrt@{1-p@}}, Excess = @math{6+(p^2/(1-p))}

@item
Cumulants, @math{\kappa_1=(1-p)/p},
@math{\kappa_@{r+1@}=-(1-p)(d\kappa_r/dp)}, for @math{r>1}

@item
Characteristic function, @math{\phi(t) = p/(1 - (1-p)\exp(it)}

@end itemize

@c ----------------------------------------------------------------------
@page
@node The Hypergeometric Distribution
@section The Hypergeometric Distribution
@deftypefn Random {unsigned int} gsl_ran_hypergeometric (const gsl_rng * @var{r}, unsigned int @var{n1}, unsigned int @var{n2}, unsigned int @var{t})
@cindex Geometric random numbers
This function returns a random integer from the hypergeometric
distribution. The probability distribution for hypergeometric
random numbers is,
@c
@equation
p(k) =  C(n1,k) C(n2, t-k) / C(n1+n2,k)
@end equation
@noindent
where @math{C(a,b) = a!/(b!(a-b)!)}. The domain of @math{k} is
@math{max(0,t-n_2)}, ..., @math{max(t,n_1)}.
@end deftypefn

@deftypefun double gsl_ran_hypergeometric_pdf (unsigned int @var{k}, unsigned int @var{n1}, unsigned int @var{n2}, unsigned int @var{t})
This function computes the probability @math{p(k)} of obtaining @var{k}
from a hypergeometric distribution with parameters @var{n1}, @var{n2},
@var{n3}, using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-hypergeometric.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{t n_1 / N}, Variance = @math{t n_1 n_2 (N-t)/(N^2(N-1))},
Skewness = @math{(n_2 - n_1)(N-2t) \sqrt@{(N-1)/(t n_1 n_2 (N-t))@}}, where
@math{N = n_1 + n_2}.
@end itemize

@c ----------------------------------------------------------------------
@page
@node The Logarithmic Distribution
@section The Logarithmic Distribution
@deftypefn Random {unsigned int} gsl_ran_logarithmic (const gsl_rng * @var{r}, double @var{p})
@cindex Logarithmic random numbers
This function returns a random integer from the logarithmic
distribution. The probability distribution for logarithmic random numbers
is,
@c
@equation
p(k) = @{-1 \over \log(1-p)@} @{\left( p^k \over k \right)@}
@end equation
@noindent
for @math{n \ge 1}.
@end deftypefn

@deftypefun double gsl_ran_logarithmic_pdf (unsigned int @var{k}, double @var{p})
This function computes the probability @math{p(k)} of obtaining @var{k}
from a logarithmic distribution with probability parameter @var{p},
using the formula given above.
@end deftypefun

@tex
\centerline{\input rand-logarithmic.tex}
@end tex

@subheading Properties
@itemize @asis
@item
Mean = @math{a p / (1-p)}, Variance = @math{a p (1-a p)/(1-p)^2}
where @math{a = -1/\log(1-p)}
@end itemize

@c ----------------------------------------------------------------------
@c @deftypefn Random void gsl_ran_poisson_array (const gsl_rng * @var{r}, double @var{mu}, int @var{N}, int *@var{p})
@c @code{gsl_ran_poisson_array} places an array of @var{N}
@c poisson--distributed random numbers with mean @var{mu} into the array
@c @var{p}.
@c @end deftypefn

@page
@node Shuffling and Sampling
@section Shuffling and Sampling

@deftypefn Random void gsl_ran_shuffle (const gsl_rng * @var{r}, void * @var{base}, size_t @var{n}, size_t @var{size})

This function randomly shuffles the order of @var{n} objects, each of
size @var{size}, stored in the array @var{base}[0..@var{n}-1].

The following code shows how to shuffle the numbers from 0 to 51,

@example
int a[52];

for (i = 0; i < 52; i++)
  @{
    a[i] = i ;
  @}

gsl_ran_shuffle (r, a, 52, sizeof (int));
@end example

@end deftypefn

@deftypefn Random {void *} gsl_ran_choose (const gsl_rng * @var{r}, void * @var{dest}, size_t @var{k}, void * @var{src}, size_t @var{n}, size_t @var{size})
This function fills the array @var{dest[k]} with @var{k} objects taken
randomly from the @var{n} elements of the array @var{src[n]}. The
objects are each of size @var{size}. The objects are sampled without
replacement, thus each object can only appear once in @var{dest[k]}.  It
is required that @var{k} be less than or equal to @code{n}. The objects
in @var{dest} will be in the same relative order as those in @var{src}.
You will need to call @code{gsl_ran_shuffle(r, dest, n, size)} if you
want to randomize the order.

The following code shows how to select a random sample of three unique
numbers from the set 0 to 99,

@example
double a[3], b[100];

for (i = 0; i < 100; i++)
  @{
    b[i] = (double) i ;
  @}

gsl_ran_choose (r, a, 3, b, 100, sizeof (double));
@end example


@end deftypefn
