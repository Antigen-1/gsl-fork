                         Hacking on GSL

The GSL hacker needs some stuff that the end users don't:

* you must have a recent automake (1.4p1 or greater) from
ftp://sources.redhat.com/pub/automake/

* you must have the latest autoconf from
ftp://sources.redhat.com/pub/automake/

* you must have a recent libtool (1.4 or greater) from
ftp://ftp.gnu.org/gnu/libtool/

* you must have a recent CVS (at least 1.9) from
ftp://prep.ai.mit.edu/u2/emacs/

Once you have this stuff, you can get the repository and start
working from your own machine.  To do the initial checkout of the
repository try (bash syntax):

# PEOPLE WITH CVS WRITE ACCESS:
export CVS_RSH=ssh
cvs -d sources.redhat.com:/cvs/gsl checkout gsl
[from now on you can just do "cvs update" in the gsl directory]

# ANONYMOUS CVS USERS
cvs -d :pserver:anoncvs@sources.redhat.com:/cvs/gsl login
     (password is ``anoncvs'')
cvs -d :pserver:anoncvs@sources.redhat.com:/cvs/gsl checkout gsl
cd gsl ; ./autogen.sh   (to create auto-generated files)
[from now on you can just do "cvs update" in the gsl directory]

# PEOPLE WHO JUST WANT TO BROWSE THE CVS REPOSITORY
point your web browser to
  http://sources.redhat.com/cgi-bin/cvsweb.cgi/gsl?cvsroot=gsl

# PEOPLE WHO JUST WANT A WORKING VERSION
grab the latest bundled release at
  ftp://sources.redhat.com/pub/gsl/

Let me know (rosalia@lanl.gov) if any of these steps don't work.  I
have tried them out on swift and they seem to work.

---------- submitting patches

The best way to send us a patch is to compile from an anonymous CVS
checkout and to use a nice cvs diff option, like 

  cvs diff -u

There is a script fixpatch.pl in gsl/scripts which will make the
resulting output suitable for piping to 'patch'.

Please test your patch before sending it, by applying it to a clean
set of files and running 'make'.

If your patch contains lines longer than 80 characters please check
that your mailer does not break these lines.  If in doubt, send the
patch as a mime attachment or uuencoded file.

Before submitting a patch you may want to search the mailing list
archive for related information. There is a search facility for the
mailing list available at,

  http://sources.redhat.com/ml/gsl-discuss/

---------- some special targets

To check for ansi compliance define a bash alias "makestrict",

    makestrict () { make $* CFLAGS="-ansi -pedantic -Werror -W -Wall -Wtraditional -Wconversion -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -fshort-enums -fno-common -Wmissing-prototypes -Wnested-externs -Dinline= -g -O4" } ;

which lets you type things like

    makestrict check

Note that total compliance to makestrict is not necessary, but it is a
useful way to locate possible problems. If you can compile your code
with

    makestrict
    makestrict CC=c++ 

then that's a good test for portability.

---------- warning about picking up old header files

When compiling the library it's important to use the local copies of
the header files, and not ones that have been installed previously in
/usr/local/include.

There can be confusing errors if the installed and local copies of the
headers get mixed up!  (In particular, some of them only show up when
doing 'make distcheck')

To put the local copies on your include path you need, in your Makefile.am,

INCLUDES = -I$(srcdir)/..

srcdir is always your working dir, and so $(srcdir)/.. is the
top-level dir where gsl_math.h and gsl_complex.h are located.

---------- fixing Makefile.am

The SUBDIRS and SUBLIBS variables have to be updated manually.

----------- Pre-release checks

* Make all internal functions static, and have all exported functions
& variables prefixed with gsl_ or GSL_. Useful command for checking this: nm -A -g -P */*.a  | perl -a -n -e 'print if $F[1] !~ /gsl_/ && $F[2] ne "U"'

* Make sure config.h is used consistently. This is especially relevant
for HAVE_INLINE use in installed headers.  

 grep config.h gsl/*.h    --- shouldn't match anything
 grep -L config.h */*.c m| grep -v _source  --- gives files not using config.h

----------- Notes on making a release

* Edit the version number in configure.in. 

* Update the NEWS file.

* Regenerate everything. make dist, unpack somewhere and then
configure, make, make check.

* Make a KNOWN-PROBLEMS file. Run scripts/mkknownproblems.sh.

* Make html docs using texi2html in cvs, 

    cd doc ; mkdir html ; cd html
    ../texi2html -verbose -split_chapter -expandinfo ~/gsl/doc/gsl-ref.texi
    cvs -d sourceware.cygnus.com:/cvs/gsl  import -m 'this is release 0.123' htdocs/ref texi2html release-0-123

* Make postscript file in the usual way

   make dvi; dvips gsl-ref.dvi ; gzip -v -9 gsl-ref.ps
   scp -v gsl-ref.ps.gz sourceware.cygnus.com:/sourceware/ftp/anonftp/pub/gsl

* Preparing a windows version (Microsoft Visual C).

   - Prepare the unix distribution tar file gsl-VERSION.tar.gz
   - Use the script,
   ./script/windists.sh gsl-VERSION.tar.gz
   to create a corresponding zip file
   - Unpack the file on Windows.  
   - In the directory doc/html run the Microsoft HTML Help Compiler 
   on the file gsl-ref.hhp to create gsl-ref.chm
   - Build workspace GSL.dsw for libgsl and libgslcblas (Release & Debug 
   configurations)
   - Build the tests GSLTESTS.dsw for Debug
   - Run MAKE_CHECK.bat (should give 0 errors)
   - Clean and Build the tests GSLTESTS.dsw for Release
   - Run MAKE_CHECK.bat (should give 0 errors)
   - Compile the file setup.iss with INNO Setup 2 (free software)
     to create a self-extracting installer.