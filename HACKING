                         Hacking on GSL

The GSL hacker needs some stuff that the end users don't:

* you must have a recent automake from
ftp://sources.redhat.com/pub/automake/

* you must have a recent autoconf from
ftp://sources.redhat.com/pub/automake/

* you must have a recent libtool from
ftp://ftp.gnu.org/gnu/libtool/

A known working combination is automake 1.7.5 autoconf 2.57 libtool 1.4.3

* you must have a recent CVS (at least 1.9)

* you must have texinfo (4.0 or later) from
ftp://ftp.gnu.org/gnu/texinfo/

Once you have this stuff, you can get the repository and start
working from your own machine.  To do the initial checkout of the
repository try (bash syntax):

# PEOPLE WITH CVS WRITE ACCESS:

export CVS_RSH=ssh
cvs -d sources.redhat.com:/cvs/gsl checkout gsl

[from now on you can just do "cvs update" in the gsl directory]

# ANONYMOUS CVS USERS

cvs -d :pserver:anoncvs@sources.redhat.com:/cvs/gsl login
     (password is ``anoncvs'')
cvs -d :pserver:anoncvs@sources.redhat.com:/cvs/gsl checkout gsl
cd gsl ; ./autogen.sh   (to create auto-generated files)
./configure --enable-maintainer-mode

[from now on you can just do "cvs update" in the gsl directory]

# PEOPLE WHO JUST WANT TO BROWSE THE CVS REPOSITORY
point your web browser to
  http://sources.redhat.com/cgi-bin/cvsweb.cgi/gsl?cvsroot=gsl

# PEOPLE WHO JUST WANT A WORKING VERSION
grab the latest bundled release at
  ftp://sources.redhat.com/pub/gsl/

Please send a message to gsl-discuss@sources.redhat.com if any of
these steps don't work.

---------- submitting patches

The best way to send us a patch is to compile from an anonymous CVS
checkout and to use a nice cvs diff option, like 

  cvs diff -u

There is a script fixpatch.pl in gsl/scripts which will make the
resulting output suitable for piping to 'patch'.

Note: Please test your patch before sending it, by applying it to a
clean set of files and running 'make'.

If your patch contains lines longer than 80 characters please check
that your mailer does not break these lines.  If in doubt, send the
patch as a mime attachment or uuencoded file.

Before submitting a patch you may want to search the mailing list
archive for related information. There is a search facility for the
mailing list available at,

  http://sources.redhat.com/ml/gsl-discuss/

---------- some special targets

To check for ansi compliance define a bash alias "makestrict",

    makestrict () { make $* CFLAGS="-ansi -pedantic -Werror -W -Wall -Wtraditional -Wconversion -Wshadow -Wpointer-arith -Wcast-qual -Wcast-align -Wwrite-strings -Wstrict-prototypes -fshort-enums -fno-common -Wmissing-prototypes -Wnested-externs -Dinline= -g -O4" } ;

which lets you type things like

    makestrict check

Note that total compliance to makestrict is not necessary, but it is a
useful way to locate possible problems. If you can compile your code
with

    makestrict
    makestrict CC=c++ 

then that's a good test for portability.

---------- warning about picking up old header files

When compiling the library it's important to use the local copies of
the header files, and not ones that have been installed previously in
/usr/local/include.

There can be confusing errors if the installed and local copies of the
headers get mixed up!  (In particular, some of them only show up when
doing 'make distcheck')

To put the local copies on your include path you need, in your Makefile.am,

INCLUDES = -I$(srcdir)/..

srcdir is always your working dir, and so $(srcdir)/.. is the
top-level dir where gsl_math.h and gsl_complex.h are located.

---------- fixing Makefile.am

The SUBDIRS and SUBLIBS variables have to be updated manually.

----------- Pre-release checks

* Make all internal functions static, and have all exported functions
& variables prefixed with gsl_ or GSL_. Useful command for checking this: nm -A -g -P */*.a  | perl -a -n -e 'print if $F[1] !~ /gsl_/ && $F[2] ne "U"'

* Make sure config.h is used consistently. This is especially relevant
for HAVE_INLINE use in installed headers.  

 grep config.h gsl/*.h    --- shouldn't match anything
 grep -L config.h */*.c m| grep -v _source  --- gives files not using config.h

----------- Notes on making a release

* Edit the version number in configure.in. 

* Update the NEWS file.

* Regenerate everything. make dist, unpack somewhere and then
configure, make, make check.  Try running make check under ulimit -v
65536 to be sure that excessive memory is not required to do the
compilation.

* Make html docs using texi2html in cvs, 

    cd doc ; mkdir html ; cd html
    ../texi2html -verbose -split_chapter -expandinfo ~/gsl/doc/gsl-ref.texi
    cvs -d sources.redhat.com:/cvs/gsl  import -m 'this is release 0.123' htdocs/ref texi2html release-0-123
    cd .. ; tar cvfz gsl-ref-html.tar.gz
    scp -v gsl-ref-html.tar.gz sources.redhat.com:/sourceware/ftp/anonftp/pub/gsl

* Make postscript file in the usual way

   make dvi; dvips gsl-ref.dvi ; gzip -v -9 gsl-ref.ps
   scp -v gsl-ref.ps.gz sources.redhat.com:/sourceware/ftp/anonftp/pub/gsl

----------------------------------------------------------------------

Notes for Volunteers
====================

1) Study the GSL Design Document at http://sources.redhat.com/gsl/
It contains the project coding standards and other useful information.

2) Make sure you are allowed to release code under the GPL. It may be
necessary to get a written disclaimer from your employer to confirm
it.  You don't need to assign copyright to us, but you need to check
that you are allowed to release GPL software -- otherwise the work
will be wasted.

3) Tell Brian Gough (bjg@network-theory.co.uk) what you plan to do
(I'll make sure nobody else starts on it).  Subscribe to the
gsl-discuss@sources.redhat.com mailing list (a digest version is
available to avoid too many messages)

4) Literature search (this is discussed in the Design document).

5) If you have good internet access register an for account on
http://savannah.gnu.org/ and upload your SSH public key so that you
can be given access to the development cvs repository.  Send your
savannah username to Brian Gough to get onto the list of developers.

Then make a per-project private branch against the current release for your
work.   For example, for a project called 'myproject' as an
extension to gsl-1.2 use:

  cvs rtag -r release-1-2 -b myproject gsl
  cvs checkout -r myproject

You can then use cvs add to add new files, etc.  

Always remember to use '-r myproject' on any checkouts so that you
don't work on the main branch, only on your own private branch!

To verify your patch you should make a new temporary directory and do,

  cvs checkout -r myproject
  cd gsl ; ./configure ; make distcheck

6) Post on gsl-discuss@sources.redhat.com periodically to keep us
updated of your progress.  Make patches available somewhere for people
to try out.  Code goes into GSL when it is stable and well-tested, and
has documentation.

----------------------------------------------------------------------

Savannah CVS Information
========================

Developer CVS Access via SSH.

Savannah is used for experimental projects, the main repository is
sources.redhat.com (as described above).

Only project developers can access the CVS tree via this method. SSH2
must be installed on your client machine.  Put the following 
in your ~/.ssh/config file:

  Host subversions.gnu.org
     Protocol 2
     ForwardX11 no

Substitute developername with the proper value.  Your savannah
password is useless for cvs.  You have to register a CVS/SSH Shared
key in the Account Maintenance page for the machine from which you run
cvs.

Source tree:

  export CVS_RSH=ssh
  cvs -z3 -ddevelopername@subversions.gnu.org:/cvsroot/gsl/ co gsl

HTML tree:

  export CVS_RSH=ssh
  cvs -z3 -ddevelopername@subversions.gnu.org:/webcvs co software/gsl
