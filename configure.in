dnl Process this file with autoconf to produce a configure script.
AC_INIT(gsl_math.h)
AM_INIT_AUTOMAKE(gsl, 0.4.1)
AM_CONFIG_HEADER(config.h)

dnl things required by automake
AC_ARG_PROGRAM
AC_PROG_MAKE_SET

dnl Check for which system.
AC_CANONICAL_HOST

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_CHECK_TOOL(RANLIB, ranlib, :)
AC_CHECK_TOOL(AR, ar, :)
AC_PROG_RANLIB
#AM_PROG_LIBTOOL

dnl Check compiler features
AC_TYPE_SIZE_T
AC_C_CONST
AC_C_INLINE

if test "$ac_cv_c_inline" != no ; then
  AC_DEFINE(HAVE_INLINE,1)
  AC_SUBST(HAVE_INLINE)
fi

dnl some magic to get a full path to the working directory
full_top_srcdir=`cd $srcdir; pwd`
full_top_builddir=`pwd`
echo srcdir is $srcdir
echo full_top_srcdir is $full_top_srcdir
echo full_top_builddir is $full_top_builddir
AC_SUBST(full_top_srcdir)
AC_SUBST(full_top_builddir)

dnl Checks for header files.

dnl Checks for typedefs, structures, and compiler characteristics.

dnl Checks for library functions.
AC_CHECK_LIB(m, main)
AC_CHECK_FUNCS(hypot)
AC_CHECK_FUNCS(isinf)
dnl AC_FUNC_ALLOCA
AC_FUNC_VPRINTF

dnl strcasecmp, strerror, xmalloc, xrealloc, probably others should be added.
dnl removed strerror from this list, it's hardcoded in the err/ directory
dnl Any functions which appear in this list of functions should be provided
dnl in the utils/ directory
AC_REPLACE_FUNCS(memcpy memmove strdup strtol strtoul)


AC_CHECK_FUNCS(clock)

AC_CACHE_CHECK(for CLOCKS_PER_SEC,
ac_cv_decl_clocks_per_sec,
AC_EGREP_CPP(yes,
[
#include <time.h>
#ifdef CLOCKS_PER_SEC
yes
#endif
], 
ac_cv_decl_clocks_per_sec=yes,
ac_cv_decl_clocks_per_sec=no)
)

if test "$ac_cv_decl_clocks_per_sec" = yes ; then
  AC_DEFINE(HAVE_CLOCKS_PER_SEC)
else
AC_MSG_CHECKING(whether CLOCKS_PER_SEC is known for $host_os)
  case "$host" in
    *-*-sunos4.*) 
        AC_DEFINE(HAVE_GUESSED_CLOCKS_PER_SEC,1000000)
	AC_MSG_RESULT([yes (microseconds)]) 
        ;;
    *-*-nextstep*) 
	dnl 
	dnl Nextstep3 defines CLK_TCK 64 in /usr/include/ansi/time.h,
	dnl which seems to agree with observation of clock().
	dnl 
        AC_DEFINE(HAVE_GUESSED_CLOCKS_PER_SEC,64)
	AC_MSG_RESULT([yes (15.625 milliseconds)]) 
        ;;
    *) 
        AC_DEFINE(HAVE_GUESSED_CLOCKS_PER_SEC,1000000)
        AC_MSG_RESULT([no, assuming microseconds]) 
        ;;
  esac
fi

AC_CHECK_FUNCS(rand)

AC_CACHE_CHECK(for RAND_MAX,
ac_cv_decl_rand_max,
AC_EGREP_CPP(yes,
[
#include <stdlib.h>
#include <math.h>
#ifdef RAND_MAX
yes
#endif
],
ac_cv_decl_rand_max=yes,
ac_cv_decl_rand_max=no)
)

if test "$ac_cv_decl_rand_max" = yes ; then
  AC_DEFINE(HAVE_RAND_MAX)
else
AC_MSG_CHECKING(whether RAND_MAX is known for $host_os)
  case "$host" in
    *-*-sunos4.*) 
        AC_DEFINE(HAVE_GUESSED_RAND_MAX,2147483647)
	AC_MSG_RESULT([yes (2^{31}-1)]) 
        ;;
    *) 
        AC_DEFINE(HAVE_GUESSED_RAND_MAX,32767)
        AC_MSG_RESULT([no, assuming 32767]) 
        ;;
  esac
fi


AC_CACHE_CHECK(for EXIT_SUCCESS and EXIT_FAILURE,
ac_cv_decl_exit_success_and_failure,
AC_EGREP_CPP(yes,
[
#include <stdlib.h>
#ifdef EXIT_SUCCESS
yes
#endif
], 
ac_cv_decl_exit_success_and_failure=yes,
ac_cv_decl_exit_success_and_failure=no)
)

if test "$ac_cv_decl_exit_success_and_failure" = yes ; then
  AC_DEFINE(HAVE_EXIT_SUCCESS_AND_FAILURE)
fi ;

AC_MSG_CHECKING(for IEEE compilation options)
case "$host" in
    alpha*-*-*) 
	CFLAGS="-mieee $CFLAGS"
	AC_MSG_RESULT([adding -mieee])
        ;;
    *)
        AC_MSG_RESULT([none])
        ;;
esac

AC_MSG_CHECKING(for IEEE arithmetic interface type)
case "$host" in
    *-*-linux*) 
	AC_DEFINE(HAVE_LINUX_IEEE_INTERFACE)
	AC_MSG_RESULT([linux]) 
        ;;
    *-*-sunos4*) 
        AC_DEFINE(HAVE_SUNOS4_IEEE_INTERFACE)
	AC_MSG_RESULT([sunos4]) 
        ;;
    *-*-solaris*) 
        AC_DEFINE(HAVE_SOLARIS_IEEE_INTERFACE)
        AC_MSG_RESULT([solaris]) 
        ;;
    *-*-hpux*) 
        AC_DEFINE(HAVE_HPUX_IEEE_INTERFACE)
        AC_MSG_RESULT([hpux]) 
        ;;
    *)
        AC_MSG_RESULT([unknown])
        ;;
esac

dnl AC_ARG_ENABLE(exceptions,[exceptions],AC_PROG_CXX)

dnl
dnl FIXME: on Solaris we will need a prototype for hypot, since it is 
dnl missing from their math.h according to Jerry.
dnl
dnl extern double hypot(double, double);
dnl

AC_MSG_CHECKING([whether printf/scanf works with long double])
AC_TRY_RUN([
#include <stdlib.h>
#include <stdio.h>
int main (void) 
{ 
const char * s = "5678"; long double x = 1.234 ; 
fprintf(stderr,"%Lg\n",x) ; 
sscanf(s, "%Lg", &x);
if (x == 5678) {exit (0);} else {exit(1); };
}],
ac_cv_func_printf_longdouble=yes, 
ac_cv_func_printf_longdouble=no, 
ac_cv_func_printf_longdouble=no) 

if test $ac_cv_func_printf_longdouble = yes; then
  AC_DEFINE(HAVE_PRINTF_LONGDOUBLE)
  AC_MSG_RESULT(yes)
else
  AC_MSG_RESULT(no)
fi

dnl
AC_OUTPUT(err/Makefile sys/Makefile utils/Makefile ieee-utils/Makefile fft/Makefile specfunc/Makefile statistics/Makefile sum/Makefile roots/Makefile rng/Makefile randist/Makefile siman/Makefile integration/Makefile interpolation/Makefile doc/Makefile vector/Makefile matrix/Makefile histogram/Makefile monte/Makefile blas/Makefile linalg/Makefile Makefile)
