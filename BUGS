This file is the GSL bug tracking system.  The CVS version of this
file should be kept up-to-date.

----------------------------------------------------------------------
BUG#1 -- gsl_sf_hyperg_2F1_e fails for some arguments 

From: keith.briggs@bt.com
Subject: gsl_sf_hyperg_2F1 bug report
Date: Thu, 31 Jan 2002 12:30:04 -0000

gsl_sf_hyperg_2F1_e fails with arguments (1,13,14,0.999227196008978,&r).
It should return 53.4645... .

#include <gsl/gsl_sf.h>
#include <stdio.h>

int main (void)
{
  gsl_sf_result r;
  gsl_sf_hyperg_2F1_e (1,13,14,0.999227196008978,&r);
  printf("r = %g %g\n", r.val, r.err);
}

NOTES: The program overflows the maximum number of iterations in
gsl_sf_hyperg_2F1, due to the presence of a nearby singularity at
(c=a+b,x=1) so the sum is slowly convergent.

The exact result is 53.46451441879150950530608621 as calculated by
gp-pari using sumpos(k=0,gamma(a+k)*gamma(b+k)*gamma(c)*gamma(1)/
(gamma(c+k)*gamma(1+k)*gamma(a)*gamma(b))*x^k)

The code needs to be extended to handle the case c=a+b. This is the
main problem. The case c=a+b is special and needs to be computed
differently.  There is a special formula given for it in Abramowitz &
Stegun 15.3.10

As reported by Lee Warren <warren@atom.chem.utk.edu> another set of
arguments which fail are:

#include <gsl/gsl_sf.h>
#include <stdio.h>

int main (void)
{
  gsl_sf_result r;
  gsl_sf_hyperg_2F1_e (-1, -1, -0.5, 1.5, &r);
  printf("r = %g %g\n", r.val, r.err);
}

The correct value is -2.

----------------------------------------------------------------------
BUG#10 -- gsl_sf_fermi_dirac_int error estimates 

Some of the error estimates on gsl_sf_fermi_dirac_int are much too
large.  The value itself is pretty accurate.

In the test_sf_result you need to work in something like

  if(r.err > 1.0e5 * (fabs(r.val - val) + GSL_DBL_EPSILON * fabs(val)))
        s |= TEST_SF_INCONS;   /* error estimate too large */

in addition to the existing

   if(fabs(val - r.val) > 2.0*r.err) s |= TEST_SF_INCONS;

to catch those.  

#include<stdio.h>
#include<gsl/gsl_errno.h>
#include<gsl/gsl_sf.h>

int main() {
  gsl_sf_result r;
  int status;

  status = gsl_sf_fermi_dirac_int_e (9, 500.0, &r);
  printf("FD_9(500) = %.18e +- %.18e\n", r.val, r.err);
}

result,

FD_9(500) = 2.692738498426942915e+20 +- 2.629627439870118259e+47

Exact     = 2.692738498...e+20

----------------------------------------------------------------------
BUG#14 -- qagil

The extrapolation used in qags gives negative results when integrating
the small tails of probability distributions using qagil, even though
each individual term in the sequence is positive and increasing (!).
This is a feature of the original quadpack and appears to be due to
the extrapolation algorithm, which should probably be tweaked to avoid
this undesirable behavior.

----------------------------------------------------------------------
BUG#18 -- R250 discrepancy, and initialisation in R250 / GSFR4

This bug report is correct. The original paper has the same discrepancy.

From: Andreas Schneider <1@c07.de>
To: bug-gsl@gnu.org
Subject: [Bug-gsl] Wrong algorithm in gsl_rng_r250
Date: Sun, 25 Apr 2004 13:23:39 +0200

The documentation claims that gsl_rng_r250 does

   x_n = x_{n-103} ^ x_{n-250},

but actually the implementation does

   x_n = x_{n-147} ^ x_{n-250}.

This error seems to be very common. It must have been introduced long time ago.

I fed some data from both variants into Marsaglia's diehard and found that the 
documented version is better in most tests. Thus the error is probably in the 
implementation and the documentation is right.

The orthogonalisation routine for R250 is different from the original
paper (it should be k=7*i+3 instead of k=7+i*3)

Also in the initialisation of GSFR, the initial lower 6695 indices
never participate in calculations of subsequent random numbers, so the
"orthogonalisation" has no effect.  Check whether this also affects
R250.

----------------------------------------------------------------------
BUG#20 -- seg fault from gsl_sf_legendre_sphPlm_e (underflow)

In the following bit of code, the first call works, but the second call 
fails with an internal underflow gsl: exp.c:541: ERROR: underflow

#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <gsl/gsl_sf_legendre.h>

int main() {
  gsl_sf_result y;
  gsl_sf_legendre_sphPlm_e(140,135,1,&y);
  gsl_sf_legendre_sphPlm_e(140,135,0.99998689456491752,&y);
  return(0);
}

Reported by "Kevin M. Huffenberger" <khuffenb@Princeton.EDU>
----------------------------------------------------------------------
BUG#26 - underflow in gsl_sf_legendre_sphPlm_array

there is a potential underflow in legendre_poly.c in the lines

      lnpre = -0.25*M_LNPI + 0.5 * (lnpoch.val + m*lncirc.val);
      y_mm   = sqrt((2.0+1.0/m)/(4.0*M_PI)) * sgn * exp(lnpre);

for large negative values of lnpre.

  #include <math.h>
  #include <stdio.h>
  #include <gsl/gsl_sf.h>

  int main (void) {
   int lmax=2000, l=1997, m=796;
   double Xlm[2005];
   double cx = 0.921;
   int status = gsl_sf_legendre_sphPlm_array(lmax,m,cx,Xlm);
   double v = Xlm[l-m];
   printf("cx= %.5e l=%d m=%d  Plm=%.18e status=%d\n",cx,l,m,v, status);
  }

----------------------------------------------------------------------
BUG#27 - handling of zero leading coefficients in poly/*solve routines

The poly/solve_ and poly/zsolve_ routines should handle the case of
leading coefficients being zero more gracefully.  Currently the
leading coefficient is assumed to be non-zero.

----------------------------------------------------------------------
BUG#28 - underflow for small parameters in gsl_ran_gamma

The function gsl_ran_gamma does not handle the case of small
parameters well, a<<1, returning 0 (probably via underflow).

#include <stdio.h>
#include <gsl/gsl_rng.h>
#include <gsl/gsl_randist.h>

int main() {
  gsl_rng *rng;
  double x;
  gsl_rng_env_setup();
  rng = gsl_rng_alloc (gsl_rng_default);
  x = gsl_ran_gamma(rng, 1e-3, 1.0);
  printf("%.18e\n", x);
}
----------------------------------------------------------------------
BUG#29 - missing documentation for gsl_sf_legendre_Pl_deriv_array etc

There is no documentation for the _deriv_ functions in
specfunc/legendre_poly.c.  They are tested and part of the public API
so they should be documented.

----------------------------------------------------------------------
BUG#30 - incorrect result from gsl_sf_elljac_e

The function gsl_sf_elljac_e returns an incorrect result in the first
case below, due propagated inaccuracies from cancellation error.  The
correct result should be dn(3K)=sqrt(2) but the returned result is
1.0.

#include <stdio.h>
#include <math.h>
#include <gsl/gsl_math.h>
#include <gsl/gsl_sf_elljac.h>
#include <gsl/gsl_sf_ellint.h>
     
int main (void)
{
  double m = 0.5;
  double phi = M_PI_2;
  double sn;
  double cn;
  double dn1,dn2;
  double K;
  int ignore;
  
  K = gsl_sf_ellint_F(M_PI_2,sqrt(m), GSL_PREC_DOUBLE);
  ignore = gsl_sf_elljac_e(3*K, m, &sn, &cn, &dn1);
  ignore = gsl_sf_elljac_e(3*K+0.00000001, m, &sn, &cn, &dn2);
  
  printf("%.18e\n", dn1);
  printf("%.18e\n", dn2);
  return 0;
}
----------------------------------------------------------------------
BUG#34 -- gsl_sf_bessel_yl_array should handle lmax=0

From: Kort Travis <travis@physik.uni-leipzig.de>
Subject:parameter check typo in specfunc/bessel_y.c
Date: Wed, 30 Mar 2005 09:30:02 +0200

GSL version: 1.6

filename: specfunc/bessel_y.c

description:  This is a "typo" or design inconsistency, depending on how you look at it.

If lmax == 0, the following function has a "domain error".  

Perhaps I'm missing something, but this behavior is inconsistent with
the behavior of "gsl_sf_bessel_jl_array" and there seems no valid
numerical reason for this error (i.e. y0 exists and is well defined;
two-dimensional arrays where one of the dimensions is "1" are well
defined and have clearly predicable, cross-platform behavior; etc...).

----------------------------------------------------------------------
BUG#37 -- improve handling of zero singular values in multifit linear

[The handling of zero singular values could be improved by taking a
user-specified tolerance or splitting this function in two to expose
the intermediate results - BJG].

From: Richard Mott <rmott@well.ox.ac.uk>
To: bug-gsl@gnu.org,  rmott@well.ox.ac.uk
Subject: [Bug-gsl] bug in gsl_multifit_wlinear
Date: Fri, 20 May 2005 14:19:27 +0100

There is a bug in gsl_multifit_wlinear (and presumably in 
gsl_multifit_linear too). The problem manifests itself when the design 
matrix X is not of full rank. The documentation says that this case is 
handled correctly in the singular value decompostion by setting the tiny 
SVD components to 0. In fact his doesn't happen. Instead the function 
returns a huge and non-sensical chisq value. The block of code in 
question is

for (j = 0; j < p; j++)
        {
          gsl_vector_view column = gsl_matrix_column (QSI, j);
          double alpha = gsl_vector_get (S, j);
          if (alpha != 0)
            alpha = 1.0 / alpha;
          gsl_vector_scale (&column.vector, alpha);
        }

and needs to be changed to something like

int rank = 0;
for (j = 0; j < p; j++)
        {
          gsl_vector_view column = gsl_matrix_column (QSI, j);
          double alpha = gsl_vector_get (S, j);
          if (alpha >1.0e-7) {
                rank ++;
                alpha = 1.0 / alpha;
        else {
          alpha = 0.0;
          gsl_vector_set(S,j,0.0);
        }
          gsl_vector_scale (&column.vector, alpha);
        }

Finally, in the case of when the rank of the design matric is not full, 
it is useful to return the true rank (given by the number of SVD 
components that exceed the test >1.0e-7)

My choice of a cutoff of 1.0e-7 is farily arbitrary, but seems to work
----------------------------------------------------------------------
BUG#38 --  fix edge cases in gsl_sf_bessel_il_scaled(_array)

From: Roman Schmied <rschmied@Princeton.EDU>
To: bug-gsl@gnu.org
Subject: [Bug-gsl] bug in scaled modified spherical Bessel functions of
	first kind
Date: Mon, 23 May 2005 12:03:20 -0400

GSL version: 1.6
hardware/OS: Mac OS 10.4.1 on a PowerPC G4 (1.2)
compiler: powerpc-apple-darwin8-gcc-4.0.0 (GCC) 4.0.0 20041026 (Apple  
Computer, Inc. build 4061)
compiler options: none other than "-lgsl"

The scaled modified spherical Bessel functions of first kind return  
wrong values for x=0. The correct results are 1 for L=0 and 0 for  
L>=1. In particular:

- gsl_sf_bessel_il_scaled(L, 0) returns zero for any value of L, even  
for L=0 where it should return 1.  [CONFIRMED A&S 10.2.13 - BJG]

- gsl_sf_bessel_il_scaled_array(Lmax, 0, y) returns "nan" values  
instead of {1,0,0,0,0,...} [CONFIRMED - A&S 10.2.5 - BJG]

example code: (compiled with "gcc -lgsl BesselTest.c")

#include <gsl/gsl_sf_bessel.h>
#include <stdio.h>

int main() {
   double y[11];
   int i;
   printf("should be equal to 1: %g\n", gsl_sf_bessel_il_scaled(0, 0));
   gsl_sf_bessel_il_scaled_array(10, 0, y);
   printf("should be equal to 1: %g\n", y[0]);
   for(i=1; i<=10; i++)
     printf("should be equal to 0: %g\n", y[i]);
   return 0;
}


----------------------------------------------------------------------
Last assigned bug number = 39
