# Makefile.in generated automatically by automake 1.2a from Makefile.am

# Copyright (C) 1994, 1995, 1996, 1997 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SHELL = /bin/sh

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = true
PRE_INSTALL = true
POST_INSTALL = true
NORMAL_UNINSTALL = true
PRE_UNINSTALL = true
POST_UNINSTALL = true
host_alias = @host_alias@
host_triplet = @host@
CC = @CC@
CPP = @CPP@
LN_S = @LN_S@
MAKEINFO = @MAKEINFO@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
VERSION = @VERSION@

ALLRAN= taus mrg cmrg uni uni32 zuf rand
FAVORITERAN= taus

INCLUDES = -I$(srcdir)/../err -I$(srcdir)/../utils
include_HEADERS= gsl_ran.h gsl_ran_switch.h

test_switch_SOURCES= test-switch.c switch.c 

EXTRA_DIST= xxx-switch.xc makeswitch xxx-gen.xc xxx-state.xc \
	makeam Makefile.ami $(BUILT_SOURCES)

CLEANFILES= tmp.out tmp.in

noinst_PROGRAMS= taus test-taus bench-taus mrg test-mrg bench-mrg cmrg test-cmrg bench-cmrg uni test-uni bench-uni uni32 test-uni32 bench-uni32 zuf test-zuf bench-zuf rand test-rand bench-rand test-switch 

TESTS = test-taus test-mrg test-cmrg test-uni test-uni32 test-zuf test-rand 

lib_LIBRARIES= libgslrandom.a libgslrantaus.a libgslranmrg.a libgslrancmrg.a libgslranuni.a libgslranuni32.a libgslranzuf.a libgslranrand.a 

libgslrantaus_a_SOURCES= taus.c taus-gen.c 
libgslranmrg_a_SOURCES= mrg.c mrg-gen.c 
libgslrancmrg_a_SOURCES= cmrg.c cmrg-gen.c 
libgslranuni_a_SOURCES= uni.c uni-gen.c 
libgslranuni32_a_SOURCES= uni32.c uni32-gen.c 
libgslranzuf_a_SOURCES= zuf.c zuf-gen.c 
libgslranrand_a_SOURCES= rand.c rand-gen.c 

libgslrandom_a_SOURCES= switch.c taus.c mrg.c cmrg.c uni.c uni32.c zuf.c rand.c 

test_switch_DEPENDENCIES= gsl_ran_switch.h taus.h taus.o mrg.h mrg.o cmrg.h cmrg.o uni.h uni.o uni32.h uni32.o zuf.h zuf.o rand.h rand.o 
test_switch_LDADD= taus.o mrg.o cmrg.o uni.o uni32.o zuf.o rand.o 
taus_SOURCES=             ran.c taus.c
taus_DEPENDENCIES=        taus-state.c taus.h taus-gen.o
taus_LDADD=               taus-gen.o
test_taus_SOURCES=        testran.c
test_taus_DEPENDENCIES=   taus.o taus-gen.o taus.h
test_taus_LDADD=          taus.o taus-gen.o ../err/libgsltest.a ../utils/libutils.a
bench_taus_SOURCES=       benchran.c
bench_taus_DEPENDENCIES=  taus.o taus-gen.o taus.h
bench_taus_LDADD=         taus.o taus-gen.o
mrg_SOURCES=             ran.c mrg.c
mrg_DEPENDENCIES=        mrg-state.c mrg.h mrg-gen.o
mrg_LDADD=               mrg-gen.o
test_mrg_SOURCES=        testran.c
test_mrg_DEPENDENCIES=   mrg.o mrg-gen.o mrg.h
test_mrg_LDADD=          mrg.o mrg-gen.o ../err/libgsltest.a ../utils/libutils.a
bench_mrg_SOURCES=       benchran.c
bench_mrg_DEPENDENCIES=  mrg.o mrg-gen.o mrg.h
bench_mrg_LDADD=         mrg.o mrg-gen.o
cmrg_SOURCES=             ran.c cmrg.c
cmrg_DEPENDENCIES=        cmrg-state.c cmrg.h cmrg-gen.o
cmrg_LDADD=               cmrg-gen.o
test_cmrg_SOURCES=        testran.c
test_cmrg_DEPENDENCIES=   cmrg.o cmrg-gen.o cmrg.h
test_cmrg_LDADD=          cmrg.o cmrg-gen.o ../err/libgsltest.a ../utils/libutils.a
bench_cmrg_SOURCES=       benchran.c
bench_cmrg_DEPENDENCIES=  cmrg.o cmrg-gen.o cmrg.h
bench_cmrg_LDADD=         cmrg.o cmrg-gen.o
uni_SOURCES=             ran.c uni.c
uni_DEPENDENCIES=        uni-state.c uni.h uni-gen.o
uni_LDADD=               uni-gen.o
test_uni_SOURCES=        testran.c
test_uni_DEPENDENCIES=   uni.o uni-gen.o uni.h
test_uni_LDADD=          uni.o uni-gen.o ../err/libgsltest.a ../utils/libutils.a
bench_uni_SOURCES=       benchran.c
bench_uni_DEPENDENCIES=  uni.o uni-gen.o uni.h
bench_uni_LDADD=         uni.o uni-gen.o
uni32_SOURCES=             ran.c uni32.c
uni32_DEPENDENCIES=        uni32-state.c uni32.h uni32-gen.o
uni32_LDADD=               uni32-gen.o
test_uni32_SOURCES=        testran.c
test_uni32_DEPENDENCIES=   uni32.o uni32-gen.o uni32.h
test_uni32_LDADD=          uni32.o uni32-gen.o ../err/libgsltest.a ../utils/libutils.a
bench_uni32_SOURCES=       benchran.c
bench_uni32_DEPENDENCIES=  uni32.o uni32-gen.o uni32.h
bench_uni32_LDADD=         uni32.o uni32-gen.o
zuf_SOURCES=             ran.c zuf.c
zuf_DEPENDENCIES=        zuf-state.c zuf.h zuf-gen.o
zuf_LDADD=               zuf-gen.o
test_zuf_SOURCES=        testran.c
test_zuf_DEPENDENCIES=   zuf.o zuf-gen.o zuf.h
test_zuf_LDADD=          zuf.o zuf-gen.o ../err/libgsltest.a ../utils/libutils.a
bench_zuf_SOURCES=       benchran.c
bench_zuf_DEPENDENCIES=  zuf.o zuf-gen.o zuf.h
bench_zuf_LDADD=         zuf.o zuf-gen.o
rand_SOURCES=             ran.c rand.c
rand_DEPENDENCIES=        rand-state.c rand.h rand-gen.o
rand_LDADD=               rand-gen.o
test_rand_SOURCES=        testran.c
test_rand_DEPENDENCIES=   rand.o rand-gen.o rand.h
test_rand_LDADD=          rand.o rand-gen.o ../err/libgsltest.a ../utils/libutils.a
bench_rand_SOURCES=       benchran.c
bench_rand_DEPENDENCIES=  rand.o rand-gen.o rand.h
bench_rand_LDADD=         rand.o rand-gen.o

BUILT_SOURCES= taus.h taus-state.c taus-gen.c mrg.h mrg-state.c mrg-gen.c cmrg.h cmrg-state.c cmrg-gen.c uni.h uni-state.c uni-gen.c uni32.h uni32-state.c uni32-gen.c zuf.h zuf-state.c zuf-gen.c rand.h rand-state.c rand-gen.c gsl_ran_switch.h switch.c
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES = 
LIBRARIES =  $(lib_LIBRARIES)


DEFS = @DEFS@ -I. -I$(srcdir) -I..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
libgslrandom_a_LIBADD = 
libgslrandom_a_OBJECTS =  switch.o taus.o mrg.o cmrg.o uni.o uni32.o \
zuf.o rand.o
libgslrantaus_a_LIBADD = 
libgslrantaus_a_OBJECTS =  taus.o taus-gen.o
libgslranmrg_a_LIBADD = 
libgslranmrg_a_OBJECTS =  mrg.o mrg-gen.o
libgslrancmrg_a_LIBADD = 
libgslrancmrg_a_OBJECTS =  cmrg.o cmrg-gen.o
libgslranuni_a_LIBADD = 
libgslranuni_a_OBJECTS =  uni.o uni-gen.o
libgslranuni32_a_LIBADD = 
libgslranuni32_a_OBJECTS =  uni32.o uni32-gen.o
libgslranzuf_a_LIBADD = 
libgslranzuf_a_OBJECTS =  zuf.o zuf-gen.o
libgslranrand_a_LIBADD = 
libgslranrand_a_OBJECTS =  rand.o rand-gen.o
AR = ar
PROGRAMS =  $(noinst_PROGRAMS)

taus_OBJECTS =  ran.o taus.o
taus_LDFLAGS = 
test_taus_OBJECTS =  testran.o
test_taus_LDFLAGS = 
bench_taus_OBJECTS =  benchran.o
bench_taus_LDFLAGS = 
mrg_OBJECTS =  ran.o mrg.o
mrg_LDFLAGS = 
test_mrg_OBJECTS =  testran.o
test_mrg_LDFLAGS = 
bench_mrg_OBJECTS =  benchran.o
bench_mrg_LDFLAGS = 
cmrg_OBJECTS =  ran.o cmrg.o
cmrg_LDFLAGS = 
test_cmrg_OBJECTS =  testran.o
test_cmrg_LDFLAGS = 
bench_cmrg_OBJECTS =  benchran.o
bench_cmrg_LDFLAGS = 
uni_OBJECTS =  ran.o uni.o
uni_LDFLAGS = 
test_uni_OBJECTS =  testran.o
test_uni_LDFLAGS = 
bench_uni_OBJECTS =  benchran.o
bench_uni_LDFLAGS = 
uni32_OBJECTS =  ran.o uni32.o
uni32_LDFLAGS = 
test_uni32_OBJECTS =  testran.o
test_uni32_LDFLAGS = 
bench_uni32_OBJECTS =  benchran.o
bench_uni32_LDFLAGS = 
zuf_OBJECTS =  ran.o zuf.o
zuf_LDFLAGS = 
test_zuf_OBJECTS =  testran.o
test_zuf_LDFLAGS = 
bench_zuf_OBJECTS =  benchran.o
bench_zuf_LDFLAGS = 
rand_OBJECTS =  ran.o rand.o
rand_LDFLAGS = 
test_rand_OBJECTS =  testran.o
test_rand_LDFLAGS = 
bench_rand_OBJECTS =  benchran.o
bench_rand_LDFLAGS = 
test_switch_OBJECTS =  test-switch.o switch.o
test_switch_LDFLAGS = 
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LINK = $(CC) $(CFLAGS) $(LDFLAGS) -o $@
HEADERS =  $(include_HEADERS)

DIST_COMMON =  Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = tar
GZIP = --best
DEP_FILES =  .deps/benchran.P .deps/cmrg-gen.P .deps/cmrg-state.P \
.deps/cmrg.P .deps/mrg-gen.P .deps/mrg-state.P .deps/mrg.P .deps/ran.P \
.deps/rand-gen.P .deps/rand-state.P .deps/rand.P .deps/switch.P \
.deps/taus-gen.P .deps/taus-state.P .deps/taus.P .deps/test-switch.P \
.deps/testran.P .deps/uni-gen.P .deps/uni-state.P .deps/uni.P \
.deps/uni32-gen.P .deps/uni32-state.P .deps/uni32.P .deps/zuf-gen.P \
.deps/zuf-state.P .deps/zuf.P
SOURCES = $(libgslrandom_a_SOURCES) $(libgslrantaus_a_SOURCES) $(libgslranmrg_a_SOURCES) $(libgslrancmrg_a_SOURCES) $(libgslranuni_a_SOURCES) $(libgslranuni32_a_SOURCES) $(libgslranzuf_a_SOURCES) $(libgslranrand_a_SOURCES) $(taus_SOURCES) $(test_taus_SOURCES) $(bench_taus_SOURCES) $(mrg_SOURCES) $(test_mrg_SOURCES) $(bench_mrg_SOURCES) $(cmrg_SOURCES) $(test_cmrg_SOURCES) $(bench_cmrg_SOURCES) $(uni_SOURCES) $(test_uni_SOURCES) $(bench_uni_SOURCES) $(uni32_SOURCES) $(test_uni32_SOURCES) $(bench_uni32_SOURCES) $(zuf_SOURCES) $(test_zuf_SOURCES) $(bench_zuf_SOURCES) $(rand_SOURCES) $(test_rand_SOURCES) $(bench_rand_SOURCES) $(test_switch_SOURCES)
OBJECTS = $(libgslrandom_a_OBJECTS) $(libgslrantaus_a_OBJECTS) $(libgslranmrg_a_OBJECTS) $(libgslrancmrg_a_OBJECTS) $(libgslranuni_a_OBJECTS) $(libgslranuni32_a_OBJECTS) $(libgslranzuf_a_OBJECTS) $(libgslranrand_a_OBJECTS) $(taus_OBJECTS) $(test_taus_OBJECTS) $(bench_taus_OBJECTS) $(mrg_OBJECTS) $(test_mrg_OBJECTS) $(bench_mrg_OBJECTS) $(cmrg_OBJECTS) $(test_cmrg_OBJECTS) $(bench_cmrg_OBJECTS) $(uni_OBJECTS) $(test_uni_OBJECTS) $(bench_uni_OBJECTS) $(uni32_OBJECTS) $(test_uni32_OBJECTS) $(bench_uni32_OBJECTS) $(zuf_OBJECTS) $(test_zuf_OBJECTS) $(bench_zuf_OBJECTS) $(rand_OBJECTS) $(test_rand_OBJECTS) $(bench_rand_OBJECTS) $(test_switch_OBJECTS)

default: all

.SUFFIXES:
.SUFFIXES: .c .o
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu random/Makefile

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-libLIBRARIES:

clean-libLIBRARIES:
	test -z "$(lib_LIBRARIES)" || rm -f $(lib_LIBRARIES)

distclean-libLIBRARIES:

maintainer-clean-libLIBRARIES:

install-libLIBRARIES: $(lib_LIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(libdir)
	list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(INSTALL_DATA) $$p $(libdir)/$$p"; \
	    $(INSTALL_DATA) $$p $(libdir)/$$p; \
	  else :; fi; \
	done
	@$(POST_INSTALL)
	@list='$(lib_LIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(RANLIB) $(libdir)/$$p"; \
	    $(RANLIB) $(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	$(NORMAL_UNINSTALL)
	list='$(lib_LIBRARIES)'; for p in $$list; do \
	  rm -f $(libdir)/$$p; \
	done

.c.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	rm -f *.o core

clean-compile:

distclean-compile:
	rm -f *.tab.c

maintainer-clean-compile:

libgslrandom.a: $(libgslrandom_a_OBJECTS) $(libgslrandom_a_DEPENDENCIES)
	rm -f libgslrandom.a
	$(AR) cru libgslrandom.a $(libgslrandom_a_OBJECTS) $(libgslrandom_a_LIBADD)
	$(RANLIB) libgslrandom.a

libgslrantaus.a: $(libgslrantaus_a_OBJECTS) $(libgslrantaus_a_DEPENDENCIES)
	rm -f libgslrantaus.a
	$(AR) cru libgslrantaus.a $(libgslrantaus_a_OBJECTS) $(libgslrantaus_a_LIBADD)
	$(RANLIB) libgslrantaus.a

libgslranmrg.a: $(libgslranmrg_a_OBJECTS) $(libgslranmrg_a_DEPENDENCIES)
	rm -f libgslranmrg.a
	$(AR) cru libgslranmrg.a $(libgslranmrg_a_OBJECTS) $(libgslranmrg_a_LIBADD)
	$(RANLIB) libgslranmrg.a

libgslrancmrg.a: $(libgslrancmrg_a_OBJECTS) $(libgslrancmrg_a_DEPENDENCIES)
	rm -f libgslrancmrg.a
	$(AR) cru libgslrancmrg.a $(libgslrancmrg_a_OBJECTS) $(libgslrancmrg_a_LIBADD)
	$(RANLIB) libgslrancmrg.a

libgslranuni.a: $(libgslranuni_a_OBJECTS) $(libgslranuni_a_DEPENDENCIES)
	rm -f libgslranuni.a
	$(AR) cru libgslranuni.a $(libgslranuni_a_OBJECTS) $(libgslranuni_a_LIBADD)
	$(RANLIB) libgslranuni.a

libgslranuni32.a: $(libgslranuni32_a_OBJECTS) $(libgslranuni32_a_DEPENDENCIES)
	rm -f libgslranuni32.a
	$(AR) cru libgslranuni32.a $(libgslranuni32_a_OBJECTS) $(libgslranuni32_a_LIBADD)
	$(RANLIB) libgslranuni32.a

libgslranzuf.a: $(libgslranzuf_a_OBJECTS) $(libgslranzuf_a_DEPENDENCIES)
	rm -f libgslranzuf.a
	$(AR) cru libgslranzuf.a $(libgslranzuf_a_OBJECTS) $(libgslranzuf_a_LIBADD)
	$(RANLIB) libgslranzuf.a

libgslranrand.a: $(libgslranrand_a_OBJECTS) $(libgslranrand_a_DEPENDENCIES)
	rm -f libgslranrand.a
	$(AR) cru libgslranrand.a $(libgslranrand_a_OBJECTS) $(libgslranrand_a_LIBADD)
	$(RANLIB) libgslranrand.a

mostlyclean-noinstPROGRAMS:

clean-noinstPROGRAMS:
	test -z "$(noinst_PROGRAMS)" || rm -f $(noinst_PROGRAMS)

distclean-noinstPROGRAMS:

maintainer-clean-noinstPROGRAMS:

taus: $(taus_OBJECTS) $(taus_DEPENDENCIES)
	@rm -f taus
	$(LINK) $(taus_LDFLAGS) $(taus_OBJECTS) $(taus_LDADD) $(LIBS)

test-taus: $(test_taus_OBJECTS) $(test_taus_DEPENDENCIES)
	@rm -f test-taus
	$(LINK) $(test_taus_LDFLAGS) $(test_taus_OBJECTS) $(test_taus_LDADD) $(LIBS)

bench-taus: $(bench_taus_OBJECTS) $(bench_taus_DEPENDENCIES)
	@rm -f bench-taus
	$(LINK) $(bench_taus_LDFLAGS) $(bench_taus_OBJECTS) $(bench_taus_LDADD) $(LIBS)

mrg: $(mrg_OBJECTS) $(mrg_DEPENDENCIES)
	@rm -f mrg
	$(LINK) $(mrg_LDFLAGS) $(mrg_OBJECTS) $(mrg_LDADD) $(LIBS)

test-mrg: $(test_mrg_OBJECTS) $(test_mrg_DEPENDENCIES)
	@rm -f test-mrg
	$(LINK) $(test_mrg_LDFLAGS) $(test_mrg_OBJECTS) $(test_mrg_LDADD) $(LIBS)

bench-mrg: $(bench_mrg_OBJECTS) $(bench_mrg_DEPENDENCIES)
	@rm -f bench-mrg
	$(LINK) $(bench_mrg_LDFLAGS) $(bench_mrg_OBJECTS) $(bench_mrg_LDADD) $(LIBS)

cmrg: $(cmrg_OBJECTS) $(cmrg_DEPENDENCIES)
	@rm -f cmrg
	$(LINK) $(cmrg_LDFLAGS) $(cmrg_OBJECTS) $(cmrg_LDADD) $(LIBS)

test-cmrg: $(test_cmrg_OBJECTS) $(test_cmrg_DEPENDENCIES)
	@rm -f test-cmrg
	$(LINK) $(test_cmrg_LDFLAGS) $(test_cmrg_OBJECTS) $(test_cmrg_LDADD) $(LIBS)

bench-cmrg: $(bench_cmrg_OBJECTS) $(bench_cmrg_DEPENDENCIES)
	@rm -f bench-cmrg
	$(LINK) $(bench_cmrg_LDFLAGS) $(bench_cmrg_OBJECTS) $(bench_cmrg_LDADD) $(LIBS)

uni: $(uni_OBJECTS) $(uni_DEPENDENCIES)
	@rm -f uni
	$(LINK) $(uni_LDFLAGS) $(uni_OBJECTS) $(uni_LDADD) $(LIBS)

test-uni: $(test_uni_OBJECTS) $(test_uni_DEPENDENCIES)
	@rm -f test-uni
	$(LINK) $(test_uni_LDFLAGS) $(test_uni_OBJECTS) $(test_uni_LDADD) $(LIBS)

bench-uni: $(bench_uni_OBJECTS) $(bench_uni_DEPENDENCIES)
	@rm -f bench-uni
	$(LINK) $(bench_uni_LDFLAGS) $(bench_uni_OBJECTS) $(bench_uni_LDADD) $(LIBS)

uni32: $(uni32_OBJECTS) $(uni32_DEPENDENCIES)
	@rm -f uni32
	$(LINK) $(uni32_LDFLAGS) $(uni32_OBJECTS) $(uni32_LDADD) $(LIBS)

test-uni32: $(test_uni32_OBJECTS) $(test_uni32_DEPENDENCIES)
	@rm -f test-uni32
	$(LINK) $(test_uni32_LDFLAGS) $(test_uni32_OBJECTS) $(test_uni32_LDADD) $(LIBS)

bench-uni32: $(bench_uni32_OBJECTS) $(bench_uni32_DEPENDENCIES)
	@rm -f bench-uni32
	$(LINK) $(bench_uni32_LDFLAGS) $(bench_uni32_OBJECTS) $(bench_uni32_LDADD) $(LIBS)

zuf: $(zuf_OBJECTS) $(zuf_DEPENDENCIES)
	@rm -f zuf
	$(LINK) $(zuf_LDFLAGS) $(zuf_OBJECTS) $(zuf_LDADD) $(LIBS)

test-zuf: $(test_zuf_OBJECTS) $(test_zuf_DEPENDENCIES)
	@rm -f test-zuf
	$(LINK) $(test_zuf_LDFLAGS) $(test_zuf_OBJECTS) $(test_zuf_LDADD) $(LIBS)

bench-zuf: $(bench_zuf_OBJECTS) $(bench_zuf_DEPENDENCIES)
	@rm -f bench-zuf
	$(LINK) $(bench_zuf_LDFLAGS) $(bench_zuf_OBJECTS) $(bench_zuf_LDADD) $(LIBS)

rand: $(rand_OBJECTS) $(rand_DEPENDENCIES)
	@rm -f rand
	$(LINK) $(rand_LDFLAGS) $(rand_OBJECTS) $(rand_LDADD) $(LIBS)

test-rand: $(test_rand_OBJECTS) $(test_rand_DEPENDENCIES)
	@rm -f test-rand
	$(LINK) $(test_rand_LDFLAGS) $(test_rand_OBJECTS) $(test_rand_LDADD) $(LIBS)

bench-rand: $(bench_rand_OBJECTS) $(bench_rand_DEPENDENCIES)
	@rm -f bench-rand
	$(LINK) $(bench_rand_LDFLAGS) $(bench_rand_OBJECTS) $(bench_rand_LDADD) $(LIBS)

test-switch: $(test_switch_OBJECTS) $(test_switch_DEPENDENCIES)
	@rm -f test-switch
	$(LINK) $(test_switch_LDFLAGS) $(test_switch_OBJECTS) $(test_switch_LDADD) $(LIBS)

install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(includedir)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  echo " $(INSTALL_DATA) $(srcdir)/$$p $(includedir)/$$p"; \
	  $(INSTALL_DATA) $(srcdir)/$$p $(includedir)/$$p; \
	done

uninstall-includeHEADERS:
	$(NORMAL_UNINSTALL)
	list='$(include_HEADERS)'; for p in $$list; do \
	  rm -f $(includedir)/$$p; \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES)
	here=`pwd` && cd $(srcdir) && mkid -f$$here/ID $(SOURCES) $(HEADERS)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES)
	tags=; \
	here=`pwd`; \
	test -z "$(ETAGS_ARGS)$(SOURCES)$(HEADERS)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $(SOURCES) $(HEADERS) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = random

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu random/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  test -f $(distdir)/$$file \
	  || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	  || cp -p $$d/$$file $(distdir)/$$file; \
	done

MKDEP = gcc -M $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)
-include .deps/.P
.deps/.P: $(BUILT_SOURCES)
	echo > $@

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:

maintainer-clean-depend:
	rm -rf .deps

.deps/%.P: %.c
	@echo "Computing dependencies for $<..."
	@o='o'; \
	test -n "$o" && o='$$o'; \
	$(MKDEP) $< >$@.tmp \
	  && sed "s,^\(.*\)\.o:,\1.$$o \1.l$$o $@:," < $@.tmp > $@ \
	  && rm -f $@.tmp
check-TESTS: $(TESTS)
	@failed=0; all=0; \
	srcdir=$(srcdir); export srcdir; \
	for tst in $(TESTS); do \
	  if test -f $$tst; then dir=.; \
	  else dir="$(srcdir)"; fi; \
	  if $(TESTS_ENVIRONMENT) $$dir/$$tst; then \
	    all=`expr $$all + 1`; \
	    echo "PASS: $$tst"; \
	  elif test $$? -ne 77; then \
	    all=`expr $$all + 1`; \
	    failed=`expr $$failed + 1`; \
	    echo "FAIL: $$tst"; \
	  fi; \
	done; \
	if test "$$failed" -eq 0; then \
	  banner="All $$all tests passed"; \
	else \
	  banner="$$failed of $$all tests failed"; \
	fi; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"; \
	test "$$failed" -eq 0
info:
dvi:
check: all
	$(MAKE) check-TESTS
installcheck:
install-exec: install-libLIBRARIES
	@$(NORMAL_INSTALL)

install-data: install-includeHEADERS
	@$(NORMAL_INSTALL)

install: install-exec install-data all
	@:

uninstall: uninstall-libLIBRARIES uninstall-includeHEADERS

all: Makefile $(LIBRARIES) $(PROGRAMS) $(HEADERS)

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' INSTALL_SCRIPT='$(INSTALL_PROGRAM)' install
installdirs:
	$(mkinstalldirs)  $(libdir) $(includedir)


mostlyclean-generic:
	test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	rm -f Makefile $(DISTCLEANFILES)
	rm -f config.cache config.log stamp-h stamp-h[0-9]*
	test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean:  mostlyclean-libLIBRARIES mostlyclean-compile \
		mostlyclean-noinstPROGRAMS mostlyclean-tags \
		mostlyclean-depend mostlyclean-generic

clean:  clean-libLIBRARIES clean-compile clean-noinstPROGRAMS clean-tags \
		clean-depend clean-generic mostlyclean

distclean:  distclean-libLIBRARIES distclean-compile \
		distclean-noinstPROGRAMS distclean-tags \
		distclean-depend distclean-generic clean
	rm -f config.status

maintainer-clean:  maintainer-clean-libLIBRARIES \
		maintainer-clean-compile \
		maintainer-clean-noinstPROGRAMS maintainer-clean-tags \
		maintainer-clean-depend maintainer-clean-generic \
		distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

.PHONY: default mostlyclean-libLIBRARIES distclean-libLIBRARIES \
clean-libLIBRARIES maintainer-clean-libLIBRARIES uninstall-libLIBRARIES \
install-libLIBRARIES mostlyclean-compile distclean-compile \
clean-compile maintainer-clean-compile mostlyclean-noinstPROGRAMS \
distclean-noinstPROGRAMS clean-noinstPROGRAMS \
maintainer-clean-noinstPROGRAMS uninstall-includeHEADERS \
install-includeHEADERS tags mostlyclean-tags distclean-tags clean-tags \
maintainer-clean-tags distdir mostlyclean-depend distclean-depend \
clean-depend maintainer-clean-depend check-TESTS info dvi installcheck \
install-exec install-data install uninstall all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


switch.c gsl_ran_switch.h: xxx-switch.xc makeswitch
	./makeswitch $(ALLRAN) 

tooclean: clean
	/bin/rm -f $(BUILT_SOURCES)
	/bin/rm -rf .deps

Makefile.am: Makefile.ami makeam
	cat Makefile.ami   | egrep -v '^###' > Makefile.am
	./makeam $(ALLRAN) >> Makefile.am

taus-state.c: xxx-state.xc
	sed s/gsl_ran_XXX_/gsl_ran_taus_/g xxx-state.xc > $@
taus.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_taus_/g gsl_ran.h > $@
taus-gen.c: xxx-gen.xc
	sed s/XXX/taus/g xxx-gen.xc > $@
mrg-state.c: xxx-state.xc
	sed s/gsl_ran_XXX_/gsl_ran_mrg_/g xxx-state.xc > $@
mrg.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_mrg_/g gsl_ran.h > $@
mrg-gen.c: xxx-gen.xc
	sed s/XXX/mrg/g xxx-gen.xc > $@
cmrg-state.c: xxx-state.xc
	sed s/gsl_ran_XXX_/gsl_ran_cmrg_/g xxx-state.xc > $@
cmrg.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_cmrg_/g gsl_ran.h > $@
cmrg-gen.c: xxx-gen.xc
	sed s/XXX/cmrg/g xxx-gen.xc > $@
uni-state.c: xxx-state.xc
	sed s/gsl_ran_XXX_/gsl_ran_uni_/g xxx-state.xc > $@
uni.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_uni_/g gsl_ran.h > $@
uni-gen.c: xxx-gen.xc
	sed s/XXX/uni/g xxx-gen.xc > $@
uni32-state.c: xxx-state.xc
	sed s/gsl_ran_XXX_/gsl_ran_uni32_/g xxx-state.xc > $@
uni32.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_uni32_/g gsl_ran.h > $@
uni32-gen.c: xxx-gen.xc
	sed s/XXX/uni32/g xxx-gen.xc > $@
zuf-state.c: xxx-state.xc
	sed s/gsl_ran_XXX_/gsl_ran_zuf_/g xxx-state.xc > $@
zuf.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_zuf_/g gsl_ran.h > $@
zuf-gen.c: xxx-gen.xc
	sed s/XXX/zuf/g xxx-gen.xc > $@
rand-state.c: xxx-state.xc
	sed s/gsl_ran_XXX_/gsl_ran_rand_/g xxx-state.xc > $@
rand.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_rand_/g gsl_ran.h > $@
rand-gen.c: xxx-gen.xc
	sed s/XXX/rand/g xxx-gen.xc > $@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
