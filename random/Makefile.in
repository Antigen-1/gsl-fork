# Makefile.in generated automatically by automake 1.1e from Makefile.am

# Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy, distribute and modify it.


SHELL = /bin/sh

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

ALLRAN= mrg cmrg taus uni uni32 zuf rand
FAVORITERAN= taus

include_HEADERS= gsl_ran.h gsl_ran_switch.h

gauss_SOURCES= rungauss.c gauss.c
test_gauss_SOURCES= test-gauss.c gauss.c
bench_gauss_SOURCES= bench-gauss.c gauss.c

gauss_LDADD=       $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_gauss_LDADD=  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
bench_gauss_LDADD= $(FAVORITERAN).o $(FAVORITERAN)-gen.o

test_switch_SOURCES= test-switch.c switch.c 

EXTRA_DIST= switch.xc makeswitch xxx-gen.xc xxx-state.xc \
	makeam Makefile.ami

CLEANFILES= tmp.out tmp.in

bin_PROGRAMS= mrg test-mrg bench-mrg cmrg test-cmrg bench-cmrg taus test-taus bench-taus uni test-uni bench-uni uni32 test-uni32 bench-uni32 zuf test-zuf bench-zuf rand test-rand bench-rand gauss test-gauss bench-gauss test-switch 

test_switch_DEPENDENCIES= gsl_ran_switch.h mrg.o cmrg.o taus.o uni.o uni32.o zuf.o rand.o 
test_switch_LDADD= mrg.o cmrg.o taus.o uni.o uni32.o zuf.o rand.o 
mrg_SOURCES=             ran.c mrg.c
mrg_DEPENDENCIES=        mrg-state.c mrg.h mrg-gen.o
mrg_LDADD=               mrg-gen.o
test_mrg_SOURCES=        testran.c
test_mrg_DEPENDENCIES=   mrg.o mrg-gen.o mrg.h
test_mrg_LDADD=          mrg.o mrg-gen.o
bench_mrg_SOURCES=       benchran.c
bench_mrg_DEPENDENCIES=  mrg.o mrg-gen.o mrg.h
bench_mrg_LDADD=         mrg.o mrg-gen.o
cmrg_SOURCES=             ran.c cmrg.c
cmrg_DEPENDENCIES=        cmrg-state.c cmrg.h cmrg-gen.o
cmrg_LDADD=               cmrg-gen.o
test_cmrg_SOURCES=        testran.c
test_cmrg_DEPENDENCIES=   cmrg.o cmrg-gen.o cmrg.h
test_cmrg_LDADD=          cmrg.o cmrg-gen.o
bench_cmrg_SOURCES=       benchran.c
bench_cmrg_DEPENDENCIES=  cmrg.o cmrg-gen.o cmrg.h
bench_cmrg_LDADD=         cmrg.o cmrg-gen.o
taus_SOURCES=             ran.c taus.c
taus_DEPENDENCIES=        taus-state.c taus.h taus-gen.o
taus_LDADD=               taus-gen.o
test_taus_SOURCES=        testran.c
test_taus_DEPENDENCIES=   taus.o taus-gen.o taus.h
test_taus_LDADD=          taus.o taus-gen.o
bench_taus_SOURCES=       benchran.c
bench_taus_DEPENDENCIES=  taus.o taus-gen.o taus.h
bench_taus_LDADD=         taus.o taus-gen.o
uni_SOURCES=             ran.c uni.c
uni_DEPENDENCIES=        uni-state.c uni.h uni-gen.o
uni_LDADD=               uni-gen.o
test_uni_SOURCES=        testran.c
test_uni_DEPENDENCIES=   uni.o uni-gen.o uni.h
test_uni_LDADD=          uni.o uni-gen.o
bench_uni_SOURCES=       benchran.c
bench_uni_DEPENDENCIES=  uni.o uni-gen.o uni.h
bench_uni_LDADD=         uni.o uni-gen.o
uni32_SOURCES=             ran.c uni32.c
uni32_DEPENDENCIES=        uni32-state.c uni32.h uni32-gen.o
uni32_LDADD=               uni32-gen.o
test_uni32_SOURCES=        testran.c
test_uni32_DEPENDENCIES=   uni32.o uni32-gen.o uni32.h
test_uni32_LDADD=          uni32.o uni32-gen.o
bench_uni32_SOURCES=       benchran.c
bench_uni32_DEPENDENCIES=  uni32.o uni32-gen.o uni32.h
bench_uni32_LDADD=         uni32.o uni32-gen.o
zuf_SOURCES=             ran.c zuf.c
zuf_DEPENDENCIES=        zuf-state.c zuf.h zuf-gen.o
zuf_LDADD=               zuf-gen.o
test_zuf_SOURCES=        testran.c
test_zuf_DEPENDENCIES=   zuf.o zuf-gen.o zuf.h
test_zuf_LDADD=          zuf.o zuf-gen.o
bench_zuf_SOURCES=       benchran.c
bench_zuf_DEPENDENCIES=  zuf.o zuf-gen.o zuf.h
bench_zuf_LDADD=         zuf.o zuf-gen.o
rand_SOURCES=             ran.c rand.c
rand_DEPENDENCIES=        rand-state.c rand.h rand-gen.o
rand_LDADD=               rand-gen.o
test_rand_SOURCES=        testran.c
test_rand_DEPENDENCIES=   rand.o rand-gen.o rand.h
test_rand_LDADD=          rand.o rand-gen.o
bench_rand_SOURCES=       benchran.c
bench_rand_DEPENDENCIES=  rand.o rand-gen.o rand.h
bench_rand_LDADD=         rand.o rand-gen.o

BUILT_SOURCES= switch.c gsl_ran_switch.h mrg-state.c mrg.h mrg-gen.c cmrg-state.c cmrg.h cmrg-gen.c taus-state.c taus.h taus-gen.c uni-state.c uni.h uni-gen.c uni32-state.c uni32.h uni32-gen.c zuf-state.c zuf.h zuf-gen.c rand-state.c rand.h rand-gen.c 
mkinstalldirs = $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES = 
PROGRAMS = $(bin_PROGRAMS)


DEFS = @DEFS@ -I. -I$(srcdir) 
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
mrg_OBJECTS = ran.o mrg.o
EXTRA_mrg_SOURCES =
test_mrg_OBJECTS = testran.o
EXTRA_test_mrg_SOURCES =
bench_mrg_OBJECTS = benchran.o
EXTRA_bench_mrg_SOURCES =
cmrg_OBJECTS = ran.o cmrg.o
EXTRA_cmrg_SOURCES =
test_cmrg_OBJECTS = testran.o
EXTRA_test_cmrg_SOURCES =
bench_cmrg_OBJECTS = benchran.o
EXTRA_bench_cmrg_SOURCES =
taus_OBJECTS = ran.o taus.o
EXTRA_taus_SOURCES =
test_taus_OBJECTS = testran.o
EXTRA_test_taus_SOURCES =
bench_taus_OBJECTS = benchran.o
EXTRA_bench_taus_SOURCES =
uni_OBJECTS = ran.o uni.o
EXTRA_uni_SOURCES =
test_uni_OBJECTS = testran.o
EXTRA_test_uni_SOURCES =
bench_uni_OBJECTS = benchran.o
EXTRA_bench_uni_SOURCES =
uni32_OBJECTS = ran.o uni32.o
EXTRA_uni32_SOURCES =
test_uni32_OBJECTS = testran.o
EXTRA_test_uni32_SOURCES =
bench_uni32_OBJECTS = benchran.o
EXTRA_bench_uni32_SOURCES =
zuf_OBJECTS = ran.o zuf.o
EXTRA_zuf_SOURCES =
test_zuf_OBJECTS = testran.o
EXTRA_test_zuf_SOURCES =
bench_zuf_OBJECTS = benchran.o
EXTRA_bench_zuf_SOURCES =
rand_OBJECTS = ran.o rand.o
EXTRA_rand_SOURCES =
test_rand_OBJECTS = testran.o
EXTRA_test_rand_SOURCES =
bench_rand_OBJECTS = benchran.o
EXTRA_bench_rand_SOURCES =
gauss_OBJECTS = rungauss.o gauss.o
EXTRA_gauss_SOURCES =
gauss_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_gauss_OBJECTS = test-gauss.o gauss.o
EXTRA_test_gauss_SOURCES =
test_gauss_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
bench_gauss_OBJECTS = bench-gauss.o gauss.o
EXTRA_bench_gauss_SOURCES =
bench_gauss_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_switch_OBJECTS = test-switch.o switch.o
EXTRA_test_switch_SOURCES =
CC = @CC@
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LINK = $(CC) $(LDFLAGS) -o $@
HEADERS = $(include_HEADERS)

DIST_COMMON = Makefile.am Makefile.in


PACKAGE = @PACKAGE@
VERSION = @VERSION@

DISTFILES = $(DIST_COMMON) $(SOURCES) $(BUILT_SOURCES) $(HEADERS) \
	$(TEXINFOS) $(INFOS) $(MANS) $(EXTRA_DIST) $(DATA)
DEP_DISTFILES = $(DIST_COMMON) $(SOURCES) $(BUILT_SOURCES) $(HEADERS) \
	$(TEXINFOS) $(INFO_DEPS) $(MANS) $(EXTRA_DIST) $(DATA)

TAR = tar
DEP_FILES = .deps/bench-gauss.P .deps/benchran.P .deps/cmrg.P \
.deps/gauss.P .deps/mrg.P .deps/ran.P .deps/rand.P .deps/rungauss.P \
.deps/switch.P .deps/taus.P .deps/test-gauss.P .deps/test-switch.P \
.deps/testran.P .deps/uni.P .deps/uni32.P .deps/zuf.P
SOURCES = $(mrg_SOURCES) $(test_mrg_SOURCES) $(bench_mrg_SOURCES) \
$(cmrg_SOURCES) $(test_cmrg_SOURCES) $(bench_cmrg_SOURCES) \
$(taus_SOURCES) $(test_taus_SOURCES) $(bench_taus_SOURCES) \
$(uni_SOURCES) $(test_uni_SOURCES) $(bench_uni_SOURCES) \
$(uni32_SOURCES) $(test_uni32_SOURCES) $(bench_uni32_SOURCES) \
$(zuf_SOURCES) $(test_zuf_SOURCES) $(bench_zuf_SOURCES) $(rand_SOURCES) \
$(test_rand_SOURCES) $(bench_rand_SOURCES) $(gauss_SOURCES) \
$(test_gauss_SOURCES) $(bench_gauss_SOURCES) $(test_switch_SOURCES)
OBJECTS = $(mrg_OBJECTS) $(test_mrg_OBJECTS) $(bench_mrg_OBJECTS) \
$(cmrg_OBJECTS) $(test_cmrg_OBJECTS) $(bench_cmrg_OBJECTS) \
$(taus_OBJECTS) $(test_taus_OBJECTS) $(bench_taus_OBJECTS) \
$(uni_OBJECTS) $(test_uni_OBJECTS) $(bench_uni_OBJECTS) \
$(uni32_OBJECTS) $(test_uni32_OBJECTS) $(bench_uni32_OBJECTS) \
$(zuf_OBJECTS) $(test_zuf_OBJECTS) $(bench_zuf_OBJECTS) $(rand_OBJECTS) \
$(test_rand_OBJECTS) $(bench_rand_OBJECTS) $(gauss_OBJECTS) \
$(test_gauss_OBJECTS) $(bench_gauss_OBJECTS) $(test_switch_OBJECTS)

default: all


$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in
	cd $(top_srcdir) && automake $(subdir)/Makefile

Makefile: $(top_builddir)/config.status Makefile.in
	cd $(top_builddir) && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= ./config.status

mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(bindir)
	list="$(bin_PROGRAMS)"; for p in $$list; do \
	  if test -f $$p; then \
	    $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed '$(transform)'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	list="$(bin_PROGRAMS)"; for p in $$list; do \
	  rm -f $(bindir)/`echo $$p|sed '$(transform)'`; \
	done

.c.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	rm -f *.o core

clean-compile:

distclean-compile:
	rm -f *.tab.c

maintainer-clean-compile:

mrg: $(mrg_OBJECTS) $(mrg_DEPENDENCIES)
	$(LINK) $(mrg_OBJECTS) $(mrg_LDADD) $(LIBS)

test-mrg: $(test_mrg_OBJECTS) $(test_mrg_DEPENDENCIES)
	$(LINK) $(test_mrg_OBJECTS) $(test_mrg_LDADD) $(LIBS)

bench-mrg: $(bench_mrg_OBJECTS) $(bench_mrg_DEPENDENCIES)
	$(LINK) $(bench_mrg_OBJECTS) $(bench_mrg_LDADD) $(LIBS)

cmrg: $(cmrg_OBJECTS) $(cmrg_DEPENDENCIES)
	$(LINK) $(cmrg_OBJECTS) $(cmrg_LDADD) $(LIBS)

test-cmrg: $(test_cmrg_OBJECTS) $(test_cmrg_DEPENDENCIES)
	$(LINK) $(test_cmrg_OBJECTS) $(test_cmrg_LDADD) $(LIBS)

bench-cmrg: $(bench_cmrg_OBJECTS) $(bench_cmrg_DEPENDENCIES)
	$(LINK) $(bench_cmrg_OBJECTS) $(bench_cmrg_LDADD) $(LIBS)

taus: $(taus_OBJECTS) $(taus_DEPENDENCIES)
	$(LINK) $(taus_OBJECTS) $(taus_LDADD) $(LIBS)

test-taus: $(test_taus_OBJECTS) $(test_taus_DEPENDENCIES)
	$(LINK) $(test_taus_OBJECTS) $(test_taus_LDADD) $(LIBS)

bench-taus: $(bench_taus_OBJECTS) $(bench_taus_DEPENDENCIES)
	$(LINK) $(bench_taus_OBJECTS) $(bench_taus_LDADD) $(LIBS)

uni: $(uni_OBJECTS) $(uni_DEPENDENCIES)
	$(LINK) $(uni_OBJECTS) $(uni_LDADD) $(LIBS)

test-uni: $(test_uni_OBJECTS) $(test_uni_DEPENDENCIES)
	$(LINK) $(test_uni_OBJECTS) $(test_uni_LDADD) $(LIBS)

bench-uni: $(bench_uni_OBJECTS) $(bench_uni_DEPENDENCIES)
	$(LINK) $(bench_uni_OBJECTS) $(bench_uni_LDADD) $(LIBS)

uni32: $(uni32_OBJECTS) $(uni32_DEPENDENCIES)
	$(LINK) $(uni32_OBJECTS) $(uni32_LDADD) $(LIBS)

test-uni32: $(test_uni32_OBJECTS) $(test_uni32_DEPENDENCIES)
	$(LINK) $(test_uni32_OBJECTS) $(test_uni32_LDADD) $(LIBS)

bench-uni32: $(bench_uni32_OBJECTS) $(bench_uni32_DEPENDENCIES)
	$(LINK) $(bench_uni32_OBJECTS) $(bench_uni32_LDADD) $(LIBS)

zuf: $(zuf_OBJECTS) $(zuf_DEPENDENCIES)
	$(LINK) $(zuf_OBJECTS) $(zuf_LDADD) $(LIBS)

test-zuf: $(test_zuf_OBJECTS) $(test_zuf_DEPENDENCIES)
	$(LINK) $(test_zuf_OBJECTS) $(test_zuf_LDADD) $(LIBS)

bench-zuf: $(bench_zuf_OBJECTS) $(bench_zuf_DEPENDENCIES)
	$(LINK) $(bench_zuf_OBJECTS) $(bench_zuf_LDADD) $(LIBS)

rand: $(rand_OBJECTS) $(rand_DEPENDENCIES)
	$(LINK) $(rand_OBJECTS) $(rand_LDADD) $(LIBS)

test-rand: $(test_rand_OBJECTS) $(test_rand_DEPENDENCIES)
	$(LINK) $(test_rand_OBJECTS) $(test_rand_LDADD) $(LIBS)

bench-rand: $(bench_rand_OBJECTS) $(bench_rand_DEPENDENCIES)
	$(LINK) $(bench_rand_OBJECTS) $(bench_rand_LDADD) $(LIBS)

gauss: $(gauss_OBJECTS) $(gauss_DEPENDENCIES)
	$(LINK) $(gauss_OBJECTS) $(gauss_LDADD) $(LIBS)

test-gauss: $(test_gauss_OBJECTS) $(test_gauss_DEPENDENCIES)
	$(LINK) $(test_gauss_OBJECTS) $(test_gauss_LDADD) $(LIBS)

bench-gauss: $(bench_gauss_OBJECTS) $(bench_gauss_DEPENDENCIES)
	$(LINK) $(bench_gauss_OBJECTS) $(bench_gauss_LDADD) $(LIBS)

test-switch: $(test_switch_OBJECTS) $(test_switch_DEPENDENCIES)
	$(LINK) $(test_switch_OBJECTS) $(test_switch_LDADD) $(LIBS)

install-includeHEADERS: $(include_HEADERS)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(includedir)
	list="$(include_HEADERS)"; for p in $$list; do \
	  $(INSTALL_DATA) $(srcdir)/$$p $(includedir)/$$p; \
	done

uninstall-includeHEADERS:
	list="$(include_HEADERS)"; for p in $$list; do \
	  rm -f $(includedir)/$$p; \
	done

ID: $(HEADERS) $(SOURCES)
	here=`pwd` && cd $(srcdir) && mkid -f$$here/ID $(SOURCES) $(HEADERS)

tags: TAGS

TAGS: $(HEADERS) $(SOURCES) $(TAGS_DEPENDENCIES)
	here=`pwd` && cd $(srcdir) && etags $(ETAGS_ARGS) $(SOURCES) $(HEADERS) -o $$here/TAGS

mostlyclean-tags:

clean-tags:

distclean-tags:
	rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = random
distdir: $(DEP_DISTFILES)
	@for file in `cd $(srcdir) && echo $(DISTFILES)`; do \
	  test -f $(distdir)/$$file \
	  || ln $(srcdir)/$$file $(distdir)/$$file 2> /dev/null \
	  || cp -p $(srcdir)/$$file $(distdir)/$$file; \
	done

MKDEP = gcc -M $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)

-include .deps/.P
.deps/.P: $(BUILT_SOURCES)
	test -d .deps || mkdir .deps
	echo > $@

-include $(DEP_FILES)
$(DEP_FILES): .deps/.P

mostlyclean-depend:

clean-depend:

distclean-depend:

maintainer-clean-depend:
	rm -rf .deps

.deps/%.P: $(srcdir)/%.c
	$(MKDEP) $< > $@-tmp
	if test -n "$o"; then			\
	  sed 's/\.o:/$$o:/' $@-tmp > $@;	\
	  rm $@-tmp;				\
	else					\
	  mv $@-tmp $@;				\
	fi
info:

dvi:

check: all

installcheck:

install-exec: install-binPROGRAMS
	$(NORMAL_INSTALL)

install-data: install-includeHEADERS
	$(NORMAL_INSTALL)

install: install-exec install-data all
	@:

uninstall: uninstall-binPROGRAMS uninstall-includeHEADERS

all: $(PROGRAMS) $(HEADERS) Makefile

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' install
installdirs:
	$(mkinstalldirs)  $(bindir) $(includedir)


mostlyclean-generic:
	test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)
	test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

distclean-generic:
	rm -f Makefile $(DISTCLEANFILES)
	rm -f config.cache config.log $(CONFIG_HEADER) stamp-h

maintainer-clean-generic:
	test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean:  mostlyclean-binPROGRAMS mostlyclean-compile \
		mostlyclean-tags mostlyclean-depend mostlyclean-generic

clean:  clean-binPROGRAMS clean-compile clean-tags clean-depend \
		clean-generic mostlyclean 

distclean:  distclean-binPROGRAMS distclean-compile distclean-tags \
		distclean-depend distclean-generic clean 
	rm -f config.status

maintainer-clean:  maintainer-clean-binPROGRAMS maintainer-clean-compile \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean 
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

.PHONY: default mostlyclean-binPROGRAMS distclean-binPROGRAMS \
clean-binPROGRAMS maintainer-clean-binPROGRAMS uninstall-binPROGRAMS \
install-binPROGRAMS mostlyclean-compile distclean-compile clean-compile \
maintainer-clean-compile uninstall-includeHEADERS \
install-includeHEADERS tags mostlyclean-tags distclean-tags clean-tags \
maintainer-clean-tags distdir mostlyclean-depend distclean-depend \
clean-depend maintainer-clean-depend info dvi check installcheck \
install-exec install-data install uninstall all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


switch.c gsl_ran_switch.h: switch.xc makeswitch
	makeswitch $(ALLRAN) 

Makefile.am: Makefile.ami makeam
	cat Makefile.ami    > Makefile.am
	./makeam $(ALLRAN) >> Makefile.am

mrg-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_mrg_/g xxx-state.xc > $@
mrg.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_mrg_/g gsl_ran.h > $@
mrg-gen.c: xxx-gen.xc
	sed s/xxx/mrg/g xxx-gen.xc > $@
cmrg-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_cmrg_/g xxx-state.xc > $@
cmrg.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_cmrg_/g gsl_ran.h > $@
cmrg-gen.c: xxx-gen.xc
	sed s/xxx/cmrg/g xxx-gen.xc > $@
taus-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_taus_/g xxx-state.xc > $@
taus.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_taus_/g gsl_ran.h > $@
taus-gen.c: xxx-gen.xc
	sed s/xxx/taus/g xxx-gen.xc > $@
uni-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_uni_/g xxx-state.xc > $@
uni.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_uni_/g gsl_ran.h > $@
uni-gen.c: xxx-gen.xc
	sed s/xxx/uni/g xxx-gen.xc > $@
uni32-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_uni32_/g xxx-state.xc > $@
uni32.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_uni32_/g gsl_ran.h > $@
uni32-gen.c: xxx-gen.xc
	sed s/xxx/uni32/g xxx-gen.xc > $@
zuf-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_zuf_/g xxx-state.xc > $@
zuf.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_zuf_/g gsl_ran.h > $@
zuf-gen.c: xxx-gen.xc
	sed s/xxx/zuf/g xxx-gen.xc > $@
rand-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_rand_/g xxx-state.xc > $@
rand.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_rand_/g gsl_ran.h > $@
rand-gen.c: xxx-gen.xc
	sed s/xxx/rand/g xxx-gen.xc > $@
.SUFFIXES:
.SUFFIXES: .c .o

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
