# Makefile.in generated automatically by automake 1.3 from Makefile.am

# Copyright (C) 1994, 1995, 1996, 1997, 1998 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.

#####################################################################

#####################################################################


SHELL = /bin/sh

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

DISTDIR =

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_alias = @host_alias@
host_triplet = @host@
CC = @CC@
CPP = @CPP@
LD = @LD@
LIBTOOL = @LIBTOOL@
LN_S = @LN_S@
MAKEINFO = @MAKEINFO@
NM = @NM@
PACKAGE = @PACKAGE@
RANLIB = @RANLIB@
VERSION = @VERSION@
full_top_builddir = @full_top_builddir@
full_top_srcdir = @full_top_srcdir@

INCLUDES = -I$(srcdir)/../err -I$(srcdir)/../utils

ALLRAN= taus mrg cmrg uni uni32 zuf rand

include_HEADERS= gsl_ran.h gsl_ran_switch.h

test_switch_SOURCES= test-switch.c switch.c 
test_switch_LDADD=../err/libgsltest.la ../utils/libutils.a

EXTRA_DIST= xxx-switch.xc xxx-gen.xc xxx-state.xc \
	makeam makesrc Makefile.ami 

CLEANFILES= tmp.lout tmp.in

bin_PROGRAMS= taus mrg cmrg uni uni32 zuf rand test-switch

check_PROGRAMS= test-taus bench-taus test-mrg bench-mrg test-cmrg bench-cmrg test-uni bench-uni test-uni32 bench-uni32 test-zuf bench-zuf test-rand bench-rand

lib_LTLIBRARIES= libgslrandom.la  libgslrantaus.la libgslranmrg.la libgslrancmrg.la libgslranuni.la libgslranuni32.la libgslranzuf.la libgslranrand.la

libgslrantaus_la_SOURCES= taus.c taus-gen.c 
libgslranmrg_la_SOURCES= mrg.c mrg-gen.c 
libgslrancmrg_la_SOURCES= cmrg.c cmrg-gen.c 
libgslranuni_la_SOURCES= uni.c uni-gen.c 
libgslranuni32_la_SOURCES= uni32.c uni32-gen.c 
libgslranzuf_la_SOURCES= zuf.c zuf-gen.c 
libgslranrand_la_SOURCES= rand.c rand-gen.c 

libgslrandom_la_SOURCES=switch.c  taus.c mrg.c cmrg.c uni.c uni32.c zuf.c rand.c

TESTS= test-taus test-mrg test-cmrg test-uni test-uni32 test-zuf test-rand

test_switch_DEPENDENCIES=gsl_ran_switch.h taus.h taus.lo mrg.h mrg.lo cmrg.h cmrg.lo uni.h uni.lo uni32.h uni32.lo zuf.h zuf.lo rand.h rand.lo

test_switch_LDADD= taus.lo mrg.lo cmrg.lo uni.lo uni32.lo zuf.lo rand.lo ../utils/libutils.a 

taus_SOURCES=             ran.c taus.c taus.h
EXTRA_taus_SOURCES=       taus-state.c
taus_DEPENDENCIES=        taus-state.c taus-gen.lo
taus_LDADD=               taus-gen.lo
test_taus_SOURCES=        testran.c
test_taus_DEPENDENCIES=   taus.lo taus-gen.lo taus.h
test_taus_LDADD=          taus.lo taus-gen.lo ../err/libgsltest.la ../utils/libutils.a
bench_taus_SOURCES=       benchran.c
bench_taus_DEPENDENCIES=  taus.lo taus-gen.lo taus.h
bench_taus_LDADD=         taus.lo taus-gen.lo
mrg_SOURCES=             ran.c mrg.c mrg.h
EXTRA_mrg_SOURCES=       mrg-state.c
mrg_DEPENDENCIES=        mrg-state.c mrg-gen.lo
mrg_LDADD=               mrg-gen.lo
test_mrg_SOURCES=        testran.c
test_mrg_DEPENDENCIES=   mrg.lo mrg-gen.lo mrg.h
test_mrg_LDADD=          mrg.lo mrg-gen.lo ../err/libgsltest.la ../utils/libutils.a
bench_mrg_SOURCES=       benchran.c
bench_mrg_DEPENDENCIES=  mrg.lo mrg-gen.lo mrg.h
bench_mrg_LDADD=         mrg.lo mrg-gen.lo
cmrg_SOURCES=             ran.c cmrg.c cmrg.h
EXTRA_cmrg_SOURCES=       cmrg-state.c
cmrg_DEPENDENCIES=        cmrg-state.c cmrg-gen.lo
cmrg_LDADD=               cmrg-gen.lo
test_cmrg_SOURCES=        testran.c
test_cmrg_DEPENDENCIES=   cmrg.lo cmrg-gen.lo cmrg.h
test_cmrg_LDADD=          cmrg.lo cmrg-gen.lo ../err/libgsltest.la ../utils/libutils.a
bench_cmrg_SOURCES=       benchran.c
bench_cmrg_DEPENDENCIES=  cmrg.lo cmrg-gen.lo cmrg.h
bench_cmrg_LDADD=         cmrg.lo cmrg-gen.lo
uni_SOURCES=             ran.c uni.c uni.h
EXTRA_uni_SOURCES=       uni-state.c
uni_DEPENDENCIES=        uni-state.c uni-gen.lo
uni_LDADD=               uni-gen.lo
test_uni_SOURCES=        testran.c
test_uni_DEPENDENCIES=   uni.lo uni-gen.lo uni.h
test_uni_LDADD=          uni.lo uni-gen.lo ../err/libgsltest.la ../utils/libutils.a
bench_uni_SOURCES=       benchran.c
bench_uni_DEPENDENCIES=  uni.lo uni-gen.lo uni.h
bench_uni_LDADD=         uni.lo uni-gen.lo
uni32_SOURCES=             ran.c uni32.c uni32.h
EXTRA_uni32_SOURCES=       uni32-state.c
uni32_DEPENDENCIES=        uni32-state.c uni32-gen.lo
uni32_LDADD=               uni32-gen.lo
test_uni32_SOURCES=        testran.c
test_uni32_DEPENDENCIES=   uni32.lo uni32-gen.lo uni32.h
test_uni32_LDADD=          uni32.lo uni32-gen.lo ../err/libgsltest.la ../utils/libutils.a
bench_uni32_SOURCES=       benchran.c
bench_uni32_DEPENDENCIES=  uni32.lo uni32-gen.lo uni32.h
bench_uni32_LDADD=         uni32.lo uni32-gen.lo
zuf_SOURCES=             ran.c zuf.c zuf.h
EXTRA_zuf_SOURCES=       zuf-state.c
zuf_DEPENDENCIES=        zuf-state.c zuf-gen.lo
zuf_LDADD=               zuf-gen.lo
test_zuf_SOURCES=        testran.c
test_zuf_DEPENDENCIES=   zuf.lo zuf-gen.lo zuf.h
test_zuf_LDADD=          zuf.lo zuf-gen.lo ../err/libgsltest.la ../utils/libutils.a
bench_zuf_SOURCES=       benchran.c
bench_zuf_DEPENDENCIES=  zuf.lo zuf-gen.lo zuf.h
bench_zuf_LDADD=         zuf.lo zuf-gen.lo
rand_SOURCES=             ran.c rand.c rand.h
EXTRA_rand_SOURCES=       rand-state.c
rand_DEPENDENCIES=        rand-state.c rand-gen.lo
rand_LDADD=               rand-gen.lo
test_rand_SOURCES=        testran.c
test_rand_DEPENDENCIES=   rand.lo rand-gen.lo rand.h
test_rand_LDADD=          rand.lo rand-gen.lo ../err/libgsltest.la ../utils/libutils.a
bench_rand_SOURCES=       benchran.c
bench_rand_DEPENDENCIES=  rand.lo rand-gen.lo rand.h
bench_rand_LDADD=         rand.lo rand-gen.lo
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../config.h
CONFIG_CLEAN_FILES = 
LTLIBRARIES =  $(lib_LTLIBRARIES)


DEFS = @DEFS@ -I. -I$(srcdir) -I..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
libgslrandom_la_LDFLAGS = 
libgslrandom_la_LIBADD = 
libgslrandom_la_OBJECTS =  switch.lo taus.lo mrg.lo cmrg.lo uni.lo \
uni32.lo zuf.lo rand.lo
libgslrantaus_la_LDFLAGS = 
libgslrantaus_la_LIBADD = 
libgslrantaus_la_OBJECTS =  taus.lo taus-gen.lo
libgslranmrg_la_LDFLAGS = 
libgslranmrg_la_LIBADD = 
libgslranmrg_la_OBJECTS =  mrg.lo mrg-gen.lo
libgslrancmrg_la_LDFLAGS = 
libgslrancmrg_la_LIBADD = 
libgslrancmrg_la_OBJECTS =  cmrg.lo cmrg-gen.lo
libgslranuni_la_LDFLAGS = 
libgslranuni_la_LIBADD = 
libgslranuni_la_OBJECTS =  uni.lo uni-gen.lo
libgslranuni32_la_LDFLAGS = 
libgslranuni32_la_LIBADD = 
libgslranuni32_la_OBJECTS =  uni32.lo uni32-gen.lo
libgslranzuf_la_LDFLAGS = 
libgslranzuf_la_LIBADD = 
libgslranzuf_la_OBJECTS =  zuf.lo zuf-gen.lo
libgslranrand_la_LDFLAGS = 
libgslranrand_la_LIBADD = 
libgslranrand_la_OBJECTS =  rand.lo rand-gen.lo
PROGRAMS =  $(bin_PROGRAMS)

taus_OBJECTS =  ran.o taus.o
taus_LDFLAGS = 
mrg_OBJECTS =  ran.o mrg.o
mrg_LDFLAGS = 
cmrg_OBJECTS =  ran.o cmrg.o
cmrg_LDFLAGS = 
uni_OBJECTS =  ran.o uni.o
uni_LDFLAGS = 
uni32_OBJECTS =  ran.o uni32.o
uni32_LDFLAGS = 
zuf_OBJECTS =  ran.o zuf.o
zuf_LDFLAGS = 
rand_OBJECTS =  ran.o rand.o
rand_LDFLAGS = 
test_switch_OBJECTS =  test-switch.o switch.o
test_switch_LDFLAGS = 
test_taus_OBJECTS =  testran.o
test_taus_LDFLAGS = 
bench_taus_OBJECTS =  benchran.o
bench_taus_LDFLAGS = 
test_mrg_OBJECTS =  testran.o
test_mrg_LDFLAGS = 
bench_mrg_OBJECTS =  benchran.o
bench_mrg_LDFLAGS = 
test_cmrg_OBJECTS =  testran.o
test_cmrg_LDFLAGS = 
bench_cmrg_OBJECTS =  benchran.o
bench_cmrg_LDFLAGS = 
test_uni_OBJECTS =  testran.o
test_uni_LDFLAGS = 
bench_uni_OBJECTS =  benchran.o
bench_uni_LDFLAGS = 
test_uni32_OBJECTS =  testran.o
test_uni32_LDFLAGS = 
bench_uni32_OBJECTS =  benchran.o
bench_uni32_LDFLAGS = 
test_zuf_OBJECTS =  testran.o
test_zuf_LDFLAGS = 
bench_zuf_OBJECTS =  benchran.o
bench_zuf_LDFLAGS = 
test_rand_OBJECTS =  testran.o
test_rand_LDFLAGS = 
bench_rand_OBJECTS =  benchran.o
bench_rand_LDFLAGS = 
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --mode=compile $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LINK = $(LIBTOOL) --mode=link $(CC) $(CFLAGS) $(LDFLAGS) -o $@
HEADERS =  $(include_HEADERS)

DIST_COMMON =  ChangeLog Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = tar
GZIP = --best
DEP_FILES =  .deps/benchran.P .deps/cmrg-gen.P .deps/cmrg-state.P \
.deps/cmrg.P .deps/mrg-gen.P .deps/mrg-state.P .deps/mrg.P .deps/ran.P \
.deps/rand-gen.P .deps/rand-state.P .deps/rand.P .deps/switch.P \
.deps/taus-gen.P .deps/taus-state.P .deps/taus.P .deps/test-switch.P \
.deps/testran.P .deps/uni-gen.P .deps/uni-state.P .deps/uni.P \
.deps/uni32-gen.P .deps/uni32-state.P .deps/uni32.P .deps/zuf-gen.P \
.deps/zuf-state.P .deps/zuf.P
SOURCES = $(libgslrandom_la_SOURCES) $(libgslrantaus_la_SOURCES) $(libgslranmrg_la_SOURCES) $(libgslrancmrg_la_SOURCES) $(libgslranuni_la_SOURCES) $(libgslranuni32_la_SOURCES) $(libgslranzuf_la_SOURCES) $(libgslranrand_la_SOURCES) $(taus_SOURCES) $(EXTRA_taus_SOURCES) $(mrg_SOURCES) $(EXTRA_mrg_SOURCES) $(cmrg_SOURCES) $(EXTRA_cmrg_SOURCES) $(uni_SOURCES) $(EXTRA_uni_SOURCES) $(uni32_SOURCES) $(EXTRA_uni32_SOURCES) $(zuf_SOURCES) $(EXTRA_zuf_SOURCES) $(rand_SOURCES) $(EXTRA_rand_SOURCES) $(test_switch_SOURCES) $(test_taus_SOURCES) $(bench_taus_SOURCES) $(test_mrg_SOURCES) $(bench_mrg_SOURCES) $(test_cmrg_SOURCES) $(bench_cmrg_SOURCES) $(test_uni_SOURCES) $(bench_uni_SOURCES) $(test_uni32_SOURCES) $(bench_uni32_SOURCES) $(test_zuf_SOURCES) $(bench_zuf_SOURCES) $(test_rand_SOURCES) $(bench_rand_SOURCES)
OBJECTS = $(libgslrandom_la_OBJECTS) $(libgslrantaus_la_OBJECTS) $(libgslranmrg_la_OBJECTS) $(libgslrancmrg_la_OBJECTS) $(libgslranuni_la_OBJECTS) $(libgslranuni32_la_OBJECTS) $(libgslranzuf_la_OBJECTS) $(libgslranrand_la_OBJECTS) $(taus_OBJECTS) $(mrg_OBJECTS) $(cmrg_OBJECTS) $(uni_OBJECTS) $(uni32_OBJECTS) $(zuf_OBJECTS) $(rand_OBJECTS) $(test_switch_OBJECTS) $(test_taus_OBJECTS) $(bench_taus_OBJECTS) $(test_mrg_OBJECTS) $(bench_mrg_OBJECTS) $(test_cmrg_OBJECTS) $(bench_cmrg_OBJECTS) $(test_uni_OBJECTS) $(bench_uni_OBJECTS) $(test_uni32_OBJECTS) $(bench_uni32_OBJECTS) $(test_zuf_OBJECTS) $(bench_zuf_OBJECTS) $(test_rand_OBJECTS) $(bench_rand_OBJECTS)

all: Makefile $(LTLIBRARIES) $(PROGRAMS) $(HEADERS)

.SUFFIXES:
.SUFFIXES: .S .c .lo .o .s
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && $(AUTOMAKE) --gnu random/Makefile

Makefile: $(srcdir)/Makefile.in  $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-libLTLIBRARIES:

clean-libLTLIBRARIES:
	-test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)

distclean-libLTLIBRARIES:

maintainer-clean-libLTLIBRARIES:

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(libdir)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_DATA) $$p $(DESTDIR)$(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	@$(NORMAL_UNINSTALL)
	list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(DESTDIR)$(libdir)/$$p; \
	done

.s.o:
	$(COMPILE) -c $<

.S.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	-rm -f *.o core *.core

clean-compile:

distclean-compile:
	-rm -f *.tab.c

maintainer-clean-compile:

.s.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

.S.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:

maintainer-clean-libtool:

libgslrandom.la: $(libgslrandom_la_OBJECTS) $(libgslrandom_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslrandom_la_LDFLAGS) $(libgslrandom_la_OBJECTS) $(libgslrandom_la_LIBADD) $(LIBS)

libgslrantaus.la: $(libgslrantaus_la_OBJECTS) $(libgslrantaus_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslrantaus_la_LDFLAGS) $(libgslrantaus_la_OBJECTS) $(libgslrantaus_la_LIBADD) $(LIBS)

libgslranmrg.la: $(libgslranmrg_la_OBJECTS) $(libgslranmrg_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslranmrg_la_LDFLAGS) $(libgslranmrg_la_OBJECTS) $(libgslranmrg_la_LIBADD) $(LIBS)

libgslrancmrg.la: $(libgslrancmrg_la_OBJECTS) $(libgslrancmrg_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslrancmrg_la_LDFLAGS) $(libgslrancmrg_la_OBJECTS) $(libgslrancmrg_la_LIBADD) $(LIBS)

libgslranuni.la: $(libgslranuni_la_OBJECTS) $(libgslranuni_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslranuni_la_LDFLAGS) $(libgslranuni_la_OBJECTS) $(libgslranuni_la_LIBADD) $(LIBS)

libgslranuni32.la: $(libgslranuni32_la_OBJECTS) $(libgslranuni32_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslranuni32_la_LDFLAGS) $(libgslranuni32_la_OBJECTS) $(libgslranuni32_la_LIBADD) $(LIBS)

libgslranzuf.la: $(libgslranzuf_la_OBJECTS) $(libgslranzuf_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslranzuf_la_LDFLAGS) $(libgslranzuf_la_OBJECTS) $(libgslranzuf_la_LIBADD) $(LIBS)

libgslranrand.la: $(libgslranrand_la_OBJECTS) $(libgslranrand_la_DEPENDENCIES)
	$(LINK) -rpath $(libdir) $(libgslranrand_la_LDFLAGS) $(libgslranrand_la_OBJECTS) $(libgslranrand_la_LIBADD) $(LIBS)

mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo " $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed '$(transform)'`"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(DESTDIR)$(bindir)/`echo $$p|sed '$(transform)'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	list='$(bin_PROGRAMS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(bindir)/`echo $$p|sed '$(transform)'`; \
	done

mostlyclean-checkPROGRAMS:

clean-checkPROGRAMS:
	-test -z "$(check_PROGRAMS)" || rm -f $(check_PROGRAMS)

distclean-checkPROGRAMS:

maintainer-clean-checkPROGRAMS:

taus: $(taus_OBJECTS) $(taus_DEPENDENCIES)
	@rm -f taus
	$(LINK) $(taus_LDFLAGS) $(taus_OBJECTS) $(taus_LDADD) $(LIBS)

mrg: $(mrg_OBJECTS) $(mrg_DEPENDENCIES)
	@rm -f mrg
	$(LINK) $(mrg_LDFLAGS) $(mrg_OBJECTS) $(mrg_LDADD) $(LIBS)

cmrg: $(cmrg_OBJECTS) $(cmrg_DEPENDENCIES)
	@rm -f cmrg
	$(LINK) $(cmrg_LDFLAGS) $(cmrg_OBJECTS) $(cmrg_LDADD) $(LIBS)

uni: $(uni_OBJECTS) $(uni_DEPENDENCIES)
	@rm -f uni
	$(LINK) $(uni_LDFLAGS) $(uni_OBJECTS) $(uni_LDADD) $(LIBS)

uni32: $(uni32_OBJECTS) $(uni32_DEPENDENCIES)
	@rm -f uni32
	$(LINK) $(uni32_LDFLAGS) $(uni32_OBJECTS) $(uni32_LDADD) $(LIBS)

zuf: $(zuf_OBJECTS) $(zuf_DEPENDENCIES)
	@rm -f zuf
	$(LINK) $(zuf_LDFLAGS) $(zuf_OBJECTS) $(zuf_LDADD) $(LIBS)

rand: $(rand_OBJECTS) $(rand_DEPENDENCIES)
	@rm -f rand
	$(LINK) $(rand_LDFLAGS) $(rand_OBJECTS) $(rand_LDADD) $(LIBS)

test-switch: $(test_switch_OBJECTS) $(test_switch_DEPENDENCIES)
	@rm -f test-switch
	$(LINK) $(test_switch_LDFLAGS) $(test_switch_OBJECTS) $(test_switch_LDADD) $(LIBS)

test-taus: $(test_taus_OBJECTS) $(test_taus_DEPENDENCIES)
	@rm -f test-taus
	$(LINK) $(test_taus_LDFLAGS) $(test_taus_OBJECTS) $(test_taus_LDADD) $(LIBS)

bench-taus: $(bench_taus_OBJECTS) $(bench_taus_DEPENDENCIES)
	@rm -f bench-taus
	$(LINK) $(bench_taus_LDFLAGS) $(bench_taus_OBJECTS) $(bench_taus_LDADD) $(LIBS)

test-mrg: $(test_mrg_OBJECTS) $(test_mrg_DEPENDENCIES)
	@rm -f test-mrg
	$(LINK) $(test_mrg_LDFLAGS) $(test_mrg_OBJECTS) $(test_mrg_LDADD) $(LIBS)

bench-mrg: $(bench_mrg_OBJECTS) $(bench_mrg_DEPENDENCIES)
	@rm -f bench-mrg
	$(LINK) $(bench_mrg_LDFLAGS) $(bench_mrg_OBJECTS) $(bench_mrg_LDADD) $(LIBS)

test-cmrg: $(test_cmrg_OBJECTS) $(test_cmrg_DEPENDENCIES)
	@rm -f test-cmrg
	$(LINK) $(test_cmrg_LDFLAGS) $(test_cmrg_OBJECTS) $(test_cmrg_LDADD) $(LIBS)

bench-cmrg: $(bench_cmrg_OBJECTS) $(bench_cmrg_DEPENDENCIES)
	@rm -f bench-cmrg
	$(LINK) $(bench_cmrg_LDFLAGS) $(bench_cmrg_OBJECTS) $(bench_cmrg_LDADD) $(LIBS)

test-uni: $(test_uni_OBJECTS) $(test_uni_DEPENDENCIES)
	@rm -f test-uni
	$(LINK) $(test_uni_LDFLAGS) $(test_uni_OBJECTS) $(test_uni_LDADD) $(LIBS)

bench-uni: $(bench_uni_OBJECTS) $(bench_uni_DEPENDENCIES)
	@rm -f bench-uni
	$(LINK) $(bench_uni_LDFLAGS) $(bench_uni_OBJECTS) $(bench_uni_LDADD) $(LIBS)

test-uni32: $(test_uni32_OBJECTS) $(test_uni32_DEPENDENCIES)
	@rm -f test-uni32
	$(LINK) $(test_uni32_LDFLAGS) $(test_uni32_OBJECTS) $(test_uni32_LDADD) $(LIBS)

bench-uni32: $(bench_uni32_OBJECTS) $(bench_uni32_DEPENDENCIES)
	@rm -f bench-uni32
	$(LINK) $(bench_uni32_LDFLAGS) $(bench_uni32_OBJECTS) $(bench_uni32_LDADD) $(LIBS)

test-zuf: $(test_zuf_OBJECTS) $(test_zuf_DEPENDENCIES)
	@rm -f test-zuf
	$(LINK) $(test_zuf_LDFLAGS) $(test_zuf_OBJECTS) $(test_zuf_LDADD) $(LIBS)

bench-zuf: $(bench_zuf_OBJECTS) $(bench_zuf_DEPENDENCIES)
	@rm -f bench-zuf
	$(LINK) $(bench_zuf_LDFLAGS) $(bench_zuf_OBJECTS) $(bench_zuf_LDADD) $(LIBS)

test-rand: $(test_rand_OBJECTS) $(test_rand_DEPENDENCIES)
	@rm -f test-rand
	$(LINK) $(test_rand_LDFLAGS) $(test_rand_OBJECTS) $(test_rand_LDADD) $(LIBS)

bench-rand: $(bench_rand_OBJECTS) $(bench_rand_DEPENDENCIES)
	@rm -f bench-rand
	$(LINK) $(bench_rand_LDFLAGS) $(bench_rand_OBJECTS) $(bench_rand_LDADD) $(LIBS)

install-includeHEADERS: $(include_HEADERS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(includedir)
	@list='$(include_HEADERS)'; for p in $$list; do \
	  if test -f "$$p"; then d= ; else d="$(srcdir)/"; fi; \
	  echo " $(INSTALL_DATA) $$d$$p $(DESTDIR)$(includedir)/$$p"; \
	  $(INSTALL_DATA) $$d$$p $(DESTDIR)$(includedir)/$$p; \
	done

uninstall-includeHEADERS:
	@$(NORMAL_UNINSTALL)
	list='$(include_HEADERS)'; for p in $$list; do \
	  rm -f $(DESTDIR)$(includedir)/$$p; \
	done

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP)
	here=`pwd` && cd $(srcdir) \
	  && mkid -f$$here/ID $(SOURCES) $(HEADERS) $(LISP)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)'; \
	unique=`for i in $$list; do echo $$i; done | \
	  awk '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$unique$(LISP)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $$unique $(LISP) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	-rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = random

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	distdir=`cd $(distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu random/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  test -f $(distdir)/$$file \
	  || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	  || cp -p $$d/$$file $(distdir)/$$file; \
	done

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:

maintainer-clean-depend:
	-rm -rf .deps

%.o: %.c
	@echo '$(COMPILE) -c $<'; \
	$(COMPILE) -Wp,-MD,.deps/$(*F).P -c $<

%.lo: %.c
	@echo '$(LTCOMPILE) -c $<'; \
	$(LTCOMPILE) -Wp,-MD,.deps/$(*F).p -c $<
	@-sed -e 's/^\([^:]*\)\.o:/\1.lo \1.o:/' \
	  < .deps/$(*F).p > .deps/$(*F).P
	@-rm -f .deps/$(*F).p
check-TESTS: $(TESTS)
	@failed=0; all=0; \
	srcdir=$(srcdir); export srcdir; \
	for tst in $(TESTS); do \
	  if test -f $$tst; then dir=.; \
	  else dir="$(srcdir)"; fi; \
	  if $(TESTS_ENVIRONMENT) $$dir/$$tst; then \
	    all=`expr $$all + 1`; \
	    echo "PASS: $$tst"; \
	  elif test $$? -ne 77; then \
	    all=`expr $$all + 1`; \
	    failed=`expr $$failed + 1`; \
	    echo "FAIL: $$tst"; \
	  fi; \
	done; \
	if test "$$failed" -eq 0; then \
	  banner="All $$all tests passed"; \
	else \
	  banner="$$failed of $$all tests failed"; \
	fi; \
	dashes=`echo "$$banner" | sed s/./=/g`; \
	echo "$$dashes"; \
	echo "$$banner"; \
	echo "$$dashes"; \
	test "$$failed" -eq 0
info:
dvi:
check: all $(check_PROGRAMS)
	$(MAKE) check-TESTS
installcheck:
install-exec: install-libLTLIBRARIES install-binPROGRAMS
	@$(NORMAL_INSTALL)

install-data: install-includeHEADERS
	@$(NORMAL_INSTALL)

install: install-exec install-data all
	@:

uninstall: uninstall-libLTLIBRARIES uninstall-binPROGRAMS uninstall-includeHEADERS

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' INSTALL_SCRIPT='$(INSTALL_PROGRAM)' install
installdirs:
	$(mkinstalldirs)  $(DATADIR)$(libdir) $(DATADIR)$(bindir) \
		$(DATADIR)$(includedir)


mostlyclean-generic:
	-test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(DISTCLEANFILES)
	-rm -f config.cache config.log stamp-h stamp-h[0-9]*
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	-test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean:  mostlyclean-libLTLIBRARIES mostlyclean-compile \
		mostlyclean-libtool mostlyclean-binPROGRAMS \
		mostlyclean-checkPROGRAMS mostlyclean-tags \
		mostlyclean-depend mostlyclean-generic

clean:  clean-libLTLIBRARIES clean-compile clean-libtool \
		clean-binPROGRAMS clean-checkPROGRAMS clean-tags \
		clean-depend clean-generic mostlyclean

distclean:  distclean-libLTLIBRARIES distclean-compile distclean-libtool \
		distclean-binPROGRAMS distclean-checkPROGRAMS \
		distclean-tags distclean-depend distclean-generic clean
	-rm -f config.status
	-rm -f libtool

maintainer-clean:  maintainer-clean-libLTLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-binPROGRAMS \
		maintainer-clean-checkPROGRAMS maintainer-clean-tags \
		maintainer-clean-depend maintainer-clean-generic \
		distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

.PHONY: mostlyclean-libLTLIBRARIES distclean-libLTLIBRARIES \
clean-libLTLIBRARIES maintainer-clean-libLTLIBRARIES \
uninstall-libLTLIBRARIES install-libLTLIBRARIES mostlyclean-compile \
distclean-compile clean-compile maintainer-clean-compile \
mostlyclean-libtool distclean-libtool clean-libtool \
maintainer-clean-libtool mostlyclean-binPROGRAMS distclean-binPROGRAMS \
clean-binPROGRAMS maintainer-clean-binPROGRAMS uninstall-binPROGRAMS \
install-binPROGRAMS mostlyclean-checkPROGRAMS distclean-checkPROGRAMS \
clean-checkPROGRAMS maintainer-clean-checkPROGRAMS \
uninstall-includeHEADERS install-includeHEADERS tags mostlyclean-tags \
distclean-tags clean-tags maintainer-clean-tags distdir \
mostlyclean-depend distclean-depend clean-depend \
maintainer-clean-depend check-TESTS info dvi installcheck install-exec \
install-data install uninstall all installdirs mostlyclean-generic \
distclean-generic clean-generic maintainer-clean-generic clean \
mostlyclean distclean maintainer-clean


switch.c gsl_ran_switch.h:
	$(srcdir)/makesrc --switch

# These are commented out now that the files are under CVS 
# The relative dates seem to cause a problem for make distcheck
# taus.h taus-state.c taus-gen.c: makesrc
#	$(srcdir)/makesrc taus

# mrg.h mrg-state.c mrg-gen.c: makesrc
#	$(srcdir)/makesrc mrg

# cmrg.h cmrg-state.c cmrg-gen.c: makesrc
#	$(srcdir)/makesrc cmrg

# uni.h uni-state.c uni-gen.c: makesrc
#	$(srcdir)/makesrc uni

# uni32.h uni32-state.c uni32-gen.c: makesrc
#	$(srcdir)/makesrc uni32

# zuf.h zuf-state.c zuf-gen.c: makesrc
#	$(srcdir)/makesrc zuf

# rand.h rand-state.c rand-gen.c: makesrc
#	$(srcdir)/makesrc rand

tooclean:
	/bin/rm -rf .deps
	/bin/rm -f taus.h taus-state.c taus-gen.c
	/bin/rm -f mrg.h mrg-state.c mrg-gen.c
	/bin/rm -f cmrg.h cmrg-state.c cmrg-gen.c
	/bin/rm -f uni.h uni-state.c uni-gen.c
	/bin/rm -f uni32.h uni32-state.c uni32-gen.c
	/bin/rm -f zuf.h zuf-state.c zuf-gen.c
	/bin/rm -f rand.h rand-state.c rand-gen.c
	/bin/rm -f switch.c gsl_ran_switch.h

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
