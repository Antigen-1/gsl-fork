# Makefile.in generated automatically by automake 1.1g from Makefile.am

# Copyright (C) 1994, 1995, 1996 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy, distribute and modify it.


SHELL = /bin/sh

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ..

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@
RANLIB = @RANLIB@
PACKAGE = @PACKAGE@
VERSION = @VERSION@
CC = @CC@

ALLRAN= taus mrg cmrg uni uni32 zuf rand
FAVORITERAN= taus

include_HEADERS= gsl_ran.h gsl_ran_switch.h

gauss_SOURCES= rungauss.c gauss.c
test_gauss_SOURCES= test-gauss.c gauss.c
bench_gauss_SOURCES= bench-gauss.c gauss.c

gauss_LDADD=       $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_gauss_LDADD=  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
bench_gauss_LDADD= $(FAVORITERAN).o $(FAVORITERAN)-gen.o

poisson_SOURCES= runpoisson.c poisson.c
test_poisson_SOURCES= test-poisson.c poisson.c
bench_poisson_SOURCES= bench-poisson.c poisson.c

poisson_LDADD=       $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_poisson_LDADD=  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
bench_poisson_LDADD= $(FAVORITERAN).o $(FAVORITERAN)-gen.o

test_switch_SOURCES= test-switch.c switch.c 

EXTRA_DIST= switch.xc makeswitch xxx-gen.xc xxx-state.xc \
	makeam Makefile.ami

CLEANFILES= tmp.out tmp.in

bin_PROGRAMS= taus test-taus bench-taus mrg test-mrg bench-mrg cmrg test-cmrg bench-cmrg uni test-uni bench-uni uni32 test-uni32 bench-uni32 zuf test-zuf bench-zuf rand test-rand bench-rand gauss test-gauss bench-gauss poisson test-poisson bench-poisson test-switch 

lib_LIBRARIES= gslrandom gslrantaus gslranmrg gslrancmrg gslranuni gslranuni32 gslranzuf gslranrand 

gslrantaus_SOURCES= taus.c taus-gen.c gauss.c 
gslranmrg_SOURCES= mrg.c mrg-gen.c gauss.c 
gslrancmrg_SOURCES= cmrg.c cmrg-gen.c gauss.c 
gslranuni_SOURCES= uni.c uni-gen.c gauss.c 
gslranuni32_SOURCES= uni32.c uni32-gen.c gauss.c 
gslranzuf_SOURCES= zuf.c zuf-gen.c gauss.c 
gslranrand_SOURCES= rand.c rand-gen.c gauss.c 

gslrandom_SOURCES= switch.c shuffle.c taus.c mrg.c cmrg.c uni.c uni32.c zuf.c rand.c gauss.c poisson.c 

test_switch_DEPENDENCIES= gsl_ran_switch.h taus.o mrg.o cmrg.o uni.o uni32.o zuf.o rand.o 
test_switch_LDADD= taus.o mrg.o cmrg.o uni.o uni32.o zuf.o rand.o 
taus_SOURCES=             ran.c taus.c
taus_DEPENDENCIES=        taus-state.c taus.h taus-gen.o
taus_LDADD=               taus-gen.o
test_taus_SOURCES=        testran.c
test_taus_DEPENDENCIES=   taus.o taus-gen.o taus.h
test_taus_LDADD=          taus.o taus-gen.o
bench_taus_SOURCES=       benchran.c
bench_taus_DEPENDENCIES=  taus.o taus-gen.o taus.h
bench_taus_LDADD=         taus.o taus-gen.o
mrg_SOURCES=             ran.c mrg.c
mrg_DEPENDENCIES=        mrg-state.c mrg.h mrg-gen.o
mrg_LDADD=               mrg-gen.o
test_mrg_SOURCES=        testran.c
test_mrg_DEPENDENCIES=   mrg.o mrg-gen.o mrg.h
test_mrg_LDADD=          mrg.o mrg-gen.o
bench_mrg_SOURCES=       benchran.c
bench_mrg_DEPENDENCIES=  mrg.o mrg-gen.o mrg.h
bench_mrg_LDADD=         mrg.o mrg-gen.o
cmrg_SOURCES=             ran.c cmrg.c
cmrg_DEPENDENCIES=        cmrg-state.c cmrg.h cmrg-gen.o
cmrg_LDADD=               cmrg-gen.o
test_cmrg_SOURCES=        testran.c
test_cmrg_DEPENDENCIES=   cmrg.o cmrg-gen.o cmrg.h
test_cmrg_LDADD=          cmrg.o cmrg-gen.o
bench_cmrg_SOURCES=       benchran.c
bench_cmrg_DEPENDENCIES=  cmrg.o cmrg-gen.o cmrg.h
bench_cmrg_LDADD=         cmrg.o cmrg-gen.o
uni_SOURCES=             ran.c uni.c
uni_DEPENDENCIES=        uni-state.c uni.h uni-gen.o
uni_LDADD=               uni-gen.o
test_uni_SOURCES=        testran.c
test_uni_DEPENDENCIES=   uni.o uni-gen.o uni.h
test_uni_LDADD=          uni.o uni-gen.o
bench_uni_SOURCES=       benchran.c
bench_uni_DEPENDENCIES=  uni.o uni-gen.o uni.h
bench_uni_LDADD=         uni.o uni-gen.o
uni32_SOURCES=             ran.c uni32.c
uni32_DEPENDENCIES=        uni32-state.c uni32.h uni32-gen.o
uni32_LDADD=               uni32-gen.o
test_uni32_SOURCES=        testran.c
test_uni32_DEPENDENCIES=   uni32.o uni32-gen.o uni32.h
test_uni32_LDADD=          uni32.o uni32-gen.o
bench_uni32_SOURCES=       benchran.c
bench_uni32_DEPENDENCIES=  uni32.o uni32-gen.o uni32.h
bench_uni32_LDADD=         uni32.o uni32-gen.o
zuf_SOURCES=             ran.c zuf.c
zuf_DEPENDENCIES=        zuf-state.c zuf.h zuf-gen.o
zuf_LDADD=               zuf-gen.o
test_zuf_SOURCES=        testran.c
test_zuf_DEPENDENCIES=   zuf.o zuf-gen.o zuf.h
test_zuf_LDADD=          zuf.o zuf-gen.o
bench_zuf_SOURCES=       benchran.c
bench_zuf_DEPENDENCIES=  zuf.o zuf-gen.o zuf.h
bench_zuf_LDADD=         zuf.o zuf-gen.o
rand_SOURCES=             ran.c rand.c
rand_DEPENDENCIES=        rand-state.c rand.h rand-gen.o
rand_LDADD=               rand-gen.o
test_rand_SOURCES=        testran.c
test_rand_DEPENDENCIES=   rand.o rand-gen.o rand.h
test_rand_LDADD=          rand.o rand-gen.o
bench_rand_SOURCES=       benchran.c
bench_rand_DEPENDENCIES=  rand.o rand-gen.o rand.h
bench_rand_LDADD=         rand.o rand-gen.o

BUILT_SOURCES= switch.c gsl_ran_switch.h taus-state.c taus.h taus-gen.c mrg-state.c mrg.h mrg-gen.c cmrg-state.c cmrg.h cmrg-gen.c uni-state.c uni.h uni-gen.c uni32-state.c uni32.h uni32-gen.c zuf-state.c zuf.h zuf-gen.c rand-state.c rand.h rand-gen.c 
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES = 
LIBRARIES =  $(lib_LIBRARIES)

lib_LIBFILES =  libgslrandom.a libgslrantaus.a libgslranmrg.a \
libgslrancmrg.a libgslranuni.a libgslranuni32.a libgslranzuf.a \
libgslranrand.a

DEFS = @DEFS@ -I. -I$(srcdir) 
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
gslrandom_LIBADD = 
gslrandom_OBJECTS =  switch.o shuffle.o taus.o mrg.o cmrg.o uni.o \
uni32.o zuf.o rand.o gauss.o poisson.o
EXTRA_gslrandom_SOURCES = 
gslrantaus_LIBADD = 
gslrantaus_OBJECTS =  taus.o taus-gen.o gauss.o
EXTRA_gslrantaus_SOURCES = 
gslranmrg_LIBADD = 
gslranmrg_OBJECTS =  mrg.o mrg-gen.o gauss.o
EXTRA_gslranmrg_SOURCES = 
gslrancmrg_LIBADD = 
gslrancmrg_OBJECTS =  cmrg.o cmrg-gen.o gauss.o
EXTRA_gslrancmrg_SOURCES = 
gslranuni_LIBADD = 
gslranuni_OBJECTS =  uni.o uni-gen.o gauss.o
EXTRA_gslranuni_SOURCES = 
gslranuni32_LIBADD = 
gslranuni32_OBJECTS =  uni32.o uni32-gen.o gauss.o
EXTRA_gslranuni32_SOURCES = 
gslranzuf_LIBADD = 
gslranzuf_OBJECTS =  zuf.o zuf-gen.o gauss.o
EXTRA_gslranzuf_SOURCES = 
gslranrand_LIBADD = 
gslranrand_OBJECTS =  rand.o rand-gen.o gauss.o
EXTRA_gslranrand_SOURCES = 
LIBFILES  =  $(pkglib_LIBFILES) $(noinst_LIBFILES) $(check_LIBFILES) \
$(lib_LIBFILES)
AR = ar
PROGRAMS =  $(bin_PROGRAMS)

taus_OBJECTS =  ran.o taus.o
EXTRA_taus_SOURCES = 
test_taus_OBJECTS =  testran.o
EXTRA_test_taus_SOURCES = 
bench_taus_OBJECTS =  benchran.o
EXTRA_bench_taus_SOURCES = 
mrg_OBJECTS =  ran.o mrg.o
EXTRA_mrg_SOURCES = 
test_mrg_OBJECTS =  testran.o
EXTRA_test_mrg_SOURCES = 
bench_mrg_OBJECTS =  benchran.o
EXTRA_bench_mrg_SOURCES = 
cmrg_OBJECTS =  ran.o cmrg.o
EXTRA_cmrg_SOURCES = 
test_cmrg_OBJECTS =  testran.o
EXTRA_test_cmrg_SOURCES = 
bench_cmrg_OBJECTS =  benchran.o
EXTRA_bench_cmrg_SOURCES = 
uni_OBJECTS =  ran.o uni.o
EXTRA_uni_SOURCES = 
test_uni_OBJECTS =  testran.o
EXTRA_test_uni_SOURCES = 
bench_uni_OBJECTS =  benchran.o
EXTRA_bench_uni_SOURCES = 
uni32_OBJECTS =  ran.o uni32.o
EXTRA_uni32_SOURCES = 
test_uni32_OBJECTS =  testran.o
EXTRA_test_uni32_SOURCES = 
bench_uni32_OBJECTS =  benchran.o
EXTRA_bench_uni32_SOURCES = 
zuf_OBJECTS =  ran.o zuf.o
EXTRA_zuf_SOURCES = 
test_zuf_OBJECTS =  testran.o
EXTRA_test_zuf_SOURCES = 
bench_zuf_OBJECTS =  benchran.o
EXTRA_bench_zuf_SOURCES = 
rand_OBJECTS =  ran.o rand.o
EXTRA_rand_SOURCES = 
test_rand_OBJECTS =  testran.o
EXTRA_test_rand_SOURCES = 
bench_rand_OBJECTS =  benchran.o
EXTRA_bench_rand_SOURCES = 
gauss_OBJECTS =  rungauss.o gauss.o
EXTRA_gauss_SOURCES = 
gauss_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_gauss_OBJECTS =  test-gauss.o gauss.o
EXTRA_test_gauss_SOURCES = 
test_gauss_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
bench_gauss_OBJECTS =  bench-gauss.o gauss.o
EXTRA_bench_gauss_SOURCES = 
bench_gauss_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
poisson_OBJECTS =  runpoisson.o poisson.o
EXTRA_poisson_SOURCES = 
poisson_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_poisson_OBJECTS =  test-poisson.o poisson.o
EXTRA_test_poisson_SOURCES = 
test_poisson_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
bench_poisson_OBJECTS =  bench-poisson.o poisson.o
EXTRA_bench_poisson_SOURCES = 
bench_poisson_DEPENDENCIES =  $(FAVORITERAN).o $(FAVORITERAN)-gen.o
test_switch_OBJECTS =  test-switch.o switch.o
EXTRA_test_switch_SOURCES = 
CFLAGS = @CFLAGS@
COMPILE = $(CC) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)
LINK = $(CC) $(LDFLAGS) -o $@
HEADERS =  $(include_HEADERS)

DIST_COMMON =  Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) \
	$(TEXINFOS) $(MANS) $(EXTRA_DIST)

TAR = tar
DEP_FILES =  .deps/bench-gauss.P .deps/bench-poisson.P .deps/benchran.P \
.deps/cmrg-gen.P .deps/cmrg-state.P .deps/cmrg.P .deps/gauss.P \
.deps/mrg-gen.P .deps/mrg-state.P .deps/mrg.P .deps/poisson.P \
.deps/ran.P .deps/rand-gen.P .deps/rand-state.P .deps/rand.P \
.deps/rungauss.P .deps/runpoisson.P .deps/shuffle.P .deps/switch.P \
.deps/taus-gen.P .deps/taus-state.P .deps/taus.P .deps/test-gauss.P \
.deps/test-poisson.P .deps/test-switch.P .deps/testran.P \
.deps/uni-gen.P .deps/uni-state.P .deps/uni.P .deps/uni32-gen.P \
.deps/uni32-state.P .deps/uni32.P .deps/zuf-gen.P .deps/zuf-state.P \
.deps/zuf.P
SOURCES = $(gslrandom_SOURCES) $(gslrantaus_SOURCES) $(gslranmrg_SOURCES) $(gslrancmrg_SOURCES) $(gslranuni_SOURCES) $(gslranuni32_SOURCES) $(gslranzuf_SOURCES) $(gslranrand_SOURCES) $(taus_SOURCES) $(test_taus_SOURCES) $(bench_taus_SOURCES) $(mrg_SOURCES) $(test_mrg_SOURCES) $(bench_mrg_SOURCES) $(cmrg_SOURCES) $(test_cmrg_SOURCES) $(bench_cmrg_SOURCES) $(uni_SOURCES) $(test_uni_SOURCES) $(bench_uni_SOURCES) $(uni32_SOURCES) $(test_uni32_SOURCES) $(bench_uni32_SOURCES) $(zuf_SOURCES) $(test_zuf_SOURCES) $(bench_zuf_SOURCES) $(rand_SOURCES) $(test_rand_SOURCES) $(bench_rand_SOURCES) $(gauss_SOURCES) $(test_gauss_SOURCES) $(bench_gauss_SOURCES) $(poisson_SOURCES) $(test_poisson_SOURCES) $(bench_poisson_SOURCES) $(test_switch_SOURCES)
OBJECTS = $(gslrandom_OBJECTS) $(gslrantaus_OBJECTS) $(gslranmrg_OBJECTS) $(gslrancmrg_OBJECTS) $(gslranuni_OBJECTS) $(gslranuni32_OBJECTS) $(gslranzuf_OBJECTS) $(gslranrand_OBJECTS) $(taus_OBJECTS) $(test_taus_OBJECTS) $(bench_taus_OBJECTS) $(mrg_OBJECTS) $(test_mrg_OBJECTS) $(bench_mrg_OBJECTS) $(cmrg_OBJECTS) $(test_cmrg_OBJECTS) $(bench_cmrg_OBJECTS) $(uni_OBJECTS) $(test_uni_OBJECTS) $(bench_uni_OBJECTS) $(uni32_OBJECTS) $(test_uni32_OBJECTS) $(bench_uni32_OBJECTS) $(zuf_OBJECTS) $(test_zuf_OBJECTS) $(bench_zuf_OBJECTS) $(rand_OBJECTS) $(test_rand_OBJECTS) $(bench_rand_OBJECTS) $(gauss_OBJECTS) $(test_gauss_OBJECTS) $(bench_gauss_OBJECTS) $(poisson_OBJECTS) $(test_poisson_OBJECTS) $(bench_poisson_OBJECTS) $(test_switch_OBJECTS)

default: all


$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in
	cd $(top_srcdir) && automake --strictness=gnu $(subdir)/Makefile

Makefile: $(top_builddir)/config.status $(srcdir)/Makefile.in $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status

mostlyclean-libLIBRARIES:

clean-libLIBRARIES:
	test -z "$(lib_LIBFILES)" || rm -f $(lib_LIBFILES)

distclean-libLIBRARIES:

maintainer-clean-libLIBRARIES:

install-libLIBRARIES: $(lib_LIBFILES)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(libdir)
	list="$(lib_LIBFILES)"; for p in $$list; do \
	  if test -f $$p; then \
	    $(INSTALL_DATA) $$p $(libdir)/$$p; \
	  else :; fi; \
	done
	$(POST_INSTALL)
	list="$(lib_LIBFILES)"; for p in $$list; do \
	  if test -f $$p; then \
	    $(RANLIB) $(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLIBRARIES:
	list="$(lib_LIBFILES)"; for p in $$list; do \
	  rm -f $(libdir)/$$p; \
	done

.c.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	rm -f *.o core

clean-compile:

distclean-compile:
	rm -f *.tab.c

maintainer-clean-compile:

libgslrandom.a: $(gslrandom_OBJECTS) $(gslrandom_DEPENDENCIES)
	rm -f libgslrandom.a
	$(AR) cru libgslrandom.a $(gslrandom_OBJECTS) $(gslrandom_LIBADD)
	$(RANLIB) libgslrandom.a

libgslrantaus.a: $(gslrantaus_OBJECTS) $(gslrantaus_DEPENDENCIES)
	rm -f libgslrantaus.a
	$(AR) cru libgslrantaus.a $(gslrantaus_OBJECTS) $(gslrantaus_LIBADD)
	$(RANLIB) libgslrantaus.a

libgslranmrg.a: $(gslranmrg_OBJECTS) $(gslranmrg_DEPENDENCIES)
	rm -f libgslranmrg.a
	$(AR) cru libgslranmrg.a $(gslranmrg_OBJECTS) $(gslranmrg_LIBADD)
	$(RANLIB) libgslranmrg.a

libgslrancmrg.a: $(gslrancmrg_OBJECTS) $(gslrancmrg_DEPENDENCIES)
	rm -f libgslrancmrg.a
	$(AR) cru libgslrancmrg.a $(gslrancmrg_OBJECTS) $(gslrancmrg_LIBADD)
	$(RANLIB) libgslrancmrg.a

libgslranuni.a: $(gslranuni_OBJECTS) $(gslranuni_DEPENDENCIES)
	rm -f libgslranuni.a
	$(AR) cru libgslranuni.a $(gslranuni_OBJECTS) $(gslranuni_LIBADD)
	$(RANLIB) libgslranuni.a

libgslranuni32.a: $(gslranuni32_OBJECTS) $(gslranuni32_DEPENDENCIES)
	rm -f libgslranuni32.a
	$(AR) cru libgslranuni32.a $(gslranuni32_OBJECTS) $(gslranuni32_LIBADD)
	$(RANLIB) libgslranuni32.a

libgslranzuf.a: $(gslranzuf_OBJECTS) $(gslranzuf_DEPENDENCIES)
	rm -f libgslranzuf.a
	$(AR) cru libgslranzuf.a $(gslranzuf_OBJECTS) $(gslranzuf_LIBADD)
	$(RANLIB) libgslranzuf.a

libgslranrand.a: $(gslranrand_OBJECTS) $(gslranrand_DEPENDENCIES)
	rm -f libgslranrand.a
	$(AR) cru libgslranrand.a $(gslranrand_OBJECTS) $(gslranrand_LIBADD)
	$(RANLIB) libgslranrand.a

mostlyclean-binPROGRAMS:

clean-binPROGRAMS:
	test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)

distclean-binPROGRAMS:

maintainer-clean-binPROGRAMS:

install-binPROGRAMS: $(bin_PROGRAMS)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(bindir)
	list="$(bin_PROGRAMS)"; for p in $$list; do \
	  if test -f $$p; then \
	    $(INSTALL_PROGRAM) $$p $(bindir)/`echo $$p|sed '$(transform)'`; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	list="$(bin_PROGRAMS)"; for p in $$list; do \
	  rm -f $(bindir)/`echo $$p|sed '$(transform)'`; \
	done

taus: $(taus_OBJECTS) $(taus_DEPENDENCIES)
	$(LINK) $(taus_OBJECTS) $(taus_LDADD) $(LIBS)

test-taus: $(test_taus_OBJECTS) $(test_taus_DEPENDENCIES)
	$(LINK) $(test_taus_OBJECTS) $(test_taus_LDADD) $(LIBS)

bench-taus: $(bench_taus_OBJECTS) $(bench_taus_DEPENDENCIES)
	$(LINK) $(bench_taus_OBJECTS) $(bench_taus_LDADD) $(LIBS)

mrg: $(mrg_OBJECTS) $(mrg_DEPENDENCIES)
	$(LINK) $(mrg_OBJECTS) $(mrg_LDADD) $(LIBS)

test-mrg: $(test_mrg_OBJECTS) $(test_mrg_DEPENDENCIES)
	$(LINK) $(test_mrg_OBJECTS) $(test_mrg_LDADD) $(LIBS)

bench-mrg: $(bench_mrg_OBJECTS) $(bench_mrg_DEPENDENCIES)
	$(LINK) $(bench_mrg_OBJECTS) $(bench_mrg_LDADD) $(LIBS)

cmrg: $(cmrg_OBJECTS) $(cmrg_DEPENDENCIES)
	$(LINK) $(cmrg_OBJECTS) $(cmrg_LDADD) $(LIBS)

test-cmrg: $(test_cmrg_OBJECTS) $(test_cmrg_DEPENDENCIES)
	$(LINK) $(test_cmrg_OBJECTS) $(test_cmrg_LDADD) $(LIBS)

bench-cmrg: $(bench_cmrg_OBJECTS) $(bench_cmrg_DEPENDENCIES)
	$(LINK) $(bench_cmrg_OBJECTS) $(bench_cmrg_LDADD) $(LIBS)

uni: $(uni_OBJECTS) $(uni_DEPENDENCIES)
	$(LINK) $(uni_OBJECTS) $(uni_LDADD) $(LIBS)

test-uni: $(test_uni_OBJECTS) $(test_uni_DEPENDENCIES)
	$(LINK) $(test_uni_OBJECTS) $(test_uni_LDADD) $(LIBS)

bench-uni: $(bench_uni_OBJECTS) $(bench_uni_DEPENDENCIES)
	$(LINK) $(bench_uni_OBJECTS) $(bench_uni_LDADD) $(LIBS)

uni32: $(uni32_OBJECTS) $(uni32_DEPENDENCIES)
	$(LINK) $(uni32_OBJECTS) $(uni32_LDADD) $(LIBS)

test-uni32: $(test_uni32_OBJECTS) $(test_uni32_DEPENDENCIES)
	$(LINK) $(test_uni32_OBJECTS) $(test_uni32_LDADD) $(LIBS)

bench-uni32: $(bench_uni32_OBJECTS) $(bench_uni32_DEPENDENCIES)
	$(LINK) $(bench_uni32_OBJECTS) $(bench_uni32_LDADD) $(LIBS)

zuf: $(zuf_OBJECTS) $(zuf_DEPENDENCIES)
	$(LINK) $(zuf_OBJECTS) $(zuf_LDADD) $(LIBS)

test-zuf: $(test_zuf_OBJECTS) $(test_zuf_DEPENDENCIES)
	$(LINK) $(test_zuf_OBJECTS) $(test_zuf_LDADD) $(LIBS)

bench-zuf: $(bench_zuf_OBJECTS) $(bench_zuf_DEPENDENCIES)
	$(LINK) $(bench_zuf_OBJECTS) $(bench_zuf_LDADD) $(LIBS)

rand: $(rand_OBJECTS) $(rand_DEPENDENCIES)
	$(LINK) $(rand_OBJECTS) $(rand_LDADD) $(LIBS)

test-rand: $(test_rand_OBJECTS) $(test_rand_DEPENDENCIES)
	$(LINK) $(test_rand_OBJECTS) $(test_rand_LDADD) $(LIBS)

bench-rand: $(bench_rand_OBJECTS) $(bench_rand_DEPENDENCIES)
	$(LINK) $(bench_rand_OBJECTS) $(bench_rand_LDADD) $(LIBS)

gauss: $(gauss_OBJECTS) $(gauss_DEPENDENCIES)
	$(LINK) $(gauss_OBJECTS) $(gauss_LDADD) $(LIBS)

test-gauss: $(test_gauss_OBJECTS) $(test_gauss_DEPENDENCIES)
	$(LINK) $(test_gauss_OBJECTS) $(test_gauss_LDADD) $(LIBS)

bench-gauss: $(bench_gauss_OBJECTS) $(bench_gauss_DEPENDENCIES)
	$(LINK) $(bench_gauss_OBJECTS) $(bench_gauss_LDADD) $(LIBS)

poisson: $(poisson_OBJECTS) $(poisson_DEPENDENCIES)
	$(LINK) $(poisson_OBJECTS) $(poisson_LDADD) $(LIBS)

test-poisson: $(test_poisson_OBJECTS) $(test_poisson_DEPENDENCIES)
	$(LINK) $(test_poisson_OBJECTS) $(test_poisson_LDADD) $(LIBS)

bench-poisson: $(bench_poisson_OBJECTS) $(bench_poisson_DEPENDENCIES)
	$(LINK) $(bench_poisson_OBJECTS) $(bench_poisson_LDADD) $(LIBS)

test-switch: $(test_switch_OBJECTS) $(test_switch_DEPENDENCIES)
	$(LINK) $(test_switch_OBJECTS) $(test_switch_LDADD) $(LIBS)

install-includeHEADERS: $(include_HEADERS)
	$(NORMAL_INSTALL)
	$(mkinstalldirs) $(includedir)
	list="$(include_HEADERS)"; for p in $$list; do \
	  $(INSTALL_DATA) $(srcdir)/$$p $(includedir)/$$p; \
	done

uninstall-includeHEADERS:
	list="$(include_HEADERS)"; for p in $$list; do \
	  rm -f $(includedir)/$$p; \
	done

ID: $(HEADERS) $(SOURCES)
	here=`pwd` && cd $(srcdir) && mkid -f$$here/ID $(SOURCES) $(HEADERS)

tags: TAGS

TAGS: $(HEADERS) $(SOURCES) $(TAGS_DEPENDENCIES)
	here=`pwd` && cd $(srcdir) && etags $(ETAGS_ARGS) $(SOURCES) $(HEADERS) -o $$here/TAGS

mostlyclean-tags:

clean-tags:

distclean-tags:
	rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = random
distdir: $(DISTFILES)
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  test -f $(distdir)/$$file \
	  || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	  || cp -p $$d/$$file $(distdir)/$$file; \
	done

MKDEP = gcc -M $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)

-include .deps/.P
.deps/.P:
	test -d .deps || mkdir .deps
	echo > $@

-include $(DEP_FILES)
$(DEP_FILES): .deps/.P

mostlyclean-depend:

clean-depend:

distclean-depend:

maintainer-clean-depend:
	rm -rf .deps

.deps/%.P: $(srcdir)/%.c
	$(MKDEP) $< > $@-tmp
	if test -n "$o"; then			\
	  sed 's/\.o:/$$o:/' $@-tmp > $@;	\
	  rm $@-tmp;				\
	else					\
	  mv $@-tmp $@;				\
	fi
info:
dvi:
check: all
installcheck:
install-exec: install-libLIBRARIES install-binPROGRAMS
	$(NORMAL_INSTALL)

install-data: install-includeHEADERS
	$(NORMAL_INSTALL)

install: install-exec install-data all
	@:

uninstall: uninstall-libLIBRARIES uninstall-binPROGRAMS uninstall-includeHEADERS

all: $(LIBFILES) $(PROGRAMS) $(BUILT_SOURCES) $(HEADERS) Makefile

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' install
installdirs:
	$(mkinstalldirs)  $(libdir) $(bindir) $(includedir)


mostlyclean-generic:
	test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	rm -f Makefile $(DISTCLEANFILES)
	rm -f config.cache config.log stamp-h
	test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean:  mostlyclean-libLIBRARIES mostlyclean-compile \
		mostlyclean-binPROGRAMS mostlyclean-tags \
		mostlyclean-depend mostlyclean-generic

clean:  clean-libLIBRARIES clean-compile clean-binPROGRAMS clean-tags \
		clean-depend clean-generic mostlyclean 

distclean:  distclean-libLIBRARIES distclean-compile \
		distclean-binPROGRAMS distclean-tags distclean-depend \
		distclean-generic clean 
	rm -f config.status

maintainer-clean:  maintainer-clean-libLIBRARIES \
		maintainer-clean-compile maintainer-clean-binPROGRAMS \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean 
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

.PHONY: default mostlyclean-libLIBRARIES distclean-libLIBRARIES \
clean-libLIBRARIES maintainer-clean-libLIBRARIES uninstall-libLIBRARIES \
install-libLIBRARIES mostlyclean-compile distclean-compile \
clean-compile maintainer-clean-compile mostlyclean-binPROGRAMS \
distclean-binPROGRAMS clean-binPROGRAMS maintainer-clean-binPROGRAMS \
uninstall-binPROGRAMS install-binPROGRAMS uninstall-includeHEADERS \
install-includeHEADERS tags mostlyclean-tags distclean-tags clean-tags \
maintainer-clean-tags distdir mostlyclean-depend distclean-depend \
clean-depend maintainer-clean-depend info dvi check installcheck \
install-exec install-data install uninstall all installdirs \
mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


switch.c gsl_ran_switch.h: switch.xc makeswitch
	makeswitch $(ALLRAN) 

Makefile.am: Makefile.ami makeam
	cat Makefile.ami    > Makefile.am
	./makeam $(ALLRAN) >> Makefile.am

test-shuffle: test-shuffle.o $(FAVORITERAN).o $(FAVORITERAN)-gen.o
	$(LINK) -o $@ test-shuffle.o $(FAVORITERAN).o $(FAVORITERAN)-gen.o -lm

test-shuffle.o: shuffle.c
	$(COMPILE) -c -DMAIN -o $@ shuffle.c

taus-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_taus_/g xxx-state.xc > $@
taus.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_taus_/g gsl_ran.h > $@
taus-gen.c: xxx-gen.xc
	sed s/xxx/taus/g xxx-gen.xc > $@
mrg-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_mrg_/g xxx-state.xc > $@
mrg.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_mrg_/g gsl_ran.h > $@
mrg-gen.c: xxx-gen.xc
	sed s/xxx/mrg/g xxx-gen.xc > $@
cmrg-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_cmrg_/g xxx-state.xc > $@
cmrg.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_cmrg_/g gsl_ran.h > $@
cmrg-gen.c: xxx-gen.xc
	sed s/xxx/cmrg/g xxx-gen.xc > $@
uni-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_uni_/g xxx-state.xc > $@
uni.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_uni_/g gsl_ran.h > $@
uni-gen.c: xxx-gen.xc
	sed s/xxx/uni/g xxx-gen.xc > $@
uni32-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_uni32_/g xxx-state.xc > $@
uni32.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_uni32_/g gsl_ran.h > $@
uni32-gen.c: xxx-gen.xc
	sed s/xxx/uni32/g xxx-gen.xc > $@
zuf-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_zuf_/g xxx-state.xc > $@
zuf.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_zuf_/g gsl_ran.h > $@
zuf-gen.c: xxx-gen.xc
	sed s/xxx/zuf/g xxx-gen.xc > $@
rand-state.c: xxx-state.xc
	sed s/gsl_ran_xxx_/gsl_ran_rand_/g xxx-state.xc > $@
rand.h: gsl_ran.h
	sed s/gsl_ran_/gsl_ran_rand_/g gsl_ran.h > $@
rand-gen.c: xxx-gen.xc
	sed s/xxx/rand/g xxx-gen.xc > $@
.SUFFIXES:
.SUFFIXES: .c .o

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
