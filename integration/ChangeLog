Mon Feb 14 13:45:04 2000  Brian Gough  <bjg@network-theory.co.uk>

	* qk.c: renamed function qk to gsl_integration_qk since it is
 	exported

	* err.c: made internal function rescale_err static, only used in
 	qk.c and qng.c

Mon Jul 12 11:37:55 1999  Brian Gough  <bjg@network-theory.co.uk>

	* qawc_impl.c (gsl_integration_qawc_impl): removed, no longer
 	necessary since everything goes into qawc.c

Fri Apr  2 20:57:09 1999  Brian Gough  <bjg@netsci.freeserve.co.uk>

	* qelg.c (qelg): removed debugging code

	* qpsrt.c (qpsrt): removed debugging code

Thu Mar 11 15:15:46 1999  Brian Gough  <bjg@netsci.freeserve.co.uk>

	* qags_impl.c (gsl_integration_qags_impl): removed dependency in
 	quadrature function calls by introducing dummy variables resabs1
 	and resabs2

Wed Mar 10 19:05:41 1999  Brian Gough  <bjg@netsci.freeserve.co.uk>

	* added integrators QAGI, QAGIU, QAGIL for infinite and
 	semi-infinite ranges

1999-01-01  Mark Galassi  <rosalia@cygnus.com>

	* integration.c: replaced strings.h with string.h, which is the
	ISO library way.

Sat Nov 21 12:43:03 1998  Brian Gough  <bjg@vvv.lanl.gov>

	* Makefile.am (libgslintegration_a_SOURCES): eliminated local
 	max.h in favor of global GSL_MAX

	* added missing gsl_math.h headers for new GSL_DBL_EPSILON macros

Tue Nov 17 17:16:51 1998  Brian Gough  <bjg@vvv.lanl.gov>

	* added #include <config.h> to all top-level source files

Fri Jun 12 22:30:21 1998  Brian Gough  <bjg@vvv.lanl.gov>

	* qage_impl.c: started using volatile (selectively) to enforce
 	strict IEEE behavior for the branches where it matters. I was
 	going to use gcc's -ffloat-store option but it didn't work for me.
  	Using volatile is not really a complete solution but is probably
 	close enough for all practical purposes (also it doesn't degrade
 	the performance as much as -ffloat-store would).
	
Sat May 30 15:40:51 1998  Brian Gough  <bjg@vvv.lanl.gov>

	* test.c (main): basic tests of qage are now complete

	* qage_impl.c (gsl_integration_qage_impl): fixed serious bug for
 	index i, which was incremented at the end of the do loop and
 	give an extra undefined entry in the result list!
	
